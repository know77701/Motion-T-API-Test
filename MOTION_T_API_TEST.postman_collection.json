{
	"info": {
		"_postman_id": "20f33fd7-7ec9-49da-8743-20687545ecf3",
		"name": "MOTION T API TEST",
		"description": "# 필수 설치\n\nNode.js 다운로드\n\n[https://nodejs.org/en/download](https://nodejs.org/en/download)\n\n# API\n\nMOTION_T API TEST v.1.0.0\n\n2024.03.26 \\~ 2024.05.08\n\n- newman 설치 > 완료\n- jenkins 설치 > 완료\n    - 로컬 slack 알림 > 완료\n- Ncloud 연동\n    - jenkins 설치\n    - slack 알림 연동\n        - naver works 연동가능 여부 확인\n\n---\n\nMOTION_T API TEST v.1.0.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24827265",
		"_collection_link": "https://triupqa.postman.co/workspace/triup_QA-Workspace~82c3f0c6-65e5-4474-b313-9de92c879709/collection/24827265-20f33fd7-7ec9-49da-8743-20687545ecf3?action=share&source=collection_link&creator=24827265"
	},
	"item": [
		{
			"name": "Q",
			"item": [
				{
					"name": "예시",
					"item": [
						{
							"name": "예시",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// 1안\r",
											"const userData = {\r",
											"    'ykiho': '22222222',\r",
											"    'userId': 'ADMIN',\r",
											"    'userPw': 'xmfkdldjq1!1'\r",
											"};\r",
											"\r",
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    'mode': 'urlencoded',\r",
											"    'urlencoded' : Object.entries(userData)\r",
											"        .map(([key, value]) => ({ key, value })),\r",
											"    \r",
											"}\r",
											"\r",
											"// 2안\r",
											"pm.request.headers.add({key: \"Content-Type\", value: \"multipart/form-data\"});\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'formdata',\r",
											"    formdata: [\r",
											"        { key: 'patNo', value: pm.collectionVariables.get('PAT_NO') },\r",
											"        { key: 'vistSn', value: '' },\r",
											"        { key: 'cnstSn', value: '' },\r",
											"        { key: 'pageNo', value: '1' },\r",
											"        { key: 'cnstImage', type: 'file', src: 'C:/Users/know7/Postman/files/페페.jpg'}\r",
											"    ]\r",
											"};\r",
											"\r",
											"\r",
											"// 3안\r",
											"const variables = {\r",
											"    'searchDay' : '20240408',\r",
											"    'searchWord' : pm.collectionVariables.get('PAT_NM')\r",
											"}\r",
											"\r",
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"Object.keys(variables).forEach((val) =>{\r",
											"    pm.variables.set(val, variables[val]);\r",
											"    pm.request.url.query.add({\r",
											"        key : val,\r",
											"        value : pm.variables.get(val)\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// 4안\r",
											"pm.request.body.formdata.add({key:'patNo', value: pm.collectionVariables.get('PAT_NO')})\r",
											"pm.request.body.formdata.add({key:'memoTxt', value:''});\r",
											"pm.request.body.formdata.add({key:'ImageTitle', value:''});\r",
											"pm.request.body.formdata.add({key:'services', value:''});\r",
											"// memoimage는 Type 이 file\r",
											"pm.request.body.formdata.add({ key:'memoImage', type:'file', src: 'C:/Users/know7/Desktop/페페.jpg', name: '페페.jpg'});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"    'type': 'object',",
											"    'properties': {",
											"        'status': { 'type': 'string' },",
											"        'result': { 'type': 'string' },",
											"        'access_token': { 'type': 'string'}",
											"    },",
											"    'required': ['status','result','access_token']",
											"};",
											"",
											"pm.test(\"server status 200 OK\", function() {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Credentials\")).to.be.oneOf([undefined,'false'])",
											"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).not.equal(pm.environment.get(\"malicious_origin\"))",
											"    pm.environment.set('accessToken', pm.response.json().access_token);",
											"});",
											"",
											"pm.test('Body status', function () {",
											"   pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"schema validation\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    ",
											"});",
											"",
											"console.log(pm.response.headers);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{domain}}/login",
									"host": [
										"{{domain}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.13 진료일자 별 수납 내역/ 수정필요",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const PAT_NO = pm.collectionVariables.get('PAT_NO');\r",
									"// const domain = pm.environment.get('domain');\r",
									"\r",
									"// pm.request.url = `${domain}/ptnt/rcpt/${PAT_NO}`;\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// const resJson = pm.response.json();\r",
									"// const userData =  resJson.data;\r",
									"// console.log(userData)\r",
									"// const schema = {\r",
									"//     'type': 'object',\r",
									"//     'properties': {\r",
									"//         'status': {'type': 'string'},\r",
									"//         'result': {'type': 'string'},\r",
									"//         'data': {\r",
									"//             'type': 'array',\r",
									"//             'items': {\r",
									"//                 'type': 'object',\r",
									"//                 'properties': {\r",
									"//                      'type' : ['string','object']\r",
									"//                 }\r",
									"//             },\r",
									"//             'required': userData,\r",
									"//         },\r",
									"//     },\r",
									"//     'required': ['status', 'result', 'data'],\r",
									"// }\r",
									"\r",
									"// pm.test('schema validation', () => {\r",
									"//     pm.response.to.have.jsonSchema(schema);\r",
									"// });\r",
									"\r",
									"pm.test(\"status 200 ok\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"return status 200\", () =>{\r",
									"    const returnStatus = pm.response.json();\r",
									"    pm.expect(returnStatus.status).to.equals(\"200\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/ptnt/rcpt/{{PAT_NO}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ptnt",
								"rcpt",
								"{{PAT_NO}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "8.2 동의서 저장",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = { \r",
									"    'type' : 'object',\r",
									"    'properties' : {\r",
									"        'status' : {'type': 'string'},\r",
									"        'result' : {'type': 'string'},\r",
									"    },\r",
									"    'required' : ['patNo', 'vistSn','cnstSn','pageNo','cnstImage']\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"서버상태 ok\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test(\"응답 상태 ok\", function(){\r",
									"    pm.expect(pm.response.json().status).to.oneOf([\"200\",\"210\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
									"newFormData.push({ key: 'vistSn', value: pm.collectionVariables.get('VIST_SN') });\r",
									"newFormData.push({ key: 'cnstSn', value: pm.collectionVariables.get('CNST_SN') });\r",
									"newFormData.push({ key: 'pageNo', value: '0'});\r",
									"newFormData.push({ key: 'services', value: '미지정'});\r",
									"newFormData.push({ key: 'cnstImage', type: 'file', src: 'C:/works/apiTest/image/TestImage1.jpg'});\r",
									"\r",
									"pm.request.body.formdata = newFormData;\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patNo",
									"value": "{{PAT_NO}}\n",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/cnst",
							"host": [
								"{{domain}}"
							],
							"path": [
								"cnst"
							]
						}
					},
					"response": []
				}
			],
			"description": "**일정**\n\n2024\\~03\\~18 \\~\n\n**질문 리스트**\n\n- 3.4 주소검색 > API 삭제\n- 3.5 접수\n    - 오기입하여 접수 시 접수됨.\n- 4.9 진료 메모 조회 / 4.13 500에러 리턴\n- 10.4 응답값에 코드값도 같이 넘어옴\n- 5.1.2 \\~ 5.1.3 데이터 오입력/미등록 상태에서 조회 됨\n- 9.2 상담저장 불가\n    \n\n# Test 정책\n\n1. Pre-request Script / Tests 작성된 변수명 및 형식\n2. **필수 작성 목록**\n    1. 비정상값 데이터 입력 후 API 전송 시 데이터 리턴 확인\n    2. 필수값 이외 데이터 입력 후 API 전송 시 데이터 리턴 확인\n        - 필수 paramter : `A`\n        - 선택 paramter : `B`\n            - `A` 만 request로 보냈을 때 `statusCode 200` return 되고,\n            - `A` 와 `B`를 같이 보냈을 때에도 `statusCode 200` 이 return되는지 확인.\n            - 정의되지 않은 많은 양의 parameter를 보낸다던지의 테스트도 진행\n    3. 사용자 권한에 따라 다르게 동작해야 하는 경우 확인 // 예외 처리\n    4. 상태코드 체크 확인\n    5. 객체포함유무 확인//예외 처리\n    6. 데이터타입 확인\n    7. empty 유무 확인\n    8. 응답 시간 확인\n    9. 단일 API 가 아닌 다중 API 요청에 대한 CRUD 검증 플로우\n3. 응답값으로 맞출것\n4. 사진 업로드 주소 처리방법\n    1. 주소 통일  \n        C:/works/apiTest/image/TestImage**N**( n = **숫자**).jpg\n    2. 사진 업로드 필요 시 request body 값 하나 이상 존재하도록 수정\n        1. body 값 빈배열로 들어가면 사진을 받아오질 못함\n5. API 테스트 알림\n    1. newman 연동 완료\n    2. slack 연동 완료\n    3. cloud 연동 > 진행예정\n\n- Parameter fuzzing > 추후\n- SQL Injections > 추후\n- Username harvesting > 추후\n- Cross-site scripting > 추후\n- CORS > 추후\n    \n\n# 정보공유\n\nHTTP 상태 코드 정리\n\n- **1xx(정보) :** 요청을 받았으며 프로세스를 계속 진행합니다.\n- **2xx(성공) :** 요청을 성공적으로 받았으며 인식했고 수용하였습니다.\n- **3xx(리다이렉션) :** 요청 완료를 위해 추가 작업 조치가 필요합니다.\n- **4xx(클라이언트 오류) :** 요청의 문법이 잘못되었거나 요청을 처리할 수 없습니다.\n- **5xx(서버 오류) :** 서버가 명백히 유효한 요청에 대한 충족을 실패했습니다.\n    \n\n[https://hongong.hanbit.co.kr/http-상태-코드-표-1xx-5xx-전체-요약-정리/](https://hongong.hanbit.co.kr/http-%EC%83%81%ED%83%9C-%EC%BD%94%EB%93%9C-%ED%91%9C-1xx-5xx-%EC%A0%84%EC%B2%B4-%EC%9A%94%EC%95%BD-%EC%A0%95%EB%A6%AC/)\n\n---\n\n1. **Body (바디)**\n    1. 바디는 웹 요청(request)에서 사용되는 부분 중 하나, 예를 들어, 만약 당신이 웹 사이트에 로그인을 시도한다면, 아이디와 비밀번호가 바디에 들어감 바디는 요청의 일부로 서버로 보내지지만, 주소창에는 나타나지 않음\n    2. 주로 POST 요청과 함께 사용되며, POST 요청은 서버로 데이터를 보낼 때 사용됨.  \n        예를 들어, 회원가입 양식을 작성하고 제출할 때 사용하며 이때 아이디, 비밀번호, 이메일 등의 정보가 바디에 담겨 서버로 전송\n2. **Query String (쿼리 문자열)**\n    1. 쿼리 문자열은 주로 URL의 끝에 위치한 데이터 조각.  \n        이 부분은 주소창에 '?' 다음에 나타나며 쿼리 문자열은 주로 요청에 대한 매개변수를 전달할 때 사용됨. 예를 들어, 당신이 웹 사이트에서 \"검색\" 기능을 사용하면, 검색어가 쿼리 문자열에 포함되며 이 정보는 서버에게 사용자가 무엇을 찾고 있는지 알려줌\n    2. 주로 GET 요청과 함께 사용.  \n        GET 요청은 서버로 데이터를 요청할 때 사용되며, 쿼리 문자열은 URL에 붙어 있어 사용자가 어떤 데이터를 요청하는지 서버에게 알려줌.  \n        예를 들어, 웹 사이트에서 특정 제품의 정보를 보고 싶을 때, URL에 제품 번호나 이름과 같은 정보가 쿼리 문자열로 들어감.\n3. **Parameter (파라미터)**\n    1. 파라미터는 일반적으로 쿼리 문자열 내부에 있는 특정 데이터 조각을 가리킴 즉, 쿼리 문자열에서 키(key)와 값(value)으로 이루어진 하나의 조각,  \n        예를 들어, \"검색어=고양이\"라는 쿼리 문자열이 있다면, \"검색어\"가 파라미터의 키이고, \"고양이\"가 해당 파라미터의 값\n    2. 파라미터는 주로 서버로 데이터를 전달할 때 사용.  \n        주로 쿼리 문자열에 들어가지만, POST 요청의 바디에도 포함될 수 있음.  \n        예를 들어, 웹 사이트에서 검색 기능을 사용할 때, 검색어를 서버에 전달할 때 파라미터를 사용함. \"검색어=고양이\"와 같이 특정한 데이터를 서버에게 보낼 때 파라미터를 사용\n\n요약\n\n바디는 주로 POST 요청에 사용되고 데이터의 전체적인 부분을 담고\n\n쿼리 문자열은 서버로 요청을 보낼 때 사용되며,\n\n파라미터는 주로 GET 요청의 쿼리 문자열 안에 들어가며, 특정한 데이터를 서버에게 전달하기 위한 목적으로 사용\n\n---\n\n# Tests 예시\n\n- 아래와 같이 맞출것.\n    \n\n``` javascript\nconst schema = {\n    'type':'object',\n    'properties':{\n        'status' : {'type': 'string'},\n        'result' : {'type': 'string'},\n        'data' : {  'type': 'array',},\n    },\n    'required': ['status', 'result', 'data'],\n}\nconst resjson = pm.response.json();\npm.test('Check server status', function () {\n   pm.expect(pm.response.code).to.be.status(200);\n});\npm.test(\"Check returned JSON\", () =>{\n    pm.response.to.be.json;\n    pm.expect(resJson).to.be.not.empty;\n    pm.expect(resJson.status).to.equals(\"210\");\n    pm.response.to.have.jsonSchema(schema);\n});\npm.test(\"Check response time\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(600); \n});\npm.test(\"Check HTTPS protocol usage\", function() {\n    pm.expect(pm.request.url).to.match(/^https:/);\n});\n\n ```"
		},
		{
			"name": "0. 공통확인",
			"item": [
				{
					"name": "로그인 fuzzing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('fuzzing server pass', function(){",
									"        pm.response.to.have.status(200);",
									"    if (pm.response.status == 400 && 500 && 404){",
									"        pm.iterationData.get('ykiho');",
									"        pm.iterationData.get('userId');",
									"        pm.iterationData.get('userPw');",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ykiho",
									"value": "{{ykiho}}",
									"type": "text"
								},
								{
									"key": "userId",
									"value": "{{userId}}",
									"type": "text"
								},
								{
									"key": "userPw",
									"value": "{{userPw}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "0. 주소 오입력 에러처리",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Check server status', function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check response time\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
									"});\r",
									"\r",
									"pm.test(\"Check HTTPS protocol usage\", function() {\r",
									"    pm.expect(pm.request.url).to.match(/^https:/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/cod",
							"host": [
								"{{domain}}"
							],
							"path": [
								"cod"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1.요양기관번호",
			"item": [
				{
					"name": "공통코드조회",
					"item": [
						{
							"name": "1.0.1 고객종류 / 0014",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"\r",
											"    pm.collectionVariables.set('PAT_GRD_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0014",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0014"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.2 내원경로 / 0016",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('VST_PTH_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0016",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0016"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.3 진료분야 / 0017",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)];\r",
											"\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('DIAG_FLD_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0017",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0017"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.4 진료구분 / 0019",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)];\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('DIAG_TP_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0019",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0019"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.5 시술구분 / 0020",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)];\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('MOPR_TP_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0020",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0020"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.6 보험구분 / 0025",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('CDMOPR', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0025",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0025"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.7 진행상태 / 0026",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('PRGR_STAT_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0026",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0026"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.8 수가구분 / 0035",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('CZ_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0035",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0035"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.9 환자상태 / 0036",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('ITEM_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0036",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0036"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.10 상품카테고리 / 0085",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('CATEGORY', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0085",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0085"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.11 동의서카테고리/ 0087",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('CTGR_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0087",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0087"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.12 팬차트카테고리 / 0089",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('PEN_CTGR_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0089",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0089"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.13 상담결과 / 0090",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)];\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('CNST_RSLT', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0090",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0090"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.14 시술대분류 / 0091",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('MOPR_LDIV_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0091",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0091"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.15 시술중분류 / 0092",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('MOPR_MDIV_CD',randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0092",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0092"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.16 상담카테고리 / 0095",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('CNST_CTGR_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0095",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0095"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.17 카드결제구분 / 0096",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('CARD_PAY_TP_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0096",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0096"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.18 기타결제구분 / 0097",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('ETC_PAY_TP_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0097",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0097"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.19 진료사진카테고리 / 0099",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('IMGAE_CATE', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0099",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0099"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.20 고객등급 / 0109",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'array', \r",
											"            'properties': {\r",
											"                'COM_CD' : {'type':'string'},\r",
											"                'BSE_CD' : {'type':'string'},\r",
											"                'BSE_CD_NM' : {'type':'string'},\r",
											"                'NEW_CD' : {'type':'string'},\r",
											"            },\r",
											"        'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.collectionVariables.set('PAT_KND_CD', randomData.BSE_CD);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/code/?code=CD0109",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0109"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: [\r",
											"    ]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "code",
											"value": "CD0016",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/code",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 값 추가 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"// pm.request.body = {\r",
											"//     mode: 'urlencoded',\r",
											"//     urlencoded: [\r",
											"//         { key: 'code', value: 'CD0016' },\r",
											"//         { key: '', value: 'CD0016' },\r",
											"//     ]\r",
											"// };"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { 'type': 'array' },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "code",
											"value": "CD0016",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/code/?code=CD0016&page=http://evilsite.com/evilcode.php",
									"host": [
										"{{domain}}"
									],
									"path": [
										"code",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "CD0016"
										},
										{
											"key": "page",
											"value": "http://evilsite.com/evilcode.php"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1.1 등록된 요양기관번호 여부 확인",
					"item": [
						{
							"name": "1.1 등록된 요양기관번호 여부 확인",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: [\r",
											"        { key: 'ykiho', value: '22222222' }\r",
											"    ]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"            \"status\": {'type':\"string\"},\r",
											"            \"result\": {'type':\"boolean\"},\r",
											"            \"message\": {'type':\"string\"}\r",
											"    },\r",
											"    \"required\":[\"status\", \"result\", \"message\"]\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(true);\r",
											"    pm.expect(resJson.message).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/check-ykiho",
									"host": [
										"{{domain}}"
									],
									"path": [
										"check-ykiho"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.1 오입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"// 요청 본문 데이터 설정\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: [\r",
											"        { key: 'ykiho', value: '01010101' }\r",
											"    ]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.expect(pm.response).to.be.not.empty;\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/check-ykiho",
									"host": [
										"{{domain}}"
									],
									"path": [
										"check-ykiho"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.2 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"// 요청 본문 데이터 설정\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: [\r",
											"        { key: 'ykiho', value: '' }\r",
											"    ]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'integer' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(400);\r",
											"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/check-ykiho",
									"host": [
										"{{domain}}"
									],
									"path": [
										"check-ykiho"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.3 파라미터 값 추가",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: [\r",
											"        { key: 'ykiho', value: '22222222' },\r",
											"        { key: 'anjwldlrj', value: '1231ㅁㅁㅁ' },\r",
											"    ]\r",
											"};\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"            \"status\": {'type':\"string\"},\r",
											"            \"result\": {'type':\"boolean\"},\r",
											"            \"message\": {'type':\"string\"}\r",
											"    },\r",
											"    \"required\":[\"status\", \"result\", \"message\"]\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(true);\r",
											"    pm.expect(resJson.message).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/check-ykiho/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"check-ykiho",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "2.로그인",
			"item": [
				{
					"name": "2.2 로그인",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    'type': 'object',",
									"    'properties': {",
									"        'status': { 'type': 'string' },",
									"        'result': { 'type': 'string' },",
									"        'access_token': { 'type': 'string'}",
									"    },",
									"    'required': ['status','result','access_token']",
									"};",
									"",
									"const resJson = pm.response.json();",
									"",
									"pm.test('Check server status', function () {",
									"    pm.expect(pm.response.code).to.be.eql(200);",
									"});",
									"",
									"pm.test(\"Check returned JSON\", () =>{",
									"    pm.response.to.be.json;",
									"    pm.expect(resJson).to.be.not.empty;",
									"    pm.expect(resJson.status).to.be.eql(\"200\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"    pm.collectionVariables.set('access_token', resJson.access_token);",
									"})",
									"",
									"pm.test(\"Check response time\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000); ",
									"});",
									"",
									"pm.test(\"Check HTTPS protocol usage\", function() {",
									"    pm.expect(pm.request.url).to.match(/^https:/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
									"\r",
									"pm.request.body = { \r",
									"    'mode' : 'urlencoded',\r",
									"    'urlencoded' : [\r",
									"        {key : 'ykiho',value: '22222222'},\r",
									"        {key : 'userId',value: pm.environment.get('userId')},\r",
									"        {key : 'userPw',value: pm.environment.get('userPw')}\r",
									"    ]\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": ""
							}
						],
						"url": {
							"raw": "{{domain}}/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2.1 미등록 요양기관번호 로그인",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Check server status', function () {",
									"    pm.expect(pm.response.code).to.be.eql(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
									"\r",
									"pm.request.body = { \r",
									"    'mode' : 'urlencoded',\r",
									"    'urlencoded' : [\r",
									"        {key : 'ykiho',value: 'ERROR'},\r",
									"        {key : 'userId',value: pm.environment.get('userId')},\r",
									"        {key : 'userPw',value: pm.environment.get('userPw')}\r",
									"    ]\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{domain}}/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2.2 미등록 계정 로그인",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Check server status', function () {",
									"    pm.expect(pm.response.code).to.be.eql(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
									"\r",
									"pm.request.body = { \r",
									"    'mode' : 'urlencoded',\r",
									"    'urlencoded' : [\r",
									"        {key : 'ykiho',value: '01532421'},\r",
									"        {key : 'userId',value:'ADMasdfsadfIN2'},\r",
									"        {key : 'userPw',value:'asd!1'}\r",
									"    ]\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{domain}}/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2.3 오입력 로그인",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    'type': 'object',",
									"    'properties': {",
									"        'status': { 'type': 'string' },",
									"        'result': { 'type': 'string' },",
									"    },",
									"    'required': ['status','result']",
									"};",
									"",
									"",
									"const resJson = pm.response.json();",
									"",
									"pm.test('Check server status', function () {",
									"    pm.expect(pm.response.code).to.be.eql(401);",
									"});",
									"",
									"pm.test(\"Check returned JSON\", () =>{",
									"    pm.response.to.be.json;",
									"    pm.expect(resJson).to.be.not.empty;",
									"    pm.expect(resJson.status).to.be.eql(\"112\");",
									"    pm.expect(resJson.result).to.be.eql(\"비밀번호가 일치하지 않습니다.\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"})",
									"",
									"pm.test(\"Check response time\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000); ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body = { \r",
									"    'mode' : 'urlencoded',\r",
									"    'urlencoded' : [\r",
									"        {key : 'ykiho',value: '22222222'},\r",
									"        {key : 'userId',value:'ADMIN'},\r",
									"        {key : 'userPw',value:'xmfkdldjq21!1'}\r",
									"    ]\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{domain}}/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2.4 미입력 로그인",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = { ",
									"    'type':'object',",
									"    'properties' : { ",
									"       'status' : {'type': 'integer'},",
									"       'result' : {'type' : 'string'},",
									"    },",
									"    'required' : ['status','result']",
									"};",
									"",
									"const resJson = pm.response.json();",
									"",
									"pm.test('Check server status', function () {",
									"    pm.expect(pm.response.code).to.be.eql(200);",
									"});",
									"",
									"pm.test(\"Check returned JSON\", () =>{",
									"    pm.response.to.be.json;",
									"    pm.expect(resJson).to.be.not.empty;",
									"    pm.expect(resJson.status).to.be.eql(400);",
									"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"})",
									"",
									"pm.test(\"Check response time\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000); ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.request.body = { \r",
									"    'mode' : 'urlencoded',\r",
									"    'urlencoded' : [\r",
									"        {key : 'ykiho',value: ''},\r",
									"        {key : 'userId',value:'ADMI2N'},\r",
									"        {key : 'userPw',value:'xmfkdldjq1!1'}\r",
									"    ]\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{domain}}/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2.5 권한미보유 사용자 로그인",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    'type': 'object',",
									"    'properties': {",
									"        'status': { 'type': 'string' },",
									"        'result': { 'type': 'string' },",
									"        'access_token': { 'type': 'string'}",
									"    },",
									"    'required': ['status','result','access_token']",
									"};",
									"",
									"const resJson = pm.response.json();",
									"",
									"pm.test('Check server status', function () {",
									"    pm.expect(pm.response.code).to.be.eql(200);",
									"});",
									"",
									"pm.test(\"Check returned JSON\", () =>{",
									"    pm.response.to.be.json;",
									"    pm.expect(resJson).to.be.not.empty;",
									"    pm.expect(resJson.status).to.be.eql(\"200\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"    pm.environment.set('not_access_token', resJson.access_token);",
									"})",
									"",
									"pm.test(\"Check response time\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000); ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
									"\r",
									"pm.request.body = { \r",
									"    'mode' : 'urlencoded',\r",
									"    'urlencoded' : [\r",
									"        {key : 'ykiho',value: '22222222'},\r",
									"        {key : 'userId',value: pm.environment.get('accUserId')},\r",
									"        {key : 'userPw',value: pm.environment.get('accUserPw')}\r",
									"    ]\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": ""
							}
						],
						"url": {
							"raw": "{{domain}}/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2.6 초기화 비밀번호 확인",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    'type': 'object',",
									"    'properties': {",
									"        'status': { 'type': 'string' },",
									"        'result': { 'type': 'string' },",
									"    },",
									"    'required': ['status','result']",
									"};",
									"",
									"const resJson = pm.response.json();",
									"",
									"pm.test('Check server status', function () {",
									"    pm.expect(pm.response.code).to.be.eql(401);",
									"});",
									"",
									"pm.test(\"Check returned JSON\", () =>{",
									"    pm.response.to.be.json;",
									"    pm.expect(resJson).to.be.not.empty;",
									"    pm.expect(resJson.status).to.be.eql(\"110\");",
									"    pm.expect(resJson.result).to.be.eql(\"초기화된 비밀번호입니다. 비밀번호를 변경해주세요.\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"})",
									"",
									"pm.test(\"Check response time\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
									"\r",
									"pm.request.body = { \r",
									"    'mode' : 'urlencoded',\r",
									"    'urlencoded' : [\r",
									"        {key : 'ykiho',value: '22222222'},\r",
									"        {key : 'userId',value: pm.environment.get('resetUserId')},\r",
									"        {key : 'userPw',value: pm.environment.get('resetUserPw')},\r",
									"    ]\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": ""
							}
						],
						"url": {
							"raw": "{{domain}}/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2.7 사용중지 계정 로그인",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    'type': 'object',",
									"    'properties': {",
									"        'status': { 'type': 'string' },",
									"        'result': { 'type': 'string' },",
									"    },",
									"    'required': ['status','result']",
									"};",
									"",
									"const resJson = pm.response.json();",
									"",
									"pm.test('Check server status', function () {",
									"    pm.expect(pm.response.code).to.be.eql(401);",
									"});",
									"",
									"pm.test(\"Check returned JSON\", () =>{",
									"    pm.response.to.be.json;",
									"    pm.expect(resJson).to.be.not.empty;",
									"    pm.expect(resJson.status).to.be.eql(\"112\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"})",
									"",
									"pm.test(\"Check response time\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
									"\r",
									"pm.request.body = { \r",
									"    'mode' : 'urlencoded',\r",
									"    'urlencoded' : [\r",
									"        {key : 'ykiho',value: '22222222'},\r",
									"        {key : 'userId',value: pm.environment.get('stopUsingUserId')},\r",
									"        {key : 'userPw',value: pm.environment.get('stopUsingUserPw')},\r",
									"    ]\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": ""
							}
						],
						"url": {
							"raw": "{{domain}}/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3.환자 접수",
			"item": [
				{
					"name": "3.1 이름/핸드폰번호로 내원여부 확인",
					"item": [
						{
							"name": "3.1 이름/핸드폰번호로 내원여부 확인",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key:'patNm', value:'김지헌'},\r",
											"        {key:'mobile', value:'01074417631'},\r",
											"    ]\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'properties': {\r",
											"                'PAT_NO': {'type':'string'},\r",
											"                'PAT_NM': {'type':'string'},\r",
											"                'MOBILE_NO': {'type':'string'},\r",
											"                'PAT_JNO': {'type':'string'},\r",
											"                'ADDR': {'type':['string','null']},\r",
											"                'VST_PTH_CD': {'type':['string','null']},\r",
											"                'CODE': {'type':'integer'},\r",
											"            },\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set('PAT_JNO',resJson.data.PAT_JNO);\r",
											"    pm.collectionVariables.set('ADDR',resJson.data.ADDR);\r",
											"    pm.collectionVariables.set('PAT_NO',resJson.data.PAT_NO);\r",
											"    pm.collectionVariables.set('PAT_NM',resJson.data.PAT_NM);\r",
											"    pm.collectionVariables.set('MOBILE_NO',resJson.data.MOBILE_NO);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.expect(resJson.data.PAT_JNO).to.match(/^\\d{6}-\\d{1}$/);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/phone",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"phone"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1.1 오입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body ={\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key:'patNm', value:'김지'},\r",
											"        {key:'mobile', value:'01074631'},\r",
											"    ]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { 'type': 'null', },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Body status', function () {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"210\");\r",
											"    pm.expect(resJson.result).to.equals(\"데이터 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"time check\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/phone",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"phone"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1.2 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body ={\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"    {key : 'patNm', value:''},\r",
											"    {key : 'mobile', value:''},]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"400\");\r",
											"    pm.expect(resJson.result).to.equals(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/phone",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"phone"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1.3 휴대폰번호 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body ={\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"    {key : 'patNm', value:'김지헌'},\r",
											"    {key : 'mobile', value:''},]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"400\");\r",
											"    pm.expect(resJson.result).to.equals(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/phone",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"phone"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1.4 이름 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body ={\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"    {key : 'patNm', value:''},\r",
											"    {key : 'mobile', value:'01074417631'},]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"400\");\r",
											"    pm.expect(resJson.result).to.equals(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/phone",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"phone"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1.5 변조토큰 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body ={\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key:'patNm', value:'김지헌'},\r",
											"        {key:'mobile', value:'01074417631'},\r",
											"    ]\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/phone",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"phone"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1.6 권한 미보유 사용자",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key:'patNm', value:'김지헌'},\r",
											"        {key:'mobile', value:'01074417631'},\r",
											"    ]\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'properties': {\r",
											"                'PAT_NO': {'type':'string'},\r",
											"                'PAT_NM': {'type':'string'},\r",
											"                'MOBILE_NO': {'type':'string'},\r",
											"                'PAT_JNO': {'type':'string'},\r",
											"                'ADDR': {'type':['string','null']},\r",
											"                'VST_PTH_CD': {'type':['string','null']},\r",
											"                'CODE': {'type':'integer'},\r",
											"            },\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set('PAT_JNO',resJson.data.PAT_JNO);\r",
											"    pm.collectionVariables.set('ADDR',resJson.data.ADDR);\r",
											"    pm.collectionVariables.set('PAT_NO',resJson.data.PAT_NO);\r",
											"    pm.collectionVariables.set('PAT_NM',resJson.data.PAT_NM);\r",
											"    pm.collectionVariables.set('MOBILE_NO',resJson.data.MOBILE_NO);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.expect(resJson.data.PAT_JNO).to.match(/^\\d{6}-\\d{1}$/);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{not_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/phone",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"phone"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3.2 이름/주민번호로 내원 여부 확인",
					"item": [
						{
							"name": "3.2 이름/주민번호로 내원 여부 확인",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body ={\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"    {key : 'patNm', value: pm.collectionVariables.get('PAT_NM')},\r",
											"    {key : 'jNo', value: pm.collectionVariables.get('PAT_JNO')},]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': {'type': 'string'},\r",
											"        'result': {'type': 'string'},\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"            'properties':{\r",
											"                'PAT_NO': {'type': 'string'},\r",
											"                'PAT_NM': {'type': 'string'},\r",
											"                'MOBILE_NO': {'type': 'string'},\r",
											"            },\r",
											"            'required': ['PAT_NO','PAT_NM','MOBILE_NO']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/jno",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"jno"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.1 오입력 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { 'type': 'array' },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"210\");\r",
											"    pm.expect(resJson.result).to.equals(\"데이터 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body ={\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key : 'patNm', value: 'asdasd'},\r",
											"        {key : 'jNo', value: pm.collectionVariables.get(\"PAT_JNO\")}\r",
											"    ]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/jno",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"jno"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.2 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body ={\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key : 'patNm', value: ''},\r",
											"        {key : 'jNo', value: ''}\r",
											"    ]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"400\");\r",
											"    pm.expect(resJson.result).to.equals(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/jno",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"jno"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.3 주민번호 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body ={\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key : 'patNm', value: pm.collectionVariables.get('PAT_NM')},\r",
											"        {key : 'jNo', value: ''}\r",
											"    ]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"400\");\r",
											"    pm.expect(resJson.result).to.equals(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/jno",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"jno"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.4 이름 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body ={\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key : 'patNm', value: pm.collectionVariables.get('PAT_NM')},\r",
											"        {key : 'jNo', value: pm.collectionVariables.get(\"PAT_JNO\")}\r",
											"    ]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/jno",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"jno"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.5 변조토큰 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body ={\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"    {key : 'patNm', value: pm.collectionVariables.get('PAT_NM')},\r",
											"    {key : 'jNo', value: pm.collectionVariables.get('PAT_JNO')},]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': {'type': 'string'},\r",
											"        'result': {'type': 'string'},\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"            'properties':{\r",
											"                'PAT_NO': {'type': 'string'},\r",
											"                'PAT_NM': {'type': 'string'},\r",
											"                'MOBILE_NO': {'type': 'string'},\r",
											"            },\r",
											"            'required': ['PAT_NO','PAT_NM','MOBILE_NO']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/jno",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"jno"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3.6 핸드폰 번호로 환자 검색",
					"item": [
						{
							"name": "3.6 핸드폰 번호로 환자 검색",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'urlencoded',\r",
											"    urlencoded : [\r",
											"        {key:'patNm', value:pm.collectionVariables.get('PAT_NM')}, \r",
											"        {key:'search', value:pm.collectionVariables.get('MOBILE_NO')}\r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': {'type':'string'},\r",
											"        'result': {'type':'string'},\r",
											"        'data': {\r",
											"            'type':'array',\r",
											"            'properties':{\r",
											"                'PAT_NO': {'type': 'string'},\r",
											"                'PAT_NM': {'type': 'string'},\r",
											"                'PAT_BTH': {'type': 'string'},\r",
											"                'MOBILE_NO': {'type': 'string'},\r",
											"            },\r",
											"            'required': ['PAT_NO', 'PAT_NM', 'PAT_BTH', 'MOBILE_NO']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status', 'result', 'data']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/search",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6.1 오입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'urlencoded',\r",
											"    urlencoded : [\r",
											"        {key:'patNm', value:'PAT_NM'}, \r",
											"        {key:'search', value:'MOBILE_NO'}\r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { 'type': 'array' },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"210\");\r",
											"    pm.expect(resJson.result).to.equals(\"데이터 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/search",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6.2  날짜 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'urlencoded',\r",
											"    urlencoded : [\r",
											"        {key:'patNm', value:pm.collectionVariables.get('PAT_NM')}, \r",
											"        {key:'search', value:''}\r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"400\");\r",
											"    pm.expect(resJson.result).to.equals(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/search",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6.3 이름 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'urlencoded',\r",
											"    urlencoded : [\r",
											"        {key:'patNm', value:''}, \r",
											"        {key:'search', value:pm.collectionVariables.get('MOBILE_NO')}\r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"400\");\r",
											"    pm.expect(resJson.result).to.equals(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/search",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6.4 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'urlencoded',\r",
											"    urlencoded : [\r",
											"        {key:'patNm', value:''}, \r",
											"        {key:'search', value:''}\r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"400\");\r",
											"    pm.expect(resJson.result).to.equals(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/search",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6.5 변조토큰 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'urlencoded',\r",
											"    urlencoded : [\r",
											"        {key:'patNm', value:pm.collectionVariables.get('PAT_NM')}, \r",
											"        {key:'search', value:pm.collectionVariables.get('MOBILE_NO')}\r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/search",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"search"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3.7 환자 정보 조회",
					"item": [
						{
							"name": "3.7 환자 정보 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const propertiesData = Object.keys(resJson.data);\r",
											"\r",
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status' : {'type': 'string'},\r",
											"        'result' : {'type': 'string'},\r",
											"        'data' : {  \r",
											"            'type': 'object',\r",
											"            'properties': Object.fromEntries(propertiesData.map(prop => [\r",
											"                            prop, { 'type': ['string','null']}\r",
											"                        ])),\r",
											"            'required': propertiesData,\r",
											"        },\r",
											"    },\r",
											"    'required': ['status', 'result', 'data'],\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"200\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7.1 오입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status' : {'type': 'string'},\r",
											"        'result' : {'type': 'string'},\r",
											"        'data' : {  'type': 'array',},\r",
											"    },\r",
											"    'required': ['status', 'result', 'data'],\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"210\");\r",
											"    pm.expect(resJson.result).to.equals(\"데이터 없음\");\r",
											"})\r",
											"\r",
											"pm.test(\"JSON schema validation\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/659799",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"659799"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7.2 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7.3 변조토큰 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3.8 개인정보 동의 내용 조회",
					"item": [
						{
							"name": "3.8 개인정보 동의 내용 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': {'type': 'string'},\r",
											"        'result': {'type': 'string'},\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'properties':{\r",
											"                'PRIVACY_STRING': {'type': 'string'},\r",
											"            },\r",
											"            'required': ['PRIVACY_STRING']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/privacy",
									"host": [
										"{{domain}}"
									],
									"path": [
										"privacy"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.8 변조토큰 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/privacy",
									"host": [
										"{{domain}}"
									],
									"path": [
										"privacy"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3.5 접수",
					"item": [
						{
							"name": "3.5 접수",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'urlencoded',\r",
											"    urlencoded : [\r",
											"        {key:'patNm', value: pm.collectionVariables.get('PAT_NM')}, \r",
											"        {key:'mobile', value: pm.collectionVariables.get('MOBILE_NO')}\r",
											"    ]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': {'type':'string'},\r",
											"        'result': {'type':'string'},\r",
											"    },\r",
											"    'required': ['status', 'result']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/ptnt/receipt/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"receipt",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5.1 모든값 접수",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'urlencoded',\r",
											"    urlencoded : [\r",
											"        {key:'patNo', value: pm.collectionVariables.get('PAT_NO')}, \r",
											"        {key:'patNm', value: pm.collectionVariables.get('PAT_NM')}, \r",
											"        {key:'jNo', value: pm.collectionVariables.get('PAT_JNO')}, \r",
											"        {key:'diagFldCd', value: 'CD0017'},\r",
											"        {key:'mobile', value: pm.collectionVariables.get('MOBILE_NO')},\r",
											"        {key:'addr', value: pm.collectionVariables.get('ADDR')},\r",
											"        {key:'vstPthCd', value: 'CD0016'},\r",
											"        {key:'smsYn', value: '1'},\r",
											"        {key:'adSmsYn', value: '1'},\r",
											"        {key:'prsnYn', value: '1'},\r",
											"    ]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': {'type':'string'},\r",
											"        'result': {'type':'string'},\r",
											"    },\r",
											"    'required': ['status', 'result']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function() {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/ptnt/receipt/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"receipt",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5.2 미입력 접수",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'urlencoded',\r",
											"    urlencoded : [\r",
											"        {key:'patNo', value: pm.collectionVariables.get('PAT_NOㅁㄴㅇ')}, \r",
											"        {key:'patNm', value: ''}, \r",
											"        {key:'jNo', value: pm.collectionVariables.get('PAT_JNO')}, \r",
											"        {key:'diagFldCd', value: ''},\r",
											"        {key:'mobile', value: ''},\r",
											"        {key:'addr', value: pm.collectionVariables.get('ADDR')},\r",
											"        {key:'vstPthCd', value: 'CD0016'},\r",
											"        {key:'smsYn', value: '0'},\r",
											"        {key:'adSmsYn', value: '0'},\r",
											"        {key:'prsnYn', value: '0'},\r",
											"    ]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': {'type':'string'},\r",
											"        'result': {'type':'string'},\r",
											"    },\r",
											"    'required': ['status', 'result']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function() {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/ptnt/receipt/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"receipt",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5.3 오입력 접수 / 확인필요",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'urlencoded',\r",
											"    urlencoded : [\r",
											"        {key:'patNm', value: '김지헌'}, \r",
											"        {key:'mobile', value: '12312312132'},\r",
											"    ]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': {'type':'string'},\r",
											"        'result': {'type':'string'},\r",
											"        'data': {'type':'array'},\r",
											"    },\r",
											"    'required': ['status', 'result', 'data']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"500\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"데이터 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function() {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/ptnt/receipt/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"receipt",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5.4 변조토큰 접수",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'urlencoded',\r",
											"    urlencoded : [\r",
											"        {key:'patNm', value: pm.collectionVariables.get('PAT_NM')}, \r",
											"        {key:'mobile', value: pm.collectionVariables.get('MOBILE_NO')}\r",
											"    ]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/ptnt/receipt/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"receipt",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "4.대시보드",
			"item": [
				{
					"name": "4.1 해당 날짜 환자 리스트 조회",
					"item": [
						{
							"name": "4.1 해당 날짜 환자 리스트 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const schemaArrayList = Object.keys(resJson.data);\r",
											"const schemaProperties = [];\r",
											"for(val of schemaArrayList){\r",
											"    if(resJson.data[val].length > 0){\r",
											"        schemaProperties.push(Object.keys(resJson.data[val][0]));\r",
											"        break;\r",
											"    }\r",
											"}\r",
											"\r",
											"let schema = {};\r",
											"let notEmpty =false;\r",
											"\r",
											"schemaArrayList.map(prop=> {\r",
											"    if(resJson.data[prop].length > 0) {\r",
											"        notEmpty = true;\r",
											"    }\r",
											"});\r",
											"\r",
											"if(notEmpty){\r",
											"    schema = {\r",
											"        'type': 'object',\r",
											"        'properties': {\r",
											"            'status': { 'type': 'string' },\r",
											"            'result': { 'type': 'string' },\r",
											"            'data': {\r",
											"                'type': 'object',\r",
											"                'properties': Object.fromEntries(schemaArrayList.map(val => [\r",
											"                    val,{\r",
											"                        'type': 'array',\r",
											"                        'items': {\r",
											"                            'type': 'object',\r",
											"                            'minProperties': 1,\r",
											"                            'properties': \r",
											"                                Object.fromEntries(schemaProperties[0].map(prop => [\r",
											"                                prop, { 'type': ['string','null'] },\r",
											"                            ])),\r",
											"                            },\r",
											"                        'required': schemaProperties.length > 0 ? schemaProperties[0] : []\r",
											"                        },\r",
											"                    ])),\r",
											"                'required': ['A','F','B','CD','J']\r",
											"                },\r",
											"        },\r",
											"            'required': ['status','result','data']\r",
											"    };\r",
											"} else {\r",
											"    schema = {\r",
											"        'type': 'object',\r",
											"        'properties': {\r",
											"            'status': { 'type': 'string' },\r",
											"            'result': { 'type': 'string' },\r",
											"            'data': {\r",
											"                'type': 'object',\r",
											"                'properties': {\r",
											"                    'A': { 'type': 'array', 'items': { 'type': 'object' } },\r",
											"                    'F': { 'type': 'array', 'items': { 'type': 'object' } },\r",
											"                    'B': { 'type': 'array', 'items': { 'type': 'object' } },\r",
											"                    'CD': { 'type': 'array', 'items': { 'type': 'object' } },\r",
											"                    'J': { 'type': 'array', 'items': { 'type': 'object' } }\r",
											"                },\r",
											"                'required': schemaArrayList\r",
											"            }\r",
											"        },\r",
											"        'required': ['status', 'result', 'data']\r",
											"    };\r",
											"}\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON ${val}`, () => {\r",
											"        pm.response.to.be.json;\r",
											"        pm.expect(resJson).to.be.not.empty;\r",
											"        pm.expect(resJson.status).to.have.equal(\"200\");\r",
											"        pm.expect(resJson.result).to.have.equal(\"성공\");\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"        for (item of resJson.data[val]) {\r",
											"            pm.expect(item.PAT_JNO).to.be.a('string');\r",
											"            pm.expect(item.PAT_JNO === undefined || item.PAT_JNO.length === 0 || item.PAT_JNO.length === 24).to.be.true;\r",
											"        }\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.url.query.add(\r",
											"    {key : 'searchDay', value: '20240424'},\r",
											")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/list",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.1 미입력 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"400\");\r",
											"    pm.expect(resJson.result).to.equals(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.url.query.add(\r",
											"    {key : 'searchDay', value: ''},\r",
											")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/list",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.2 오입력 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'properties': {\r",
											"                'A': { 'type': 'array', 'items': { 'type': 'object' } },\r",
											"                'F': { 'type': 'array', 'items': { 'type': 'object' } },\r",
											"                'B': { 'type': 'array', 'items': { 'type': 'object' } },\r",
											"                'CD': { 'type': 'array', 'items': { 'type': 'object' } },\r",
											"                'J': { 'type': 'array', 'items': { 'type': 'object' } }\r",
											"            },\r",
											"            'required': ['A', 'F', 'B', 'CD', 'J']\r",
											"        }\r",
											"    },\r",
											"    'required': ['status', 'result', 'data']\r",
											"};\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"200\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.url.query.add(\r",
											"    {key : 'searchDay', value: 'ㅁㄴㅇ'},\r",
											")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/list",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.3 변조 토큰",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.url.query.add(\r",
											"    {key : 'searchDay', value: '20240408'},\r",
											")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/list",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"list"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.2 현황판 공지사항",
					"item": [
						{
							"name": "4.2 현황판 공지사항 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const userSchema = [];\r",
											"if(resJson.data.length > 0) {\r",
											"    userSchema.push(Object.keys(resJson.data[0]).map(val => val))\r",
											"} \r",
											"\r",
											"let schema = {}\r",
											"if(resJson.data.length > 0){ \r",
											"    schema = {\r",
											"        'type': 'object',\r",
											"        'properties': {\r",
											"            'status': { 'type': 'string' },\r",
											"            'result': { 'type': 'string' },\r",
											"            'data': {\r",
											"                'type': 'array',\r",
											"                'minItems': 1,\r",
											"                'properties': Object.fromEntries(userSchema.map(prop => [\r",
											"                    prop, { 'type': ['string']}\r",
											"                ])),\r",
											"            'required': userSchema[0]\r",
											"            },\r",
											"        },\r",
											"        'required':['status','result','data'],\r",
											"    };\r",
											"} else {\r",
											"    schema = {\r",
											"        'type': 'object',\r",
											"        'properties': {\r",
											"            'status': { 'type': 'string' },\r",
											"            'result': { 'type': 'string' },\r",
											"            'data': {'type': 'array'},\r",
											"        },\r",
											"        'required':['status','result','data'],\r",
											"    };\r",
											"}\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    if(resJson.data.length  > 0){\r",
											"        pm.expect(resJson.status).to.have.equal(\"200\");\r",
											"        pm.expect(resJson.result).to.have.equal(\"성공\");\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"    } else {\r",
											"        pm.expect(resJson.status).to.have.equal(\"210\");\r",
											"        pm.expect(resJson.result).to.have.equal(\"\");\r",
											"        pm.response.to.have.jsonSchema(noDataSchema);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.url.query.add(\r",
											"    {key : 'searchDay', value: '20240425'},\r",
											")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/notice",
									"host": [
										"{{domain}}"
									],
									"path": [
										"notice"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.2.1 미입력 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"400\");\r",
											"    pm.expect(resJson.result).to.equals(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/notice",
									"host": [
										"{{domain}}"
									],
									"path": [
										"notice"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.2.2 오입력 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"        }\r",
											"    },\r",
											"    'required': ['status', 'result', 'data']\r",
											"};\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"210\");\r",
											"    pm.expect(resJson.result).to.equals(\"데이터 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"pm.request.url.query.add({key: 'searchDay', value: 'ㅁㄴㅇㅁㄴㅇㅁㄴㅇ'})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/notice",
									"host": [
										"{{domain}}"
									],
									"path": [
										"notice"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.2.3 변조 토큰",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.url.query.add(\r",
											"    {key : 'searchDay', value: '20240425'},\r",
											")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/notice",
									"host": [
										"{{domain}}"
									],
									"path": [
										"notice"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.3 담당의 정보 조회",
					"item": [
						{
							"name": "4.3 담당의 정보 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const returnList = resJson.data;\r",
											"\r",
											"const schemaProperties = [\r",
											"    \"USER_ID, USER_NM\"\r",
											"];\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"            'minItems': 1,\r",
											"                'properties': Object.fromEntries(returnList.map(prop => [\r",
											"                    prop, { 'type': ['string']}\r",
											"                ])),\r",
											"            'required': schemaProperties\r",
											"        },\r",
											"    },\r",
											"    'required':['status','result','data'],\r",
											"};\r",
											"\r",
											"\r",
											"pm.test('Check server status', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    const userList = returnList[Math.floor(Math.random() * returnList.length)];\r",
											"    if(userList.length > 0 || userList === null || userList === undefined){\r",
											"        pm.collectionVariables.set(\"USER_ID\", userList.USER_ID)\r",
											"        pm.collectionVariables.set(\"USER_NAME\", userList.USER_NM)\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/doctor",
									"host": [
										"{{domain}}"
									],
									"path": [
										"doctor"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.3.1 변조 토큰",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/doctor",
									"host": [
										"{{domain}}"
									],
									"path": [
										"doctor"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.4 환자 상세 정보 조희",
					"item": [
						{
							"name": "4.4 환자 상세 정보 조희",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const userData = Object.keys(resJson.data).map(val => val);\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'minItems': 1,\r",
											"            'properties': Object.fromEntries(userData.map(val => [\r",
											"                val, { 'type': ['string','null']}\r",
											"            ])),\r",
											"        'required': userData\r",
											"        },\r",
											"    },\r",
											"    'required':['status','result','data'],\r",
											"};\r",
											"\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.equal(\"200\");\r",
											"    pm.expect(resJson.result).to.have.equal(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/detail/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"detail",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.4.1 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/detail/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"detail",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "4.4.2 오입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"210\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"데이터 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/detail/121",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"detail",
										"121"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.4.2 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/detail/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"detail",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.5 환자 예약내역 조회",
					"item": [
						{
							"name": "4.5 환자 예약내역 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"\r",
											"const userSchema = resJson.data[0].length > 0 ? Object.keys(resJson.data[0]).map(val => val) : [];\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': {'type': 'string'},\r",
											"        'result': {'type': 'string'},\r",
											"        'data': {\r",
											"            'type': 'array', \r",
											"            'minItems': 1,\r",
											"            'items': {\r",
											"                'type': 'object',\r",
											"                'properties': Object.fromEntries(userSchema.map(val => [val, {'type': ['string','null']}])),\r",
											"                'required': userSchema\r",
											"            },\r",
											"        }\r",
											"    },\r",
											"    'required': ['status', 'result', 'data']\r",
											"};\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.equal(\"200\");\r",
											"    pm.expect(resJson.result).to.have.equal(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/rsvn/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rsvn",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.5.1 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/rsvn/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rsvn",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "4.5.2 오입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': {'type': 'array'}\r",
											"    },\r",
											"    'required': ['status','result', 'data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"210\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"데이터 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/rsvn/12311",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rsvn",
										"12311"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.5.3 변조 토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/rsvn/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rsvn",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.6 환자 정보 상세",
					"item": [
						{
							"name": "4.6 환자 정보 상세",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const returnList = resJson.data;\r",
											"const schemaProperties = Object.keys(returnList);\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'minItems': 1,\r",
											"            'properties': Object.fromEntries(schemaProperties.map(prop => [\r",
											"                            prop, { 'type': ['string', 'null']}\r",
											"                        ])),\r",
											"            'required': schemaProperties\r",
											"        },\r",
											"    },\r",
											"    'required':['status','result','data'],\r",
											"};\r",
											"\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.data.PAT_JNO2).to.match(/^\\d{6}-\\d{1}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/rsvn/ptnt/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rsvn",
										"ptnt",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.6.1 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/rsvn/ptnt/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rsvn",
										"ptnt",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "4.6.2 오입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': {'type': 'array'}\r",
											"    },\r",
											"    'required': ['status','result', 'data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"210\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"데이터 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/rsvn/ptnt/1231111",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rsvn",
										"ptnt",
										"1231111"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.6.3 변조 토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/rsvn/ptnt/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rsvn",
										"ptnt",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.7 환자 정보 상세 업데이트",
					"item": [
						{
							"name": "4.7 환자 정보 상세 업데이트",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'urlencoded',\r",
											"    urlencoded :[\r",
											"        {key : 'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
											"        {key : 'patNm', value: pm.collectionVariables.get('PAT_NM')},\r",
											"        {key : 'jNo', value: pm.collectionVariables.get('PAT_JNO')},\r",
											"        {key : 'mobile', value: pm.collectionVariables.get('MOBILE_NO')},\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'status' : {'type': 'string'},\r",
											"    'result' : {'type': 'string'},\r",
											"    'required': ['status', 'result']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/rsvn/ptnt/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rsvn",
										"ptnt",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "4.7.1 모든값 입력",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'urlencoded',\r",
											"    urlencoded :[\r",
											"        {key : 'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
											"        {key : 'patNm', value: pm.collectionVariables.get('PAT_NM')},\r",
											"        {key : 'jNo', value: pm.collectionVariables.get('PAT_JNO')},\r",
											"        {key : 'mobile', value: pm.collectionVariables.get('MOBILE_NO')},\r",
											"        {key : 'addr', value: '서울특별시 강남구 111'},\r",
											"        {key : 'dtlAddr', value: '테스트 주소'},\r",
											"        {key : 'telNo', value: pm.collectionVariables.get('MOBILE_NO')},\r",
											"        {key : 'frgnYn', value: '0'},\r",
											"        {key : 'referee', value: 'test'},\r",
											"        {key : 'vstPthCd', value: pm.collectionVariables.get('VST_PTH_CD')},\r",
											"        {key : 'psprNo', value: '123456'},\r",
											"        {key : 'smsYn', value: '1'},\r",
											"        {key : 'adSmsYn', value: '1'},\r",
											"        {key : 'prsnYn', value: '1'},\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'status' : {'type': 'string'},\r",
											"    'result' : {'type': 'string'},\r",
											"    'required': ['status', 'result']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/rsvn/ptnt/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rsvn",
										"ptnt",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "4.7.2 미입력 업데이트",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'status' : {'type': 'string'},\r",
											"    'result' : {'type': 'string'},\r",
											"    'required': ['status', 'result']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json()\r",
											"1\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/rsvn/ptnt/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rsvn",
										"ptnt",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "4.7.3 오입력 업데이트",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'urlencoded',\r",
											"    urlencoded :[\r",
											"        {key : 'patNo', value: 'ERROR'},\r",
											"        {key : 'patNm', value: 'ERROR'},\r",
											"        {key : 'jNo', value: 'error'},\r",
											"        {key : 'mobile', value:'error'},\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/rsvn/ptnt/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rsvn",
										"ptnt",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "4.7.4 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"const userData = {\r",
											"    'patNo': pm.collectionVariables.get('PAT_NO'),\r",
											"    'patNm': pm.collectionVariables.get('PAT_NM'),\r",
											"    'jNo': pm.collectionVariables.get('PAT_JNO'),\r",
											"    'mobile': pm.collectionVariables.get('MOBILE_NO'),\r",
											"    'addr':'강남구 역삼동 651-5번지',\r",
											"    'dtlAddr': 'asdasdasdasdasd',\r",
											"    'telNo': '010-1234-1234',\r",
											"    'frgnYn':'내국인',\r",
											"    'referee':'test Datasdaaaaaaaa',\r",
											"}\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: Object.entries(userData).map(([key, value]) => ({ key, value }))\r",
											"};\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/rsvn/ptnt/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rsvn",
										"ptnt",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.8 진료일자 별 환자 차트 조회",
					"item": [
						{
							"name": "4.8 진료일자 별 환자 차트 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const resData = resJson.data;\r",
											"const userSchema = Object.keys(resData);\r",
											"let schema = {}\r",
											"\r",
											"if(resData.date.length > 0 || resData.sick.length > 0 || resData.prsc.length > 0){\r",
											"    schema = {\r",
											"        'type': 'object',\r",
											"        'properties': {\r",
											"            'status': { 'type': 'string' },\r",
											"            'result': { 'type': 'string' },\r",
											"            'data': {\r",
											"                'minItems': 1,\r",
											"                'type': 'object',\r",
											"                'properties': \r",
											"                Object.fromEntries(userSchema.map(key => [\r",
											"                    key, { \r",
											"                        'type': ['array'],\r",
											"                        'items': {\r",
											"                        'type': 'object',\r",
											"                            'properties': Object.fromEntries(Object.keys(resData[key][0] \r",
											"                                ? resData[key][0] \r",
											"                                : {}).map(val => \r",
											"                                [val, {'type': ['string', 'null']}]))\r",
											"                        },\r",
											"                        'required': Object.keys(resData[key][0] ? resData[key][0] : {})\r",
											"                    },\r",
											"                ])),\r",
											"                'required': userSchema\r",
											"            },\r",
											"        },\r",
											"        'required': ['status', 'result', 'data'],\r",
											"    };\r",
											"} else {\r",
											"    schema = {\r",
											"        'status' : {'type': 'string'},\r",
											"        'result' : {'type': 'string'},\r",
											"        'data' : {\r",
											"            'type': 'object',\r",
											"            'properties' : {\r",
											"                'date ': { 'type': 'array', 'items': { 'type': 'object' }},\r",
											"                'sick ': { 'type': 'array', 'items': { 'type': 'object' }},\r",
											"                'prsc ': { 'type': 'array', 'items': { 'type': 'object' }},\r",
											"            },\r",
											"        },\r",
											"    'required' : ['status','result','data']\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    let newArray = [];\r",
											"    const resDate = resData.date;\r",
											"    const resSick = resData.sick;\r",
											"    const resPrsc = resData.prsc;\r",
											"    resDate.map((porp)=> { newArray.push(porp.VIST_SN); });\r",
											"    resSick.map((porp)=> { newArray.push(porp.VIST_SN); });\r",
											"    resPrsc.map((porp)=> { newArray.push(porp.VIST_SN); });\r",
											"\r",
											"    newArray = [...new Set(newArray)];\r",
											"    const randomValue = newArray[Math.floor(Math.random() * newArray.length)];\r",
											"    pm.collectionVariables.set('VIST_SN', randomValue);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/chart/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"chart",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.8.1 오입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const userSchema = resJson.data.length > 0 ? Object.keys(resJson.data[0]).map(val => val) : [];\r",
											"const schema = {\r",
											"    'status' : {'type': 'string'},\r",
											"    'result' : {'type': 'string'},\r",
											"    'data' : {\r",
											"        'type': 'object',\r",
											"        'properties' : {\r",
											"            'date ': { 'type': 'array', 'items': { 'type': 'object' }},\r",
											"            'sick ': { 'type': 'array', 'items': { 'type': 'object' }},\r",
											"            'prsc ': { 'type': 'array', 'items': { 'type': 'object' }},\r",
											"        },\r",
											"    },\r",
											"    'required' : ['status','result','data']\r",
											"}\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/chart/23111",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"chart",
										"23111"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.8.2 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/chart/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"chart",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "4.8.3 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/chart/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"chart",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.9 진료 메모 조회",
					"item": [
						{
							"name": "4.9 진료 메모 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"                    'items': {\r",
											"                       'type': 'object',\r",
											"                        'properties': {\r",
											"                            'MEDICALRECORD' :{'type': 'string'},\r",
											"                            'DIAG_DD' :{'type': 'string'},\r",
											"                        },\r",
											"                    },\r",
											"                    'required': ['MEDICALRECORD','DIAG_DD']\r",
											"                },\r",
											"    },\r",
											"    'required': ['status', 'result', 'data'],\r",
											"};\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/ptnt/memo/{{PAT_NO}}/?vistSn=00064",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"memo",
										"{{PAT_NO}}",
										""
									],
									"query": [
										{
											"key": "vistSn",
											"value": "00064"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4.9.1 오입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"            'items': {\r",
											"                'type': 'object',\r",
											"                'properties': {\r",
											"                    'MEDICALRECORD': { 'type': 'string'},\r",
											"                    'DIAG_DD': { 'type': 'string'},\r",
											"                },\r",
											"                'required': ['MEDICALRECORD', 'DIAG_DD']\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    'required': ['status', 'result', 'data']\r",
											"};\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/ptnt/memo/11/?vistSn=00",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"memo",
										"11",
										""
									],
									"query": [
										{
											"key": "vistSn",
											"value": "00"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4.9.2 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status', 'result'],\r",
											"};\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/ptnt/memo/{{PAT_NO}}/?vistSn=",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"memo",
										"{{PAT_NO}}",
										""
									],
									"query": [
										{
											"key": "vistSn",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4.9.3 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/ptnt/memo/{{PAT_NO}}/?vistSn=00064",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"memo",
										"{{PAT_NO}}",
										""
									],
									"query": [
										{
											"key": "vistSn",
											"value": "00064"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.10 진료 메모 저장",
					"item": [
						{
							"name": "4.10 진료 메모 저장",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const userData = {\r",
											"    \"patNo\" : pm.collectionVariables.get('PAT_NO'),\r",
											"    \"vistSn\" : pm.collectionVariables.get('VIST_SN'),\r",
											"    \"memo\" : '테스ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ트',\r",
											"}\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: Object.entries(userData).map(([key, value]) =>({key,value}))\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'status' : {'type': 'string'},\r",
											"    'result' : {'type': 'string'},\r",
											"    'required': ['status', 'result']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/memo/update",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"memo",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.10.1 필수값 미입력",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const userData = {\r",
											"    \"patNo\" : '',\r",
											"    \"vistSn\" : '',\r",
											"    \"memo\" : '',\r",
											"}\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: Object.entries(userData).map(([key, value]) =>({key,value}))\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'status' : {'type': 'string'},\r",
											"    'result' : {'type': 'string'},\r",
											"    'required': ['status', 'result']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/memo/update",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"memo",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.10.2 필수값 오입력",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: [\r",
											"        {key: 'patNo', value: 'ERROR'},\r",
											"        {key: 'vistSn', value: 'ERROR'},\r",
											"        {key: 'memo', value: 'ERROR'},\r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/memo/update",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"memo",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.10.3 변조 토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const userData = {\r",
											"    \"patNo\" : pm.collectionVariables.get('PAT_NO'),\r",
											"    \"vistSn\" : pm.collectionVariables.get('VIST_SN'),\r",
											"    \"memo\" : '테스ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ트',\r",
											"}\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: Object.entries(userData).map(([key, value]) =>({key,value}))\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/memo/update",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"memo",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.11 진료일자 별 예약 내역",
					"item": [
						{
							"name": "4.11 진료일자 별 예약 내역",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const userData =  resJson.data.length > 0 ? Object.keys(resJson.data[0]).map(val => val) : [];\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': {'type': 'string'},\r",
											"        'result': {'type': 'string'},\r",
											"        'data': {\r",
											"            'minItems': 1,\r",
											"            'type': 'array',\r",
											"            'items': {\r",
											"                'type': 'object',\r",
											"                'properties':\r",
											"                    Object.fromEntries(userData.map(prop => [prop, { 'type': ['string', 'null']}])),\r",
											"            },\r",
											"                    'required': userData,\r",
											"        },\r",
											"    },\r",
											"    'required': ['status', 'result', 'data'],\r",
											"}\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/rsvn/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"rsvn",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.11.1 미입력",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/rsvn",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"rsvn"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.11.2 오입력",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'status' : {'type': 'string'},\r",
											"    'result' : {'type': 'string'},\r",
											"    'data' : {'type': 'array'},\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/rsvn/12312311",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"rsvn",
										"12312311"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.11.2 변조 토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/rsvn/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"rsvn",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.12 진료일자 별 상담 내역",
					"item": [
						{
							"name": "4.12 진료일자 별 상담 내역",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const userData =  resJson.data.length > 0 ? Object.keys(resJson.data[0]).map(val => val) : [];\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': {'type': 'string'},\r",
											"        'result': {'type': 'string'},\r",
											"        'data': {\r",
											"            'minItems': 1,\r",
											"            'type': 'array',\r",
											"            'items': {\r",
											"                'type': 'object',\r",
											"                'properties': \r",
											"                    Object.fromEntries(userData.map(prop => [prop, { 'type': ['string', 'null']}])),\r",
											"                    'required': userData,\r",
											"                },\r",
											"            },\r",
											"        },\r",
											"    'required': ['status', 'result', 'data'],\r",
											"}\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/cnst/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"cnst",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.12.1 미입력",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/cnst/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"cnst",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "4.12.2 오입력",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"        'type': 'object',\r",
											"        'properties': {\r",
											"            'status': {'type': 'string'},\r",
											"            'result': {'type': 'string'},\r",
											"            'data': {'type': 'array'},\r",
											"    },\r",
											"    'required': ['status', 'result', 'data'],\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/cnst/1231111",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"cnst",
										"1231111"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.12.3 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/cnst/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"cnst",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.14 티케팅 목록",
					"item": [
						{
							"name": "4.14 티케팅 목록",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const userData =  resJson.data.length > 0 ? Object.keys(resJson.data[0]).map(val => val) : [];\r",
											"\r",
											"let schema = {\r",
											"        'type': 'object',\r",
											"        'properties': {\r",
											"            'status': {'type': 'string'},\r",
											"            'result': {'type': 'string'},\r",
											"            'data': {\r",
											"                'minItems': 1,\r",
											"                'type': 'array',\r",
											"                'items': {\r",
											"                    'type': 'object',\r",
											"                    'properties': \r",
											"                        Object.fromEntries(userData.map(val => [val, { 'type': ['string', 'null']}])),\r",
											"                    'required': userData,\r",
											"                }\r",
											"            },\r",
											"        },\r",
											"        'required': ['status', 'result', 'data'],\r",
											"    }\r",
											"\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ticketing/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ticketing",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.14.1 미입력",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ticketing/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ticketing",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "4.14.2 오입력",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"        'type': 'object',\r",
											"        'properties': {\r",
											"            'status': {'type': 'string'},\r",
											"            'result': {'type': 'string'},\r",
											"            'data': {'type': 'array'},\r",
											"    },\r",
											"    'required': ['status', 'result', 'data'],\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"210\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"데이터 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ticketing/1231111",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ticketing",
										"1231111"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.14.3 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ticketing/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ticketing",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.15 시술 정보",
					"item": [
						{
							"name": "4.15 시술 정보",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const userData = resJson.data.moprList.length > 0 ? Object.keys(resJson.data.moprList[0]).map(val => val) : [];\r",
											"let schema = {};\r",
											"\r",
											"if(resJson.data.moprList.length > 0) {\r",
											"    schema = {\r",
											"        'type': 'object',\r",
											"        'properties': {\r",
											"            'status': { 'type': 'string' },\r",
											"            'result': { 'type': 'string' },\r",
											"            'data': {\r",
											"                'type': 'object',\r",
											"                'properties': {\r",
											"                    'moprList': {\r",
											"                        'type': 'array',\r",
											"                        'items': {\r",
											"                            'type': 'object',\r",
											"                            'properties':\r",
											"                                Object.fromEntries(userData.map(val => [val, { 'type': ['string', 'null']}])),\r",
											"                            'required': userData\r",
											"                        }\r",
											"                    }\r",
											"                },\r",
											"                'required': ['moprList']\r",
											"            }\r",
											"        },\r",
											"        'required': ['status', 'result', 'data']\r",
											"    };\r",
											"} else {\r",
											"schema = {\r",
											"        'type': 'object',\r",
											"        'properties': {\r",
											"            'status': { 'type': 'string' },\r",
											"            'result': { 'type': 'string' },\r",
											"            'data': {\r",
											"                'type': 'object',\r",
											"                'properties': {\r",
											"                    'moprList': {\r",
											"                        'type': 'array',\r",
											"                    }\r",
											"                },\r",
											"                'required': ['moprList']\r",
											"            }\r",
											"        },\r",
											"        'required': ['status', 'result', 'data']\r",
											"    };\r",
											"}\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/mopr/{{PAT_NO}}/{{VIST_SN}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"mopr",
										"{{PAT_NO}}",
										"{{VIST_SN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.15.1 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/mopr",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"mopr"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.15.2 오입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const userData = resJson.data.moprList.length > 0 ? Object.keys(resJson.data.moprList[0]).map(val => val) : [];\r",
											"\r",
											"\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'properties': {\r",
											"                'moprList': {\r",
											"                    'type': 'array',\r",
											"                }\r",
											"            },\r",
											"            'required': ['moprList']\r",
											"        }\r",
											"    },\r",
											"    'required': ['status', 'result', 'data']\r",
											"};\r",
											"\r",
											"\r",
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Check returned JSON`, () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/mopr/0000/12111",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"mopr",
										"0000",
										"12111"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.15.3 변조 토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/ptnt/mopr/{{PAT_NO}}/{{VIST_SN}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ptnt",
										"mopr",
										"{{PAT_NO}}",
										"{{VIST_SN}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "- 4.1 해당 날짜 환자 환자 리스트 조회\n    - 필수 데이터 누락 / 400 status 발생 되어 확인필요\n- 4.13 진료일자 별 수납 내역\n    \n    - 응답값 없음"
		},
		{
			"name": "5.예약 캘린더",
			"item": [
				{
					"name": "5.1 예약 캘린더 조회",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
									"\r",
									"pm.request.body = {\r",
									"    'mode': 'urlencoded',\r",
									"    'urlencoded' : {key : 'searchDay', value: '20240329'}    \r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const resJson = pm.response.json();\r",
									"\r",
									"const codeList = Object.keys(resJson.data.codeList[0]);\r",
									"const reservationList = Object.keys(resJson.data.reservationHour);\r",
									"const reservationHour = Object.keys(resJson.data.reservationList[0]);\r",
									"\r",
									"const schema = {\r",
									"    'type': 'object',\r",
									"    'properties': {\r",
									"        'status': { 'type': 'string' },\r",
									"        'result': { 'type': 'string' },\r",
									"        'data': {\r",
									"            'type': 'object',\r",
									"            'properties': {\r",
									"                'codeList': {\r",
									"                    'type': 'array',\r",
									"                    'items': {\r",
									"                        'type': 'object',\r",
									"                        'properties': Object.fromEntries(\r",
									"                            codeList.map((key) => [key, { 'type': ['string', 'null'] }])),\r",
									"                        'required': codeList\r",
									"                    },\r",
									"                },\r",
									"                'reservationHour': {\r",
									"                    'type': 'array',\r",
									"                    'items': { 'type': 'string' }\r",
									"                },\r",
									"                'reservationList': {\r",
									"                    'type': 'array',\r",
									"                    'items': { \r",
									"                        'type': 'object',\r",
									"                        'properties': reservationHour.length > 0 ? \r",
									"                            Object.fromEntries(\r",
									"                            reservationHour.map((key) => [key, { 'type': ['string', 'null'] }]))\r",
									"                            : {},\r",
									"                        },\r",
									"                        'required': reservationHour.length > 0 ? reservationHour : []\r",
									"                    },\r",
									"                },\r",
									"            'required': ['codeList', 'reservationHour', 'reservationList']\r",
									"            },\r",
									"        },\r",
									"    'required': ['status', 'result', 'data']\r",
									"};\r",
									"\r",
									"\r",
									"\r",
									"pm.test('Check server status', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check returned JSON\", () => {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(resJson).to.be.not.empty;\r",
									"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
									"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									"pm.test(\"Check response time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
									"});\r",
									"\r",
									"pm.test(\"Check HTTPS protocol usage\", () => {\r",
									"    pm.expect(pm.request.url).to.match(/^https:/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/cldr?searchDay=20240501",
							"host": [
								"{{domain}}"
							],
							"path": [
								"cldr"
							],
							"query": [
								{
									"key": "searchDay",
									"value": "20240501"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5.1.3 변조 토큰",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
									"\r",
									"pm.request.body = {\r",
									"    'mode': 'urlencoded',\r",
									"    'urlencoded' : {key : 'searchDay', value: '20240329'}    \r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check server status\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/cldr?searchDay=20240501",
							"host": [
								"{{domain}}"
							],
							"path": [
								"cldr"
							],
							"query": [
								{
									"key": "searchDay",
									"value": "20240501"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5.1.1 예약 캘린더 조회(미등록)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const resJson = pm.response.json();\r",
									"\r",
									"const codeList = Object.keys(resJson.data.codeList[0]);\r",
									"\r",
									"const schema = {\r",
									"    'type': 'object',\r",
									"    'properties': {\r",
									"        'status': { 'type': 'string' },\r",
									"        'result': { 'type': 'string' },\r",
									"        'data': {\r",
									"            'type': 'object',\r",
									"            'properties': {\r",
									"                'codeList': {\r",
									"                    'type': 'array',\r",
									"                    'items': {\r",
									"                        'type': 'object',\r",
									"                        'properties': Object.fromEntries(\r",
									"                            codeList.map((key) => [key, { 'type': ['string', 'null'] }])),\r",
									"                        'required': codeList\r",
									"                    },\r",
									"                },\r",
									"                'reservationHour': {\r",
									"                    'type': 'array',\r",
									"                },\r",
									"                'reservationList': {\r",
									"                    'type': 'array',\r",
									"                }\r",
									"            },\r",
									"            'required': ['codeList', 'reservationHour', 'reservationList']\r",
									"        },\r",
									"    },\r",
									"    'required': ['status', 'result', 'data']\r",
									"};\r",
									"\r",
									"\r",
									"console.log(schema);\r",
									"\r",
									"pm.test('Check server status', function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check returned JSON\", () =>{\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(resJson).to.be.not.empty;\r",
									"    pm.expect(resJson.data.reservationHour).to.be.empty;\r",
									"    pm.expect(resJson.data.reservationList).to.be.empty;\r",
									"    pm.expect(resJson).to.be.not.empty;\r",
									"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
									"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									"pm.test(\"Check response time\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/cldr?searchDay=asd",
							"host": [
								"{{domain}}"
							],
							"path": [
								"cldr"
							],
							"query": [
								{
									"key": "searchDay",
									"value": "asd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5.1.2 예약 캘린더 조회(미입력)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resJson = pm.response.json();\r",
									"\r",
									"const codeList = Object.keys(resJson.data.codeList[0]);\r",
									"const reservationList = Object.keys(resJson.data.reservationHour);\r",
									"const reservationHour = Object.keys(resJson.data.reservationList[0]);\r",
									"\r",
									"const schema = {\r",
									"    'type': 'object',\r",
									"    'properties': {\r",
									"        'status': { 'type': 'string' },\r",
									"        'result': { 'type': 'string' },\r",
									"        'data': {\r",
									"            'type': 'object',\r",
									"            'properties': {\r",
									"                'codeList': {\r",
									"                    'type': 'array',\r",
									"                    'items': {\r",
									"                        'type': 'object',\r",
									"                        'properties': Object.fromEntries(\r",
									"                            codeList.map((key) => [key, { 'type': ['string', 'null'] }])),\r",
									"                        'required': codeList\r",
									"                    },\r",
									"                },\r",
									"                'reservationHour': {\r",
									"                    'type': 'array',\r",
									"                    'items': { 'type': 'string' }\r",
									"                },\r",
									"                'reservationList': {\r",
									"                    'type': 'array',\r",
									"                    'items': { \r",
									"                        'type': 'object',\r",
									"                        'properties': reservationHour.length > 0 ? \r",
									"                            Object.fromEntries(\r",
									"                            reservationHour.map((key) => [key, { 'type': ['string', 'null'] }]))\r",
									"                            : {},\r",
									"                        },\r",
									"                        'required': reservationHour.length > 0 ? reservationHour : []\r",
									"                    },\r",
									"                },\r",
									"            'required': ['codeList', 'reservationHour', 'reservationList']\r",
									"            },\r",
									"        },\r",
									"    'required': ['status', 'result', 'data']\r",
									"};\r",
									"\r",
									"\r",
									"\r",
									"pm.test('Check server status', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check returned JSON\", () => {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(resJson).to.be.not.empty;\r",
									"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
									"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									"pm.test(\"Check response time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/cldr?searchDay=",
							"host": [
								"{{domain}}"
							],
							"path": [
								"cldr"
							],
							"query": [
								{
									"key": "searchDay",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6.공지사항",
			"item": [
				{
					"name": "6.1 공지사항 추가",
					"item": [
						{
							"name": "6.1 공지사항 추가",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"var year = date.getFullYear();\r",
											"var month = (\"0\" + (1 + date.getMonth())).slice(-2);\r",
											"var day = (\"0\" + date.getDate()).slice(-2);\r",
											"\r",
											"\r",
											"const noticeList = [\r",
											"    \"QA 공지사항 테스트\",\r",
											"    `테스트\r",
											"    공지사항 테스트\r",
											"    QA 팀 테스트\r",
											"    공지사항 확인`,\r",
											"    `공지사항 등록 확인용`,\r",
											"    `공지 등록 확인`,\r",
											"    `공지사항 등록 테스트\r",
											"    공지사항 등록 테스트\r",
											"    공지사항 등록 테스트\r",
											"    공지사항 등록 테스트\r",
											"    공지사항 등록 테스트\r",
											"    공지사항 등록 테스트\r",
											"    공지사항 등록 테스트\r",
											"    공지사항 등록 테스트\r",
											"    공지사항 등록 테스트`\r",
											"]\r",
											"\r",
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded':[\r",
											"        {key:'noticeTxt', value: noticeList[Math.floor(Math.random() * noticeList.length)]},\r",
											"        {key:'noticeFd', value: year+\"\"+month+\"\"+day},\r",
											"        {key:'noticeLd', value: year+\"\"+month+\"\"+day},\r",
											"    ]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const notice = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.response.to.have.jsonSchema(notice);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/notice",
									"host": [
										"{{domain}}"
									],
									"path": [
										"notice"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1.1 공지사항 추가(오입력)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"var year = date.getFullYear();\r",
											"var month = (\"0\" + (1 + date.getMonth())).slice(-2);\r",
											"var day = (\"0\" + date.getDate()).slice(-2);\r",
											"\r",
											"const noticeList = [\r",
											"    \"QA 공지사항 테스트\",\r",
											"    `테스트\r",
											"    공지사항 테스트\r",
											"    QA 팀 테스트\r",
											"    공지사항 확인`,\r",
											"    `공지사항 등록 확인용`,\r",
											"    `공지 등록 확인`,\r",
											"    `공지사항 등록 테스트\r",
											"    공지사항 등록 테스트\r",
											"    공지사항 등록 테스트\r",
											"    공지사항 등록 테스트\r",
											"    공지사항 등록 테스트\r",
											"    공지사항 등록 테스트\r",
											"    공지사항 등록 테스트\r",
											"    공지사항 등록 테스트\r",
											"    공지사항 등록 테스트`\r",
											"]\r",
											"\r",
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded':[\r",
											"        {key:'noticeTxt', value: 'ERROR'},\r",
											"        {key:'noticeFd', value: 'ERROR'},\r",
											"        {key:'noticeLd', value: 'ERROR'},\r",
											"    ]\r",
											"};\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const notice = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(notice);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/notice",
									"host": [
										"{{domain}}"
									],
									"path": [
										"notice"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1.2 공지사항 추가(미입력)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const notice = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(notice);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/notice",
									"host": [
										"{{domain}}"
									],
									"path": [
										"notice"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1.3 변조 토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/notice",
									"host": [
										"{{domain}}"
									],
									"path": [
										"notice"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6.2 공지사항 조회",
					"item": [
						{
							"name": "6.2 오늘날짜 공지사항 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"\r",
											"const value = ['YKIHO','NOTICE_NO','NOTICE_FD','NOTICE_LD','NOTICE_TXT','CNCL_YN','USER_NM','SetDateTime']\r",
											"\r",
											"let notice = {}\r",
											"console.log();\r",
											"\r",
											"if(resJson.data.length > 0){\r",
											"    notice = {\r",
											"        'type' : 'object',\r",
											"        'properties' :{  \r",
											"            'status' : {'type': 'string'},\r",
											"            'result' : {'type': 'string'},\r",
											"            'data' : { \r",
											"                'type': 'array',\r",
											"                'properties' : { \r",
											"                'YKIHO' : {'type':'string'},\r",
											"                'NOTICE_NO': {'type':'string'},\r",
											"                'NOTICE_FD': {'type':'string'},\r",
											"                'NOTICE_LD': {'type':'string'},\r",
											"                'NOTICE_TXT':{'type':'string'},\r",
											"                'CNCL_YN':{'type':'string'},\r",
											"                'USER_NM':{'type':'string'},\r",
											"                'SetDateTime':{'type':'string'},\r",
											"                },\r",
											"                'required' : value\r",
											"            },\r",
											"        },\r",
											"        'required': ['status', 'result', 'data']\r",
											"    }\r",
											"} else {\r",
											"    notice = {\r",
											"        'type' : 'object',\r",
											"        'properties' :{  \r",
											"            'status' : {'type': 'string'},\r",
											"            'result' : {'type': 'string'},\r",
											"            'data' : { \r",
											"                'type': 'array',\r",
											"            },\r",
											"        },\r",
											"    'required': ['status', 'result', 'data']\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    if(resJson.status === \"200\"){\r",
											"        pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"        pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"        pm.expect(resJson.data).to.be.not.empty;\r",
											"    } else if(resJson.status === \"210\") {\r",
											"        pm.expect(resJson.status).to.be.eql(\"210\");\r",
											"        pm.expect(resJson.result).to.be.eql(\"데이터 없음\");\r",
											"        pm.expect(resJson.data).to.be.empty;\r",
											"    }\r",
											"    pm.response.to.have.jsonSchema(notice);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/notice/search",
									"host": [
										"{{domain}}"
									],
									"path": [
										"notice",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2.1 특정 공지사항 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const val = ['YKIHO','NOTICE_NO','NOTICE_FD','NOTICE_LD','NOTICE_TXT','CNCL_YN','USER_NM','SetDateTime']\r",
											"\r",
											"const notice = {\r",
											"    'type' : 'object',\r",
											"     'properties' :{  \r",
											"        'status' : {'type': 'string'},\r",
											"        'result' : {'type': 'string'},\r",
											"        'data' : { \r",
											"            'type': 'array',\r",
											"            'properties' : { \r",
											"             'YKIHO' : {'type':'string'},\r",
											"             'NOTICE_NO': {'type':'string'},\r",
											"             'NOTICE_FD': {'type':'string'},\r",
											"             'NOTICE_LD': {'type':'string'},\r",
											"             'NOTICE_TXT':{'type':'string'},\r",
											"             'CNCL_YN':{'type':'string'},\r",
											"             'USER_NM':{'type':'string'},\r",
											"             'SetDateTime':{'type':'string'},\r",
											"            },\r",
											"        \r",
											"            'required' : val\r",
											"        },\r",
											"           \r",
											"    },\r",
											"}\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.expect(resJson.data).to.be.not.empty;\r",
											"    pm.response.to.have.jsonSchema(notice);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/notice/search?noticeFd=20240325&noticeLd=20240401&noticeTxt=지혜, 유진 휴무",
									"host": [
										"{{domain}}"
									],
									"path": [
										"notice",
										"search"
									],
									"query": [
										{
											"key": "noticeFd",
											"value": "20240325"
										},
										{
											"key": "noticeLd",
											"value": "20240401"
										},
										{
											"key": "noticeTxt",
											"value": "지혜, 유진 휴무"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2.2 공지사항 조회(오입력)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"const search = { \r",
											"    'noticeTxt': '없음',\r",
											"    'noticeFd' : '!@#$!@#$',\r",
											"    'noticeLd' : '!@#$!@#$',\r",
											"};  \r",
											"\r",
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: Object.entries(search).map(([key, value]) =>({key,value}))\r",
											"};\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const val = ['YKIHO','NOTICE_NO','NOTICE_FD','NOTICE_LD','NOTICE_TXT','CNCL_YN','USER_NM','SetDateTime']\r",
											"\r",
											"const notice = {\r",
											"    'type' : 'object',\r",
											"     //properties : 객체 속성값을 지정해주는 역활//\r",
											"     'properties' :{  \r",
											"        'status' : {'type': 'string'},\r",
											"        'result' : {'type': 'string'},\r",
											"        'data' : { \r",
											"            'type': 'array',\r",
											"            'properties' : { \r",
											"             'YKIHO' : {'type':'string'},\r",
											"             'NOTICE_NO': {'type':'string'},\r",
											"             'NOTICE_FD': {'type':'string'},\r",
											"             'NOTICE_LD': {'type':'string'},\r",
											"             'NOTICE_TXT':{'type':'string'},\r",
											"             'CNCL_YN':{'type':'string'},\r",
											"             'USER_NM':{'type':'string'},\r",
											"             'SetDateTime':{'type':'string'},\r",
											"            },\r",
											"        \r",
											"            'required' : val\r",
											"        },\r",
											"           \r",
											"    },\r",
											"}\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', ()=> {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"210\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"데이터 없음\");\r",
											"    pm.expect(resJson.data).to.be.empty;\r",
											"    pm.response.to.have.jsonSchema(notice);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/notice/search?noticeFd=20240426&noticeLd=20240501&noticeTxt=aa",
									"host": [
										"{{domain}}"
									],
									"path": [
										"notice",
										"search"
									],
									"query": [
										{
											"key": "noticeFd",
											"value": "20240426"
										},
										{
											"key": "noticeLd",
											"value": "20240501"
										},
										{
											"key": "noticeTxt",
											"value": "aa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2.3 변조 토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"const search = { \r",
											"    'noticeTxt': '없음',\r",
											"    'noticeFd' : '!@#$!@#$',\r",
											"    'noticeLd' : '!@#$!@#$',\r",
											"};  \r",
											"\r",
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: Object.entries(search).map(([key, value]) =>({key,value}))\r",
											"};\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check server status\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/notice/search?noticeFd=20240426&noticeLd=20240501&noticeTxt=aa",
									"host": [
										"{{domain}}"
									],
									"path": [
										"notice",
										"search"
									],
									"query": [
										{
											"key": "noticeFd",
											"value": "20240426"
										},
										{
											"key": "noticeLd",
											"value": "20240501"
										},
										{
											"key": "noticeTxt",
											"value": "aa"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "7.휴진일 조회",
			"item": [
				{
					"name": "7.1 휴진일 조회",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resJson = pm.response.json();\r",
									"const resData = resJson.date == [] ? [] : Object.keys(resJson.data[0]);\r",
									"\r",
									"let schema = {}\r",
									"\r",
									"if(resJson.data.length > 0) {\r",
									"    schema = {\r",
									"        'type': 'object',\r",
									"        'properties': {\r",
									"            'status': {'type': 'string'},\r",
									"            'result': {'type': 'string'},\r",
									"            'data': {\r",
									"                'type': 'array',\r",
									"                'items': {\r",
									"                    'type': 'object',\r",
									"                    'properties': {\r",
									"                        'CLS_DATE' : {\r",
									"                            'type': 'string'\r",
									"                        }\r",
									"                    },\r",
									"                    'required': ['CLS_DATE']\r",
									"                },\r",
									"            },\r",
									"        },\r",
									"        'required': ['status', 'result', 'data']\r",
									"    };\r",
									"}\r",
									"\r",
									"\r",
									"pm.test('Check server status', function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check returned JSON\", () =>{\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(resJson).to.be.not.empty;\r",
									"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									"pm.test(\"Check response time\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
									"});\r",
									"\r",
									"pm.test(\"Check HTTPS protocol usage\", function() {\r",
									"    pm.expect(pm.request.url).to.match(/^https:/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/off",
							"host": [
								"{{domain}}"
							],
							"path": [
								"off"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.1.1 변조토큰",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check server status\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/off",
							"host": [
								"{{domain}}"
							],
							"path": [
								"off"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "8.동의서",
			"item": [
				{
					"name": "8.1 동의서 템플릿 리스트 조회",
					"item": [
						{
							"name": "8.1 동의서 템플릿 리스트 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type' : 'object',\r",
											"    'properties' : {\r",
											"        'status' : {'type' :'string'},\r",
											"        'result' : {'type': 'string'},\r",
											"        'data' : {\r",
											"            'type': 'array',\r",
											"            'items': { \r",
											"                'type':'object',\r",
											"                'properties' : {\r",
											"                    'CNST_SN' : {'type' : 'string'},\r",
											"                    'CNST_NM' : {'type' : ['string','null']},\r",
											"                    'CNST_SEQ' : {'type' : 'string'},\r",
											"                    'CNST_CD' : {'type' : 'string'},\r",
											"                    'CNST_CD_NM' : {'type' : 'string'},\r",
											"                    'CNST_URL' : {'type' : 'string'},\r",
											"                    'TODAY_USE' : {'type' : 'string'},\r",
											"                    'SEQ' : {'type': ['string','null']},\r",
											"                    'COUNTLIST' : {'type': 'string'},\r",
											"                },\r",
											"            },\r",
											"            'required' : ['CNST_SN','CNST_NM','CNST_SEQ','CNST_CD','CNST_CD_NM','CNST_URL','TODAT_USE','SEQ','COUNTLIST']\r",
											"        },\r",
											"    }, \r",
											"    'required' : ['status', 'result', 'data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/cnst/?patNo={{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"cnst",
										""
									],
									"query": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "8.1.2 파라미터 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type' : 'object',\r",
											"    'properties' : {\r",
											"        'status' : {'type' :'string'},\r",
											"        'result' : {'type': 'string'},\r",
											"        'data' : {\r",
											"            'type': 'array',\r",
											"            'properties' : {\r",
											"                'CNST_SN' : {'type' : 'string'},\r",
											"                'CNST_NM' : {'type' : 'null'},\r",
											"                'CNST_SEQ' : {'type' : 'string'},\r",
											"                'CNST_CD' : {'type' : 'string'},\r",
											"                'CNST_CD_NM' : {'type' : 'string'},\r",
											"                'CNST_URL' : {'type' : 'string'},\r",
											"                'TODAY_USE' : {'type' : 'string'},\r",
											"                'SEQ' : {'type': ['string','null']},\r",
											"                'COUNTLIST' : {'type': 'string'},\r",
											"            },\r",
											"            'required' : ['CNST_SN','CNST_NM','CNST_SEQ','CNST_CD','CNST_CD_NM','CNST_URL','TODAT_USE','SEQ','COUNTLIST']\r",
											"        },\r",
											"    }, \r",
											"    'required' : ['status', 'result', 'data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", () => {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/cnst/?patNo=",
									"host": [
										"{{domain}}"
									],
									"path": [
										"cnst",
										""
									],
									"query": [
										{
											"key": "patNo",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "8.1.1 변조토큰",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/cnst/?patNo={{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"cnst",
										""
									],
									"query": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8.3 펜차트 템플릿 조회",
					"item": [
						{
							"name": "8.3 펜차트 템플릿 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"result\": { \"type\": \"string\" },\r",
											"        \"data\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": {\r",
											"                \"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"PENCT_CD\": { \"type\": \"string\" },\r",
											"                    \"PENCT_NM\": { \"type\": \"string\" },\r",
											"                    \"PENCT_URL\": { \"type\": \"string\" },\r",
											"                    \"CTGR_CD\": { \"type\": \"string\" },\r",
											"                    \"BSIC_YN\": { \"type\": \"string\" },\r",
											"                    \"CTGR_CD_NM\": { \"type\": \"string\" },\r",
											"                    \"SEQ\": { \"type\": \"string\" }\r",
											"                },\r",
											"                \"required\": [\"PENCT_CD\", \"PENCT_NM\", \"PENCT_URL\", \"CTGR_CD\", \"BSIC_YN\", \"CTGR_CD_NM\", \"SEQ\"]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"status\", \"result\", \"data\"]\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const penRanNum = Object.keys(resJson.data).length;\r",
											"const penctRandom = Math.floor(Math.random() * penRanNum)+1;\r",
											"console.log(penctRandom) \r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"   pm.collectionVariables.set('CTGR_CD',resJson.data[penctRandom].CTGR_CD)\r",
											"   pm.collectionVariables.set('PENCT_CD',resJson.data[penctRandom].PENCT_CD)\r",
											"   pm.collectionVariables.set('PENCT_NM',resJson.data[penctRandom].PENCT_NM)\r",
											"   });\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.expect(resJson.result).to.be.eql('성공');\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/penct",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.3.1 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/penct",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8.4 펜차트 저장",
					"item": [
						{
							"name": "8.4 펜차트 저장 및 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const today = new Date();\r",
											"\r",
											"const year = today.getFullYear();\r",
											"const month = ('0' + (today.getMonth() + 1)).slice(-2);\r",
											"const day = ('0' + today.getDate()).slice(-2);\r",
											"const hours = ('0' + today.getHours()).slice(-2); \r",
											"const minutes = ('0' + today.getMinutes()).slice(-2);\r",
											"const seconds = ('0' + today.getSeconds()).slice(-2); \r",
											"const timeString = year + '-' + month  + '-' + day + \" \"+ hours + ':' + minutes  + ':' + seconds;\r",
											"const todayString = year+month+day;\r",
											"\r",
											"const randomNum = Math.floor(Math.random() * 24)+1;\r",
											"\r",
											"const imageUrl = \"C:/works/apiTest/image/\";\r",
											"const imageList = [];\r",
											"\r",
											"const forNum = 21;\r",
											"for(let i=1; i <= forNum; i++){\r",
											"        let str = imageUrl+'TestImage'+i+ '.jpg';\r",
											"        imageList.push(str)\r",
											"}\r",
											"const customImageList = [\r",
											"    '🥲.jpg',\r",
											"    '한글파일.jpg',\r",
											"    '!!!!!.jpg',\r",
											"    'test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'\r",
											"];\r",
											"\r",
											"for(index in customImageList){\r",
											"    imageList.push(imageUrl+customImageList[index])\r",
											"};\r",
											"const randomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
											"\r",
											"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
											"newFormData.push({ key: 'ctgrCd', value: pm.collectionVariables.get('CTGR_CD') });\r",
											"newFormData.push({ key: 'vistSn', value: pm.collectionVariables.get('VIST_SN') });\r",
											"newFormData.push({ key: 'penCtCd', value: pm.collectionVariables.get('PENCT_CD') });\r",
											"newFormData.push({ key: 'penCtNm', value: pm.collectionVariables.get('PENCT_NM') });\r",
											"newFormData.push({ key: 'penCtMemo', value: 'testText / ' + timeString });\r",
											"newFormData.push({ key: 'penCtImage', type: 'file', src: randomImage});\r",
											"\r",
											"pm.collectionVariables.set('todayString', todayString);\r",
											"pm.collectionVariables.set('PENCT_CD', newFormData[3].value);\r",
											"pm.collectionVariables.set('PENCT_NM', newFormData[4].value);\r",
											"pm.collectionVariables.set('PENCT_MEMO', newFormData[5].value);\r",
											"\r",
											"pm.request.body.formdata = newFormData;\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type' : 'object',\r",
											"    'properties' : {\r",
											"        'status' : {'type' : 'string'},\r",
											"        'result' : {'type' : 'string'}\r",
											"    }, \r",
											"    'required' : ['status' ,'result']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});\r",
											"\r",
											"if(resJson.status === \"200\"){\r",
											"    const requestConfig = {\r",
											"        url: pm.environment.get('domain') + '/penct/ptnt/' + pm.collectionVariables.get('PAT_NO'),\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Authorization': 'Bearer ' + pm.environment.get('accessToken') // \r",
											"        },\r",
											"    };\r",
											"\r",
											"    pm.sendRequest(requestConfig, function (err, res) {\r",
											"        if (err) {\r",
											"            console.error(err); \r",
											"            return;\r",
											"        }\r",
											"        \r",
											"        const resData = res.json().data;\r",
											"        const penctSn = [];\r",
											"        resData.filter(item => {\r",
											"            if(item.PENCT_SN.startsWith(pm.collectionVariables.get('todayString'))){\r",
											"                penctSn.push(item);\r",
											"            }\r",
											"        });\r",
											"\r",
											"        let maxSn = penctSn.reduce((max, item) => {\r",
											"            const snValue = parseInt(item.PENCT_SN.split('_')[1], 10);\r",
											"            return snValue > max ? snValue : max;\r",
											"        }, 0);\r",
											"        let maxItem = penctSn.find(item => {\r",
											"            const snValue = parseInt(item.PENCT_SN.split('_')[1], 10);\r",
											"            return snValue === maxSn;\r",
											"        });\r",
											"        pm.test('Save data compare select', ()=> {\r",
											"            pm.expect(maxItem).to.be.not.empty;\r",
											"            pm.expect(maxItem.PENCT_CD).to.be.eql(pm.collectionVariables.get('PENCT_CD'))\r",
											"            pm.expect(maxItem.PENCT_NM).to.be.eql(pm.collectionVariables.get('PENCT_NM'))\r",
											"            pm.expect(maxItem.PENCT_MEMO).to.be.eql(pm.collectionVariables.get('PENCT_MEMO'))\r",
											"        });\r",
											"    }); \r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "null"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penct",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.4.1 필수값 미입력",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type' : 'object',\r",
											"    'properties' : {\r",
											"        'status' : {'type' : 'string'},\r",
											"        'result' : {'type' : 'string'}\r",
											"    }, \r",
											"    'required' : ['status' ,'result']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "null"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penct",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.4.2 이미지 미존재",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
											"newFormData.push({ key: 'ctgrCd', value: pm.collectionVariables.get('CTGR_CD') });\r",
											"newFormData.push({ key: 'vistSn', value: pm.collectionVariables.get('VIST_SN') });\r",
											"newFormData.push({ key: 'penCtCd', value: pm.collectionVariables.get('PENCT_CD') });\r",
											"newFormData.push({ key: 'penCtNm', value: 'ERROR' });\r",
											"newFormData.push({ key: 'penCtMemo', value: 'ERROR' });\r",
											"newFormData.push({ key: 'penCtImage', type: 'file', src: 'ERROR'});\r",
											"\r",
											"pm.request.body.formdata = newFormData;\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type' : 'object',\r",
											"    'properties' : {\r",
											"        'status' : {'type' : 'string'},\r",
											"        'result' : {'type' : 'string'}\r",
											"    }, \r",
											"    'required' : ['status' ,'result']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"500\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"펜차트 이미지 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "null"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penct",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.4.3 대용량 사진 저장",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"newFormData = []\r",
											"\r",
											"newFormData.push({ key: 'ctgrCd', value: pm.collectionVariables.get('CTGR_CD') });\r",
											"newFormData.push({ key: 'vistSn', value: pm.collectionVariables.get('VIST_SN') });\r",
											"newFormData.push({ key: 'penCtCd', value: pm.collectionVariables.get('PENCT_CD') });\r",
											"newFormData.push({ key: 'penCtNm', value: pm.collectionVariables.get('PENCT_NM') });\r",
											"newFormData.push({ key: 'penCtMemo', value: '대용량 이미지 업로드' });\r",
											"newFormData.push({ key: 'penCtImage', type: 'file', src: 'C:/works/apiTest/image/대용량.jpg'});\r",
											"\r",
											"pm.request.body.formdata = newFormData;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"resJson = pm.response.json()\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "null"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penct",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.4.4 변조토큰 저장",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.request.headers.add({key: \"Content-Type\", value: \"multipart/form-data\"});\r",
											"\r",
											"// pm.request.body = {\r",
											"//     mode: 'formdata',\r",
											"//     formdata: [\r",
											"//         { key: 'patNo', value: pm.collectionVariables.get('PAT_NO') },\r",
											"//         { key: 'vistSn', value: '00001' },\r",
											"//         { key: 'ctgrCd', value: 'CAT02' },\r",
											"//         { key: 'penCtCd', value: 'PEN016' },\r",
											"//         { key: 'penCtNm', value: '피부 시술 코스' },\r",
											"//         { key: 'penCtImage', type: 'file', src: 'C:/upload/testImage.JPG'}\r",
											"//     ]\r",
											"// };\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "null"
									}
								],
								"url": {
									"raw": "{{domain}}/penct",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8.6 동의서내역 조회",
					"item": [
						{
							"name": "8.6 동의서내역 조회 > 확인필요",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"const resDataValue = [];\r",
											"Object.keys(resData.data[0]).forEach(val =>{\r",
											"    resDataValue.push(val)\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"        'data':{\r",
											"            'type':'array',\r",
											"            'items' :{\r",
											"                'properties': resDataValue.forEach(val =>{\r",
											"                    val === 'IMAGE_URL' ?\r",
											"                    { \r",
											"                        'type': 'array', \r",
											"                        'items': {\r",
											"                            'properties' : {'type':'string'}\r",
											"                        }\r",
											"                    } :\r",
											"                    val,  {'type': 'string'} \r",
											"                }),\r",
											"            'required' : resDataValue\r",
											"            },\r",
											"        },\r",
											"    },\r",
											"    'required':['status','result','data']\r",
											"}\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/cnst/ptnt/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"cnst",
										"ptnt",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.6.1 오입력 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"        'data':{\r",
											"            'type':'array',\r",
											"            'items' : {},\r",
											"            }\r",
											"        },\r",
											"    'required':['status','result','data']\r",
											"}\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"210\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/cnst/ptnt/{{PAT_NO}}111",
									"host": [
										"{{domain}}"
									],
									"path": [
										"cnst",
										"ptnt",
										"{{PAT_NO}}111"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.6.2 미입력 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"check 200\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/cnst/ptnt/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"cnst",
										"ptnt",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "8.6.3 변조토큰",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/cnst/ptnt/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"cnst",
										"ptnt",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8.7 펜차트내역 조회",
					"item": [
						{
							"name": "8.7 펜차트내역 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"        'data': {\r",
											"            'type':'array',\r",
											"            'items':{\r",
											"                'properties':{\r",
											"                    'PENCT_SN':{'type':'string'},\r",
											"                    'PENCT_DD':{'type':'string'},\r",
											"                    'CTGR_CD':{'type':'string'},\r",
											"                    'CTGR_CD_NM':{'type':'string'},\r",
											"                    'PENCT_CD':{'type':'string'},\r",
											"                    'PENCT_NM':{'type':'string'},\r",
											"                    'IMAGE_URL':{'type':'string'},\r",
											"                    'PENCT_MEMO':{'type':'string'},\r",
											"                    'SEQ':{'type':'string'},\r",
											"                },\r",
											"            'required': ['PENCT_SN','PENCT_DD','CTGR_CD','CTGR_CD_NM','PENCT_CD','PENCT_NM','IMAGE_URL','PENCT_MEMO','SEQ'],\r",
											"            },\r",
											"        },\r",
											"    },\r",
											"    'required':['status','result','data']\r",
											"};\r",
											"\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"\r",
											"    penctList = resJson.data;\r",
											"    penctListRandom = penctList[Math.floor(Math.random() * penctList.length)];\r",
											"    pm.collectionVariables.set('PENCT_SN', penctListRandom.PENCT_SN);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{domain}}/penct/ptnt/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct",
										"ptnt",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.7.1 오입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"        'data': {\r",
											"            'type':'array',\r",
											"            'items': {}\r",
											"        },\r",
											"    },'required':['status','result','data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql('210');\r",
											"    pm.expect(resJson.result).to.be.eql('데이터 없음');\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/penct/ptnt/{{PAT_NO}}123",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct",
										"ptnt",
										"{{PAT_NO}}123"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.7.2 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/penct/ptnt/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct",
										"ptnt",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "8.7.3 변조토큰",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/penct/ptnt/{{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct",
										"ptnt",
										"{{PAT_NO}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8.8 펜차트 수정",
					"item": [
						{
							"name": "8.8 펜차트 수정 및 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const today = new Date();\r",
											"\r",
											"const year = today.getFullYear();\r",
											"const month = ('0' + (today.getMonth() + 1)).slice(-2);\r",
											"const day = ('0' + today.getDate()).slice(-2);\r",
											"const hours = ('0' + today.getHours()).slice(-2); \r",
											"const minutes = ('0' + today.getMinutes()).slice(-2);\r",
											"const seconds = ('0' + today.getSeconds()).slice(-2); \r",
											"const timeString = year + '-' + month  + '-' + day + \" \"+ hours + ':' + minutes  + ':' + seconds;\r",
											"const todayString = year+month+day\r",
											"\r",
											"const serviceList = ['미지정','제모','시술코스','피부코스','초진지','차트지','반영구'];\r",
											"const randomNum = Math.floor(Math.random() * 11)+1;\r",
											"const imageUrl = \"C:/works/apiTest/image/updateImage/\";\r",
											"const imageList = [];\r",
											"\r",
											"const forNum = 12;\r",
											"for(let i=1; i <= forNum; i++){\r",
											"        let str = imageUrl+'updateImage'+i+ '.jpg';\r",
											"        imageList.push(str)\r",
											"}\r",
											"\r",
											"const customImageList = [\r",
											"    '🥲.jpg',\r",
											"    '한글파일.jpg',\r",
											"    '!!!!!.jpg',\r",
											"    'test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'\r",
											"];\r",
											"\r",
											"for(index in customImageList){\r",
											"    imageList.push(imageUrl+customImageList[index])\r",
											"};\r",
											"\r",
											"const updateRandomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
											"const serviceListRandom = serviceList[Math.floor(Math.random() * imageList.length)];\r",
											"\r",
											"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
											"newFormData.push({ key: 'penCtSn', value: pm.collectionVariables.get('PENCT_SN')});\r",
											"newFormData.push({ key: 'ctgrCd', value: pm.collectionVariables.get('CTGR_CD') });\r",
											"newFormData.push({ key: 'penCtCd', value: pm.collectionVariables.get('PENCT_CD') });\r",
											"newFormData.push({ key: 'penCtNm', value: pm.collectionVariables.get('PENCT_NM') });\r",
											"newFormData.push({ key: 'penCtMemo', value: 'testText / ' + timeString });\r",
											"newFormData.push({ key: 'penCtImage', type: 'file', src: updateRandomImage});\r",
											"\r",
											"pm.collectionVariables.set('todayString', todayString);\r",
											"pm.collectionVariables.set('PENCT_CD', newFormData[3].value);\r",
											"pm.collectionVariables.set('PENCT_NM', newFormData[4].value);\r",
											"pm.collectionVariables.set('PENCT_MEMO', newFormData[5].value);\r",
											"\r",
											"console.log(newFormData[5].value);\r",
											"\r",
											"pm.request.body.formdata = newFormData;\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }, \r",
											"    'required':['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});\r",
											"\r",
											"\r",
											"if(resJson.status === \"200\"){\r",
											"    const requestConfig = {\r",
											"        url: pm.environment.get('domain') + '/penct/ptnt/' + pm.collectionVariables.get('PAT_NO'),\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Authorization': 'Bearer ' + pm.environment.get('accessToken') // \r",
											"        },\r",
											"    };\r",
											"\r",
											"    pm.sendRequest(requestConfig, function (err, res) {\r",
											"        if (err) {\r",
											"            console.error(err); \r",
											"            return;\r",
											"        }\r",
											"        \r",
											"        const resJosnData = res.json().data;\r",
											"        const penctSn = [];\r",
											"        resJosnData.filter(item => {\r",
											"            if(item.PENCT_SN.startsWith(pm.collectionVariables.get('todayString'))){\r",
											"                penctSn.push(item);\r",
											"            }\r",
											"        });\r",
											"        let maxSn = penctSn.reduce((max, item) => {\r",
											"            const snValue = parseInt(item.PENCT_SN.split('_')[1], 10);\r",
											"            return snValue > max ? snValue : max;\r",
											"        }, 0);\r",
											"        \r",
											"        let maxItem = penctSn.find(item => {\r",
											"            const snValue = parseInt(item.PENCT_SN.split('_')[1], 10);\r",
											"            return snValue === maxSn;\r",
											"        });\r",
											"        pm.test('Save data compare select', ()=> {\r",
											"            pm.expect(maxItem).to.be.not.empty;\r",
											"            pm.expect(maxItem.PENCT_CD).to.be.eql(pm.collectionVariables.get('PENCT_CD'))\r",
											"            pm.expect(maxItem.PENCT_NM).to.be.eql(pm.collectionVariables.get('PENCT_NM'))\r",
											"            pm.expect(maxItem.PENCT_MEMO).to.be.eql(pm.collectionVariables.get('PENCT_MEMO'))\r",
											"        });\r",
											"    }); \r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penct/ptnt",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct",
										"ptnt"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.8.1 필수값 오입력 수정",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({key: \"Content-Type\", value: \"multipart/form-data\"});\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'formdata',\r",
											"    formdata: [\r",
											"        { key: 'patNo', value: pm.collectionVariables.get('PAT_NO') },\r",
											"        { key: 'penCtSn', value: '20240402_8' },\r",
											"        { key: 'ctgrCd', value: 'CAT02' },\r",
											"        { key: 'penCtCd', value: 'PEN016' },\r",
											"        { key: 'penCtNm', value: '펜차트 수정 테스트' },\r",
											"        { key: 'penCtMemo', value: '펜차트 수정' },\r",
											"        { key: 'penCtImage', type: 'file', src: 'C:/upload/updateImage.jpg'}\r",
											"    ]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }, \r",
											"    'required':['status','result']\r",
											"};\r",
											"\r",
											"pm.test(\"check server\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"check 200\", function(){\r",
											"    pm.expect(resData.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"schema check\", function(){\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{domain}}/penct/ptnt",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct",
										"ptnt"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.8.2 필수값 미입력 수정",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }, \r",
											"    'required':['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.eql('400');\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{domain}}/penct/ptnt",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct",
										"ptnt"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.8.3 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const today = new Date();\r",
											"\r",
											"const year = today.getFullYear();\r",
											"const month = ('0' + (today.getMonth() + 1)).slice(-2);\r",
											"const day = ('0' + today.getDate()).slice(-2);\r",
											"const hours = ('0' + today.getHours()).slice(-2); \r",
											"const minutes = ('0' + today.getMinutes()).slice(-2);\r",
											"const seconds = ('0' + today.getSeconds()).slice(-2); \r",
											"const timeString = year + '-' + month  + '-' + day + \" \"+ hours + ':' + minutes  + ':' + seconds;\r",
											"\r",
											"//const serviceList = ['미지정','제모','시술코스','피부코스','초진지','차트지','반영구'];\r",
											"\r",
											"const randomNum = Math.floor(Math.random() * 24)+1;\r",
											"\r",
											"const imageUrl = \"C:/upload/\";\r",
											"const imageList = [];\r",
											"\r",
											"const forNum = 26;\r",
											"for(let i=1; i <= forNum; i++){\r",
											"        let str = imageUrl+'TestImage'+i+ '.jpg';\r",
											"        imageList.push(str)\r",
											"}\r",
											"const customImageList = [\r",
											"    '🥲.jpg',\r",
											"    '한글파일.jpg',\r",
											"    '!!!!!.jpg',\r",
											"    'test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'\r",
											"];\r",
											"\r",
											"for(index in customImageList){\r",
											"    imageList.push(imageUrl+customImageList[index])\r",
											"};\r",
											"const randomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
											"\r",
											"// pm.request.headers.add({key: \"Content-Type\", value: \"multipart/form-data\"});\r",
											"\r",
											"// pm.request.body = {\r",
											"//     mode: 'formdata',\r",
											"//     formdata: [\r",
											"//         { key: 'patNo', value: pm.collectionVariables.get('PAT_NO') },\r",
											"//         { key: 'penCtSn', value: '20240402_8' },\r",
											"//         { key: 'ctgrCd', value: 'CAT02' },\r",
											"//         { key: 'penCtCd', value: 'PEN016' },\r",
											"//         { key: 'penCtNm', value: '펜차트 수정 테스트' },\r",
											"//         { key: 'penCtMemo', value: '펜차트 수정' },\r",
											"//         { key: 'penCtImage', type: 'file', src: 'C:/upload/updateImage.jpg'}\r",
											"//     ]\r",
											"// };\r",
											"\r",
											"const updaterandomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
											"\r",
											"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
											"// newFormData.push({ key: 'patNo', value: pm.collectionVariables.get('PAT_NO') });\r",
											"newFormData.push({ key: 'penCtSn', value: pm.collectionVariables.get('PENCT_SN')});\r",
											"newFormData.push({ key: 'ctgrCd', value: pm.collectionVariables.get('CTGR_CD') });\r",
											"newFormData.push({ key: 'penCtCd', value: pm.collectionVariables.get('PENCT_CD') });\r",
											"newFormData.push({ key: 'penCtNm', value: pm.collectionVariables.get('PENCT_NM') });\r",
											"newFormData.push({ key: 'penCtMemo', value: 'testText / ' + timeString });\r",
											"newFormData.push({ key: 'penCtImage', type: 'file', src: updaterandomImage});\r",
											"\r",
											"pm.request.body.formdata = newFormData;\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penct/ptnt",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penct",
										"ptnt"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8.10 동의서 클릭시 템플릿 조회",
					"item": [
						{
							"name": "8.10 동의서 클릭시 템플릿 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"        'data':{\r",
											"            'type':'array',\r",
											"            'items': {\r",
											"                'properties': {\r",
											"                    'PAGE_NO': {'type': 'string'},\r",
											"                    'CNST_URL': {'type': 'string'},\r",
											"                    'COUNTLIST': {'type': 'integer'}\r",
											"                },\r",
											"            'required':['PAGE_NO','CNST_URL','COUNTLIST']\r",
											"            },\r",
											"        },\r",
											"    },\r",
											"    'required':['status','result','data']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql('성공');\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/cnst/{{CNST_SN}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"cnst",
										"{{CNST_SN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.10.1 오입력 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"        'data':{\r",
											"            'type':'array',\r",
											"            'properties':{\r",
											"                'CNST_IMG':{'type':'string'},\r",
											"                'PAGE_NO':{'type':'string'},\r",
											"            },\r",
											"            'required':['CNST_IMG','PAGE_NO']\r",
											"        },\r",
											"    },\r",
											"    'required':['status','result','data']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/cnst/{{CNST_SN}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"cnst",
										"{{CNST_SN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.10.2 미입력 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"        'data':{\r",
											"            'type':'array',\r",
											"            'properties':{\r",
											"                'CNST_IMG':{'type':'string'},\r",
											"                'PAGE_NO':{'type':'string'},\r",
											"            },\r",
											"            'required':['CNST_IMG','PAGE_NO']\r",
											"        },\r",
											"    },\r",
											"    'required':['status','result','data']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/cnst/{{CNST_SN}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"cnst",
										"{{CNST_SN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.10.3 변조토큰",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/cnst/{{CNST_SN}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"cnst",
										"{{CNST_SN}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "9.차트",
			"item": [
				{
					"name": "9.1 상품/패키지 조회",
					"item": [
						{
							"name": "9.1 상품/패키지 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const resData = Object.keys(resJson.data[0]) != [] ? Object.keys(resJson.data[0]) :[];\r",
											"\r",
											"const schema = {\r",
											"    'type' : 'object',\r",
											"    'properties' : {\r",
											"        'status' : {'type' : 'string'},\r",
											"        'result' : {'type' : 'string'},\r",
											"        'data' : {\r",
											"            'type' : 'array',\r",
											"            'properties' : Object.fromEntries(resData.map(prop => [\r",
											"                            prop, { 'type': ['string','null']}\r",
											"                        ])),\r",
											"                        'required': resData\r",
											"        },\r",
											"    },\r",
											"    'required' : ['status','result','data']\r",
											"}\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"    if(pm.response.code == 200){\r",
											"        pm.collectionVariables.set(\"PCKG_CD\", resJson.data[0].PCKG_CD);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/package",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"package"
									]
								}
							},
							"response": []
						},
						{
							"name": "9.1.1 변조토큰 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/package",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"package"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9.2 상담 저장",
					"item": [
						{
							"name": "9.2 상담 저장",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'multipart/form-data' });\r",
											"\r",
											"pm.request.body = {\r",
											"    'mode' : 'formdata',\r",
											"    'formdata' : [\r",
											"        {key:'patNo',value:pm.collectionVariables.get('PAT_NO')},\r",
											"        {key:'vistSn',value: pm.collectionVariables.get('VIST_SN')},\r",
											"        {key:'cnstRslt',value: pm.collectionVariables.get('CNST_RSLT')},\r",
											"        {key:'cnstId',value: 'F12'},\r",
											"        {key:'acptCfrId',value: '미지정'},\r",
											"        {key:'chrgDrId',value: pm.collectionVariables.get('USER_ID')},\r",
											"    ]\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties': {\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/cnst/update/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"cnst",
										"update",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "9.2.1 모든값 입력",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'multipart/form-data' });\r",
											"\r",
											"pm.request.body = {\r",
											"    'mode' : 'formdata',\r",
											"    'formdata' : [\r",
											"        {key:'patNo',value:pm.collectionVariables.get('PAT_NO')},\r",
											"        {key:'vistSn',value: pm.collectionVariables.get('VIST_SN')},\r",
											"        {key:'cnstRslt',value: pm.collectionVariables.get('CNST_RSLT')},\r",
											"        {key:'cnstMemo',value: '상담 테스트 메모'},\r",
											"        {key:'asstMemo',value: '어시 테스트 메모'},\r",
											"        {key:'cnstId',value: 'F12'},\r",
											"        {key:'acptCfrId',value: '미지정'},\r",
											"        {key:'chrgDrId',value: pm.collectionVariables.get('USER_ID')},\r",
											"        {key:'cnstCtgrDiv',value: '1/2'},\r",
											"        {key:'moprList',value: [\r",
											"            {key:'moprCd',value:pm.collectionVariables.get('MOPR_CD')},\r",
											"            {key:'moprNm',value:pm.collectionVariables.get('MOPR_NM')},\r",
											"            {key:'czCd',value:pm.collectionVariables.get('CZ_CD')},\r",
											"            {key:'itemCd',value:pm.collectionVariables.get('ITEM_CD')},\r",
											"            {key:'vatYn',value:'0'},\r",
											"            {key:'vat',value:'0'},\r",
											"            {key:'amt',value:'20000'},\r",
											"            {key:'addAmt',value:'0'},\r",
											"            {key:'dcTpCd',value:''},\r",
											"            {key:'dcAmt',value:'0'},\r",
											"            {key:'prchsQty',value:'1'},\r",
											"            {key:'useQty',value:'1'},\r",
											"            {key:'restQty',value:'1'},\r",
											"        ]},\r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties': {\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/cnst/update/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"cnst",
										"update",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "9.2.2 필수값 미입력",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'multipart/form-data' });\r",
											"\r",
											"pm.request.body = {\r",
											"    'mode' : 'formdata',\r",
											"    'formdata' : [\r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties': {\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql('400');\r",
											"    pm.expect(resJson.result).to.be.eql('필수 데이터 누락');\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/cnst/update/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"cnst",
										"update",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "9.2.3 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'multipart/form-data' });\r",
											"\r",
											"pm.request.body = {\r",
											"    'mode' : 'formdata',\r",
											"    'formdata' : [\r",
											"        {key:'patNo',value:pm.collectionVariables.get('PAT_NO')},\r",
											"        {key:'vistSn',value: pm.collectionVariables.get('VIST_SN')},\r",
											"        {key:'cnstRslt',value: pm.collectionVariables.get('CNST_RSLT')},\r",
											"        {key:'cnstId',value: 'F12'},\r",
											"        {key:'acptCfrId',value: '미지정'},\r",
											"        {key:'chrgDrId',value: pm.collectionVariables.get('USER_ID')},\r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/cnst/update/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"cnst",
										"update",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9.3 상담 조회",
					"item": [
						{
							"name": "9.3 상담 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": {\"type\": \"string\"},\r",
											"        \"result\": {\"type\": \"string\"},\r",
											"        \"data\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"cnst\": {\r",
											"                    \"type\": \"array\",\r",
											"                    \"items\": {\r",
											"                        \"typr\":'object',\r",
											"                        \"properties\": {\r",
											"                            \"VIST_SN\": {\"type\": \"string\"},\r",
											"                            \"CNST_DT\": {\"type\": \"string\"},\r",
											"                            \"STR_CNST_DD\": {\"type\": \"string\"},\r",
											"                            \"CNST_RSLT\": {\"type\": \"string\"},\r",
											"                            \"CNST_MEMO\": {\"type\": \"string\"},\r",
											"                            \"ASST_MEMO\": {\"type\": \"string\"},\r",
											"                            \"CNST_ID\": {\"type\": \"string\"},\r",
											"                            \"CNST_NM\": {\"type\": \"string\"},\r",
											"                            \"ACPT_CFR_NM\": {\"type\": \"string\"},\r",
											"                            \"CNST_RSLT_NM\": {\"type\": \"string\"},\r",
											"                            \"CNST_CTGR_DIV\": {\"type\": \"string\"}\r",
											"                        },\r",
											"                    \"required\": [\r",
											"                        \"VIST_SN\", \"CNST_DT\", \"STR_CNST_DD\", \"CNST_RSLT\", \"CNST_MEMO\", \r",
											"                        \"ASST_MEMO\", \"CNST_ID\", \"CNST_NM\", \"ACPT_CFR_NM\", \"CNST_RSLT_NM\", \"CNST_CTGR_DIV\"\r",
											"                        ]\r",
											"                    },\r",
											"                },\r",
											"                \"mopr\": {\r",
											"                    \"type\": \"array\",\r",
											"                    \"items\": {\r",
											"                        \"type\": \"object\",\r",
											"                        \"properties\": {\r",
											"                            \"MOPR_NO\": {\"type\": \"string\"},\r",
											"                            \"MOPR_CD\": {\"type\": \"string\"},\r",
											"                            \"MOPR_NM\": {\"type\": \"string\"},\r",
											"                            \"CZ_CD\": {\"type\": \"string\"},\r",
											"                            \"ITEM_CD\": {\"type\": \"string\"},\r",
											"                            \"VAT_YN\": {\"type\": \"string\"},\r",
											"                            \"VAT\": {\"type\": \"string\"},\r",
											"                            \"AMT\": {\"type\": \"string\"},\r",
											"                            \"ADD_AMT\": {\"type\": \"string\"},\r",
											"                            \"DC_TP_CD\": {\"type\": \"string\"},\r",
											"                            \"DC_AMT\": {\"type\": \"string\"},\r",
											"                            \"PRCHS_QTY\": {\"type\": \"string\"},\r",
											"                            \"USE_QTY\": {\"type\": \"string\"},\r",
											"                            \"DEL_YN\": {\"type\": \"string\"},\r",
											"                            \"RCPT_YN\": {\"type\": \"string\"},\r",
											"                            \"UNPRC\": {\"type\": \"string\"},\r",
											"                            \"MOPR_AMT\": {\"type\": \"string\"},\r",
											"                            \"MOPR_LDIV_CD\": {\"type\": \"string\"},\r",
											"                            \"MOPR_MDIV_CD\": {\"type\": \"string\"},\r",
											"                            \"MOPR_LDIV_NM\": {\"type\": \"string\"},\r",
											"                            \"MOPR_MDIV_NM\": {\"type\": \"string\"},\r",
											"                            \"ADT_DD\": {\"type\": \"string\"},\r",
											"                        },\r",
											"                        \"required\": [\r",
											"                            \"MOPR_NO\",\"MOPR_CD\", \"MOPR_NM\", \"CZ_CD\", \"ITEM_CD\", \r",
											"                            \"VAT_YN\", \"VAT\", \"AMT\", \"ADD_AMT\", \"DC_TP_CD\", \"DC_AMT\", \r",
											"                            \"PRCHS_QTY\", \"USE_QTY\", \"DEL_YN\", \"RCPT_YN\",\"UNPRC\",\"MOPR_AMT\", \r",
											"                            \"MOPR_LDIV_CD\", \"MOPR_MDIV_CD\", \"MOPR_LDIV_NM\", \"MOPR_MDIV_NM\", \"ADT_DD\"\r",
											"                        ]\r",
											"                    }\r",
											"                },\r",
											"                \"price\": {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                        \"TOT_MOPR_AMT\": {\"type\": [\"string\",'null']},\r",
											"                        \"TOT_VAT\": {\"type\": [\"string\",'null']},\r",
											"                        \"TOT_AMT\": {\"type\": [\"string\",'null']},\r",
											"                        \"TOT_ADD_AMT\": {\"type\": [\"string\",'null']},\r",
											"                        \"TOT_DC_AMT\": {\"type\": [\"string\",'null']},\r",
											"                        \"DC_TP_CD\": {\"type\": [\"string\",'null']},\r",
											"                    },\r",
											"                    \"required\": [\"TOT_MOPR_AMT\", \"TOT_VAT\", \"TOT_AMT\", \"TOT_ADD_AMT\", \"TOT_DC_AMT\", \"DC_TP_CD\"]\r",
											"                },\r",
											"            },\r",
											"            \"required\": [\"cnst\", \"mopr\", \"price\"]\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"status\", \"result\", \"data\"]\r",
											"};\r",
											"\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,210]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/cnst/{{PAT_NO}}/?vistSn={{VIST_SN}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"cnst",
										"{{PAT_NO}}",
										""
									],
									"query": [
										{
											"key": "vistSn",
											"value": "{{VIST_SN}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9.3.1 오입력 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"result\": { \"type\": \"string\" },\r",
											"        \"data\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"cnst\": {\r",
											"                    \"type\": \"array\",\r",
											"                    \"items\": {\r",
											"                        \"type\": \"object\",\r",
											"                        \"properties\": {\r",
											"                            \"VIST_SN\": { \"type\": \"string\" },\r",
											"                            \"CNST_DT\": { \"type\": \"string\" },\r",
											"                            \"STR_CNST_DD\": { \"type\": \"string\" },\r",
											"                            \"CNST_RSLT\": { \"type\": \"string\" },\r",
											"                            \"CNST_MEMO\": { \"type\": \"string\" },\r",
											"                            \"ASST_MEMO\": { \"type\": \"string\" },\r",
											"                            \"CNST_ID\": { \"type\": \"string\" },\r",
											"                            \"CNST_NM\": { \"type\": \"string\" },\r",
											"                            \"ACPT_CFR_NM\": { \"type\": \"string\" },\r",
											"                            \"CNST_RSLT_NM\": { \"type\": \"string\" },\r",
											"                            \"CNST_CTGR_DIV\": { \"type\": \"string\" }\r",
											"                        },\r",
											"                        \"required\": [\r",
											"                            \"VIST_SN\", \"CNST_DT\", \"STR_CNST_DD\", \"CNST_RSLT\", \"CNST_MEMO\",\r",
											"                            \"ASST_MEMO\", \"CNST_ID\", \"CNST_NM\", \"ACPT_CFR_NM\", \"CNST_RSLT_NM\", \"CNST_CTGR_DIV\"\r",
											"                        ]\r",
											"                    }\r",
											"                },\r",
											"                \"mopr\": { \"type\": \"array\" },\r",
											"                \"price\": {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                        \"TOT_MOPR_AMT\": { \"type\": [\"string\", 'null'] },\r",
											"                        \"TOT_VAT\": { \"type\": [\"string\", 'null'] },\r",
											"                        \"TOT_AMT\": { \"type\": [\"string\", 'null'] },\r",
											"                        \"TOT_ADD_AMT\": { \"type\": [\"string\", 'null'] },\r",
											"                        \"TOT_DC_AMT\": { \"type\": [\"string\", 'null'] },\r",
											"                        \"DC_TP_CD\": { \"type\": [\"string\", 'null'] }\r",
											"                    },\r",
											"                    \"required\": [\"TOT_MOPR_AMT\", \"TOT_VAT\", \"TOT_AMT\", \"TOT_ADD_AMT\", \"TOT_DC_AMT\", \"DC_TP_CD\"]\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\"cnst\", \"mopr\", \"price\"]\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"status\", \"result\", \"data\"]\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/cnst/{{PAT_NO}}/?vistSn=ERROR",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"cnst",
										"{{PAT_NO}}",
										""
									],
									"query": [
										{
											"key": "vistSn",
											"value": "ERROR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9.3.2 미입력 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,210]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/cnst/{{PAT_NO}}/?vistSn=",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"cnst",
										"{{PAT_NO}}",
										""
									],
									"query": [
										{
											"key": "vistSn",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9.3.3 파라미터 변경 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': { \r",
											"            'type': 'object',\r",
											"            'properties':{\r",
											"                'cnst' : {'type':'array'},\r",
											"                'mopr' : {'type':'array'},\r",
											"                'price' : {'type':'array'}\r",
											"            },\r",
											"            'required': ['cnst','mopr','price']\r",
											"        },\r",
											"    },\r",
											"    'required': ['status','result','data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,210]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson.data.cnst).to.be.empty;\r",
											"    pm.expect(resJson.data.mopr).to.be.empty;\r",
											"    pm.expect(resJson.data.price).to.be.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/cnst/{{PAT_NO}}123/?vistSn={{VIST_SN}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"cnst",
										"{{PAT_NO}}123",
										""
									],
									"query": [
										{
											"key": "vistSn",
											"value": "{{VIST_SN}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9.3.4 변조토큰",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/cnst/{{PAT_NO}}/?vistSn={{VIST_SN}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"cnst",
										"{{PAT_NO}}",
										""
									],
									"query": [
										{
											"key": "vistSn",
											"value": "{{VIST_SN}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9.5 패키지 시술 조회",
					"item": [
						{
							"name": "9.5 패키지 시술 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"'type':'object',",
											"    'properties':{",
											"        'status':{'type':'string'},",
											"        'result':{'type':'string'},",
											"        'data': {",
											"            'type':'array',",
											"            'items': {",
											"                'type':'object',",
											"                'properties':{",
											"                    'PCKG_CD':{'type':'string'},",
											"                    'MOPR_CD':{'type':'string'},",
											"                    'MOPR_NM':{'type':'string'},",
											"                    'MOPR_LDIV_CD':{'type':'string'},",
											"                    'MOPR_MDIV_CD':{'type':'string'},",
											"                    'MOPR_LDIV_NM':{'type':'string'},",
											"                    'MOPR_MDIV_NM':{'type':'string'},",
											"                    'CZ_CD':{'type':'string'},",
											"                    'ITEM_CD':{'type':'string'},",
											"                    'ADT_DD':{'type':'string'},",
											"                    'VAT_YN':{'type':'string'},",
											"                    'VAT':{'type':'string'},",
											"                    'UNPRC':{'type':'string'},",
											"                },",
											"            'required':[",
											"                'PCKG_CD','MOPR_CD','MOPR_NM','MOPR_LDIV_CD','MOPR_MDIV_CD','MOPR_LDIV_NM',",
											"                'MOPR_MDIV_NM','CZ_CD','ITEM_CD','ADT_DD','VAT_YN','VAT','UNPRC'",
											"                ]",
											"            }",
											"        }",
											"    },",
											"    required:['status','result','data']",
											"}",
											"",
											"const resJson = pm.response.json();",
											"",
											"pm.test('Check server status', function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,210]);",
											"    if(pm.response.code == 200){",
											"        pm.collectionVariables.set('MOPR_NM', resJson.data[0].MOPR_NM)",
											"    }",
											"});",
											"",
											"pm.test(\"Check returned JSON\", () =>{",
											"    pm.response.to.be.json;",
											"    pm.expect(resJson).to.be.not.empty;",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);",
											"    pm.response.to.have.jsonSchema(schema);",
											"})",
											"",
											"pm.test(\"Check response time\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); ",
											"});",
											"",
											"pm.test(\"Check HTTPS protocol usage\", function() {",
											"    pm.expect(pm.request.url).to.match(/^https:/);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/chart/package/{{PCKG_CD}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"package",
										"{{PCKG_CD}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9.5.1 오입력 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"    'type': 'object',",
											"    'properties': {",
											"        'status': { 'type': 'string' },",
											"        'result': { 'type': 'string' },",
											"    },",
											"    'required': ['status','result']",
											"};",
											"",
											"const resJson = pm.response.json();",
											"",
											"pm.test(\"Check server status\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned JSON\", () =>{",
											"    pm.response.to.be.json;",
											"    pm.expect(resJson).to.be.not.empty;",
											"    pm.expect(resJson.status).to.equals(\"210\");",
											"    pm.expect(resJson.result).to.equals(\"데이터 없음\");",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Check response time\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/chart/package/{{PCKG_CD}}12",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"package",
										"{{PCKG_CD}}12"
									]
								}
							},
							"response": []
						},
						{
							"name": "9.5.2 변조토큰",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test('Check server status', function () {",
											"    pm.expect(pm.response.code).to.be.eql(500);",
											"});",
											"",
											"pm.test(\"Check response time\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/chart/package/{{PCKG_CD}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"package",
										"{{PCKG_CD}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9.6 등록 시술 조회",
					"item": [
						{
							"name": "9.6.2 미입력 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"400\");\r",
											"    pm.expect(resJson.result).to.equals(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/ptnt/package/?moprNm=",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"ptnt",
										"package",
										""
									],
									"query": [
										{
											"key": "moprNm",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9.6.3 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// pm.request.addQueryParams({ key: 'moprNm', value: pm.collectionVariables.get('MOPR_NM') });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/ptnt/package/?moprNm={{MOPR_NM}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"ptnt",
										"package",
										""
									],
									"query": [
										{
											"key": "moprNm",
											"value": "{{MOPR_NM}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9.6 등록 시술 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// pm.request.addQueryParams({ key: 'moprNm', value: pm.collectionVariables.get('MOPR_NM') });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"        'data':{\r",
											"            'type':'array',\r",
											"            'items':{\r",
											"                'type': 'object',\r",
											"                'properties':{\r",
											"                    'MOPR_CD':{'type':'string'},\r",
											"                    'MOPR_NM':{'type':'string'},\r",
											"                    'MOPR_LDIV_CD':{'type':'string'},\r",
											"                    'MOPR_MDIV_CD':{'type':'string'},\r",
											"                    'MOPR_LDIV_NM':{'type':'string'},\r",
											"                    'MOPR_MDIV_NM':{'type':'string'},\r",
											"                    'CZ_CD':{'type':'string'},\r",
											"                    'ITEM_CD':{'type':'string'},\r",
											"                    'ADT_DD':{'type':'string'},\r",
											"                    'VAT_YN':{'type':'string'},\r",
											"                    'VAT':{'type':'string'},\r",
											"                    'UNPRC':{'type':'string'},\r",
											"                },\r",
											"            }\r",
											"        },\r",
											"    },\r",
											"    required:['status','result','data']\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    // pm.expect(pm.response.code).to.be.oneOf(200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.oneOf([\"200\",'210']);\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/ptnt/package/?moprNm={{MOPR_NM}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"ptnt",
										"package",
										""
									],
									"query": [
										{
											"key": "moprNm",
											"value": "{{MOPR_NM}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9.6.1 오입력 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"    },\r",
											"    'required': ['status','result']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Check server status\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.equals(\"210\");\r",
											"    pm.expect(resJson.result).to.equals(\"데이터 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/chart/ptnt/package/?moprNm={{MOPR_NM}}12",
									"host": [
										"{{domain}}"
									],
									"path": [
										"chart",
										"ptnt",
										"package",
										""
									],
									"query": [
										{
											"key": "moprNm",
											"value": "{{MOPR_NM}}12"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "10.진료사진",
			"item": [
				{
					"name": "10.1 진료사진 조회",
					"item": [
						{
							"name": "10.1 진료사진 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const userData =  resJson.data.length > 0 ? Object.keys(resJson.data[0]) : null;\r",
											"const seqCount = resJson.data;\r",
											"const seqList = [];\r",
											"for(count in seqCount){\r",
											"    seqList.push(seqCount[count].SEQ)\r",
											"}\r",
											"\r",
											"let schema ={};\r",
											"if(resJson.data.length > 0){\r",
											"    schema = {\r",
											"        'type': 'object',\r",
											"        'properties': {\r",
											"            'status': {'type': 'string'},\r",
											"            'result': {'type': 'string'},\r",
											"            'data': {\r",
											"                'type': 'array',\r",
											"                'items': {\r",
											"                    'type': 'object',\r",
											"                    'properties': {\r",
											"                        \"PAT_NO\": {'type': 'string'},\r",
											"                        \"SEQ\": {'type': 'string'},\r",
											"                        \"MEMO_TXT\": {'type': 'string'},\r",
											"                        \"IMAGE_TITLE\": {'type': 'string'},\r",
											"                        \"SERVICES\": {'type': 'string'},\r",
											"                        \"IMAGE_URL\": {'type': 'string'},\r",
											"                        \"DATETIME\": {'type': 'string'},\r",
											"                    },\r",
											"                    'required': userData,\r",
											"                },\r",
											"            },\r",
											"        },\r",
											"        'required': ['status', 'result', 'data']\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.expect(resJson.data).to.be.not.empty;\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/penmemo/?patNo={{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo",
										""
									],
									"query": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10.1.1 오입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded : {}\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const userData =  Object.keys(resJson.data);\r",
											"\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': {'type': 'string'},\r",
											"        'result': {'type': 'string'},\r",
											"        'data': {'type': 'array',},\r",
											"    },\r",
											"    'required': ['status', 'result', 'data']\r",
											"}\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"210\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"데이터 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/penmemo/?patNo={{PAT_NO}}121211",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo",
										""
									],
									"query": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}121211"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10.1.2 미입력 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"const userData =  Object.keys(resJson.data);\r",
											"\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': {'type': 'string'},\r",
											"        'result': {'type': 'string'},\r",
											"        'data': {'type': 'array',},\r",
											"    },\r",
											"    'required': ['status', 'result', 'data']\r",
											"}\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"210\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"데이터 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{domain}}/penmemo",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.1.3 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/penmemo/?patNo={{PAT_NO}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo",
										""
									],
									"query": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "10.2 진료사진 저장",
					"item": [
						{
							"name": "10.2 진료사진 저장 및 조회",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }\r",
											"}\r",
											"const resJson = pm.response.json();\r",
											"const seqList = [];\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});\r",
											"\r",
											"if(resJson.status === \"200\"){\r",
											"    const requestConfig = {\r",
											"        url: pm.environment.get('domain') + '/penmemo/?patNo=' + pm.collectionVariables.get('PAT_NO'),\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Authorization': 'Bearer ' + pm.environment.get('accessToken') // \r",
											"        },\r",
											"    };\r",
											"\r",
											"    pm.sendRequest(requestConfig, function (err, res) {\r",
											"        if (err) {\r",
											"            console.error(err); \r",
											"            return;\r",
											"        }\r",
											"        const resData = res.json().data;\r",
											"        const comparisonData = [];\r",
											"        resData.map((count) => { seqList.push(count.SEQ) });\r",
											"        const seqLast = Math.max(...seqList).toString();\r",
											"        for (let i = 0; i < resData.length; i++) {\r",
											"            if (resData[i].SEQ === seqLast) {\r",
											"                comparisonData.push(resData[i])\r",
											"            }\r",
											"        }\r",
											"        pm.test('Save data compare select', ()=> {\r",
											"            pm.expect(comparisonData).to.be.not.empty;\r",
											"            pm.expect(comparisonData[0].MEMO_TEXT).to.be.eql(pm.collectionVariables.get('MEMO_TEXT'))\r",
											"            pm.expect(comparisonData[0].IMAGE_TITLE).to.be.eql(pm.collectionVariables.get('IMAGE_TITLE'))\r",
											"            pm.expect(comparisonData[0].SERVICES).to.be.eql(pm.collectionVariables.get('randomService'))\r",
											"        });\r",
											"        pm.collectionVariables.set('IMAGE_SEQ',seqLast);\r",
											"    }); \r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const today = new Date();\r",
											"const year = today.getFullYear();\r",
											"const month = ('0' + (today.getMonth() + 1)).slice(-2);\r",
											"const day = ('0' + today.getDate()).slice(-2);\r",
											"const hours = ('0' + today.getHours()).slice(-2); \r",
											"const minutes = ('0' + today.getMinutes()).slice(-2);\r",
											"const seconds = ('0' + today.getSeconds()).slice(-2); \r",
											"const timeString = year + '-' + month  + '-' + day + \" \"+ hours + ':' + minutes  + ':' + seconds;\r",
											"\r",
											"\r",
											"const serviceList = ['필러','보톡스','보톡스,필러'];\r",
											"const randomNum = Math.floor(Math.random() * 21)+1;\r",
											"const imageUrl = \"C:/works/apiTest/image/\";\r",
											"const forNum = 21;\r",
											"\r",
											"const imageList = [];\r",
											"for(let i=1; i <= forNum; i++){\r",
											"        let str = imageUrl+'TestImage'+i+ '.jpg';\r",
											"        imageList.push(str)\r",
											"}\r",
											"\r",
											"const customImageList = [\r",
											"    '🥲.jpg',\r",
											"    '한글파일.jpg',\r",
											"    '!!!!!.jpg',\r",
											"    'test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'\r",
											"];\r",
											"\r",
											"for(index in customImageList){\r",
											"    imageList.push(imageUrl+customImageList[index])\r",
											"};\r",
											"\r",
											"const randomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
											"const randomService = serviceList[Math.floor(Math.random() * serviceList.length)];\r",
											"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
											"newFormData.push({ key: 'memoTxt', value: 'testText/' + timeString });\r",
											"newFormData.push({ key: 'imageTitle', value:'imageTitle/' + timeString });\r",
											"newFormData.push({ key: 'services', value: randomService});\r",
											"newFormData.push({ key: 'memoImage', type: 'file', src: randomImage});\r",
											"\r",
											"pm.collectionVariables.set('MEMO_TXT', newFormData[1].value);\r",
											"pm.collectionVariables.set('IMAGE_TITLE', newFormData[2].value);\r",
											"pm.collectionVariables.set('randomService',randomService);\r",
											"\r",
											"pm.request.body.formdata = newFormData;\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penmemo",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.2.1 필수값 미입력 저장",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'formdata',\r",
											"    formdata : [\r",
											"        {key: 'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
											"        {key: 'memoTxt', value: ''},\r",
											"        {key: 'imageTitle', value:''},\r",
											"        {key: 'services', value:''},\r",
											"        {key: 'memoImage', value:'C:/works/apiTest/image/'}\r",
											"    ]\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }\r",
											"}\r",
											"const resJson = pm.response.json()\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.have.eql(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penmemo",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.2.2 이미지 미존재",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'formdata',\r",
											"    formdata : [\r",
											"        {key: 'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
											"        {key: 'memoTxt', value: '진료사진 상세'},\r",
											"        {key: 'imageTitle', value:'진료사진 1'},\r",
											"        {key: 'services', value:'보톡스'},\r",
											"        {key: 'memoImage', value:'C:/works/apiTest/image/'}\r",
											"    ]\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }\r",
											"}\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.eql(\"500\");\r",
											"    pm.expect(resJson.result).to.have.eql(\"메모 이미지 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penmemo",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.2.3 대용량 사진 저장",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'formdata',\r",
											"    formdata : [\r",
											"        {key: 'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
											"        {key: 'memoTxt', value: 'test'},\r",
											"        {key: 'imageTitle', value:'테스트 타이틀'},\r",
											"        {key: 'services', value:'보톡스'},\r",
											"        {key: 'memoImage', type:'file' ,src:'C:/works/apiTest/image/대용량.jpg'}\r",
											"    ]\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }\r",
											"}\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Check returned JSON', function () {\r",
											"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penmemo",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.2.4 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const today = new Date();\r",
											"const year = today.getFullYear();\r",
											"const month = ('0' + (today.getMonth() + 1)).slice(-2);\r",
											"const day = ('0' + today.getDate()).slice(-2);\r",
											"const hours = ('0' + today.getHours()).slice(-2); \r",
											"const minutes = ('0' + today.getMinutes()).slice(-2);\r",
											"const seconds = ('0' + today.getSeconds()).slice(-2); \r",
											"const timeString = year + '-' + month  + '-' + day + \" \"+ hours + ':' + minutes  + ':' + seconds;\r",
											"\r",
											"\r",
											"const serviceList = ['필러','보톡스','필러,보톡스'];\r",
											"const randomNum = Math.floor(Math.random() * 21)+1;\r",
											"const imageUrl = \"C:/works/apiTest/image/\";\r",
											"const forNum = 26;\r",
											"\r",
											"const imageList = [];\r",
											"for(let i=1; i <= forNum; i++){\r",
											"        let str = imageUrl+'TestImage'+i+ '.jpg';\r",
											"        imageList.push(str)\r",
											"}\r",
											"\r",
											"const customImageList = [\r",
											"    '🥲.jpg',\r",
											"    '한글파일.jpg',\r",
											"    '!!!!!.jpg',\r",
											"    'test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'\r",
											"];\r",
											"\r",
											"for(index in customImageList){\r",
											"    imageList.push(imageUrl+customImageList[index])\r",
											"};\r",
											"\r",
											"const randomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
											"const randomService = serviceList[Math.floor(Math.random() * serviceList.length)];\r",
											"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
											"newFormData.push({ key: 'memoTxt', value: 'testText / ' + timeString });\r",
											"newFormData.push({ key: 'imageTitle', value:'imageTitle / ' + timeString });\r",
											"newFormData.push({ key: 'services', value: randomService});\r",
											"newFormData.push({ key: 'memoImage', type: 'file', src: randomImage});\r",
											"\r",
											"pm.collectionVariables.set('imageTimeString', timeString)\r",
											"pm.collectionVariables.set('randomService',randomService)\r",
											"\r",
											"\r",
											"\r",
											"pm.request.body.formdata = newFormData;\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penmemo",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "10.3 진료사진 수정",
					"item": [
						{
							"name": "10.3 진료사진 수정 및 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const today = new Date();\r",
											"\r",
											"const year = today.getFullYear();\r",
											"const month = ('0' + (today.getMonth() + 1)).slice(-2);\r",
											"const day = ('0' + today.getDate()).slice(-2);\r",
											"const hours = ('0' + today.getHours()).slice(-2); \r",
											"const minutes = ('0' + today.getMinutes()).slice(-2);\r",
											"const seconds = ('0' + today.getSeconds()).slice(-2); \r",
											"const timeString = year + '-' + month  + '-' + day + \" \"+ hours + ':' + minutes  + ':' + seconds;\r",
											"\r",
											"const serviceList = ['필러','보톡스','보톡스,필러'];\r",
											"const imageUrl = \"C:/works/apiTest/image/updateImage/\"\r",
											"const forNum = 11;\r",
											"\r",
											"const imageList = [];\r",
											"for(let i=1; i <= forNum; i++){\r",
											"        let str = `${imageUrl}updateImage${i}.jpg`;\r",
											"        imageList.push(str)\r",
											"}\r",
											"\r",
											"const customImageList = [\r",
											"    '🥲.jpg',\r",
											"    '한글파일.jpg',\r",
											"    '!!!!!.jpg',\r",
											"    'test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'\r",
											"];\r",
											"\r",
											"for(index in customImageList){\r",
											"    imageList.push(imageUrl+customImageList[index])\r",
											"}\r",
											"\r",
											"const randomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
											"const randomService = serviceList[Math.floor(Math.random() * serviceList.length)];\r",
											"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
											"newFormData.push({ key: 'memoTxt', value: 'updateText : ' + timeString });\r",
											"newFormData.push({ key: 'imageTitle', value:'updateTitle : ' + timeString });\r",
											"newFormData.push({ key: 'services', value: randomService});\r",
											"newFormData.push({ key: 'memoImage', type: 'file', src: randomImage});\r",
											"newFormData.push({ key: 'seq', value: pm.collectionVariables.get('IMAGE_SEQ')});\r",
											"\r",
											"pm.collectionVariables.set('MEMO_TXT', newFormData[1].value);\r",
											"pm.collectionVariables.set('IMAGE_TITLE', newFormData[2].value);\r",
											"pm.collectionVariables.set('randomService',randomService);\r",
											"\r",
											"pm.request.body.formdata = newFormData;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"pm.test(\"Check HTTPS protocol usage\", function() {\r",
											"    pm.expect(pm.request.url).to.match(/^https:/);\r",
											"});\r",
											"\r",
											"if(resJson.status === \"200\"){\r",
											"    const requestConfig = {\r",
											"        url: pm.environment.get('domain') + '/penmemo/?patNo=' + pm.collectionVariables.get('PAT_NO'),\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Authorization': 'Bearer ' + pm.environment.get('accessToken') // \r",
											"        },\r",
											"    };\r",
											"\r",
											"    pm.sendRequest(requestConfig, function (err, res) {\r",
											"        if (err) {\r",
											"            console.error(err); \r",
											"            return;\r",
											"        }\r",
											"        const resData = res.json().data.map((item)=> item.SEQ);\r",
											"        const seqLast = Math.max(...resData).toString();\r",
											"        const comparisonData = res.json().data.filter((item) => item.SEQ === seqLast);\r",
											"\r",
											"        pm.test('Save data compare select', ()=> {\r",
											"            pm.expect(comparisonData).to.be.not.empty;\r",
											"            pm.expect(comparisonData[0].MEMO_TEXT).to.be.eql(pm.collectionVariables.get('MEMO_TEXT'))\r",
											"            pm.expect(comparisonData[0].IMAGE_TITLE).to.be.eql(pm.collectionVariables.get('IMAGE_TITLE'))\r",
											"            pm.expect(comparisonData[0].SERVICES).to.be.eql(pm.collectionVariables.get('randomService'))\r",
											"        });\r",
											"    }); \r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penmemo/update",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.3.1 필수값 미입력 수정",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'multipart/form-data'});\r",
											"\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'formdata',\r",
											"    formdata : [\r",
											"        {key:'patNo', value: ''}, \r",
											"        {key:'memoTxt', value:''}, \r",
											"        {key:'imageTitle', value:''}, \r",
											"        {key:'services', value:''}, \r",
											"        {key:'seq', value:''}, \r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }\r",
											"}\r",
											"const resJson = pm.response.json();\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.have.eql(\"필수 데이터 누락3\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/penmemo/update",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.3.2 이미지 미존재 수정",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'multipart/form-data'});\r",
											"\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'formdata',\r",
											"    formdata : [\r",
											"        {key:'memoTxt', value:'업데이트 메모'}, \r",
											"        {key:'imageTitle', value:'업데이트 타이틀'}, \r",
											"        {key:'services', value:'필터'}, \r",
											"        {key:'memoImage', type:'file', src:'memoImage'}, \r",
											"        {key:'seq', value:'C:/works/apiTest/image/updateImage'}, \r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }\r",
											"}\r",
											"const resJson = pm.response.json();\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.have.eql(\"필수 데이터 누락3\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penmemo/update",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.3.3 대용량 사진 수정",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'formdata',\r",
											"    formdata : [\r",
											"        {key: 'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
											"        {key: 'memoTxt', value: 'test'},\r",
											"        {key: 'imageTitle', value:'테스트 타이틀'},\r",
											"        {key: 'services', value:'보톡스'},\r",
											"        {key: 'memoImage', type:'file' ,src:'C:/works/apiTest/image/대용량.jpg'},\r",
											"        {key: 'seq', value:pm.collectionVariables.get(\"IMAGE_SEQ\")},\r",
											"    ]\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();\r",
											"\r",
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락3\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penmemo/update",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.3.4 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const today = new Date();\r",
											"\r",
											"const year = today.getFullYear();\r",
											"const month = ('0' + (today.getMonth() + 1)).slice(-2);\r",
											"const day = ('0' + today.getDate()).slice(-2);\r",
											"const hours = ('0' + today.getHours()).slice(-2); \r",
											"const minutes = ('0' + today.getMinutes()).slice(-2);\r",
											"const seconds = ('0' + today.getSeconds()).slice(-2); \r",
											"const timeString = year + '-' + month  + '-' + day + \" \"+ hours + ':' + minutes  + ':' + seconds;\r",
											"\r",
											"const serviceList = ['필러','보톡스','보톡스,필러'];\r",
											"const imageUrl = \"C:/works/apiTest/image/updateImage\"\r",
											"const forNum = 14;\r",
											"\r",
											"const imageList = [];\r",
											"for(let i=1; i <= forNum; i++){\r",
											"        let str = imageUrl+'updateImage'+i+ '.jpg';\r",
											"        imageList.push(str)\r",
											"}\r",
											"\r",
											"const customImageList = [\r",
											"    '🥲.jpg',\r",
											"    '한글파일.png',\r",
											"    '!!!!!.png',\r",
											"    'test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'\r",
											"];\r",
											"\r",
											"for(index in customImageList){\r",
											"    imageList.push(imageUrl+customImageList[index])\r",
											"}\r",
											"\r",
											"\r",
											"const randomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
											"const randomService = serviceList[Math.floor(Math.random() * serviceList.length)];\r",
											"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
											"newFormData.push({ key: 'memoTxt', value: 'updateText : ' + timeString });\r",
											"newFormData.push({ key: 'imageTitle', value:'updateTitle : ' + timeString });\r",
											"newFormData.push({ key: 'services', value: randomService});\r",
											"newFormData.push({ key: 'memoImage', type: 'file', src: randomImage});\r",
											"newFormData.push({ key: 'seq', value: pm.collectionVariables.get('IMAGE_SEQ')});\r",
											"\r",
											"\r",
											"pm.collectionVariables.set('imageTimeString', timeString)\r",
											"pm.collectionVariables.set('randomService',randomService)\r",
											"\r",
											"\r",
											"pm.request.body.formdata = newFormData;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patNo",
											"value": "{{PAT_NO}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/penmemo/update",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "10.4 진료사진 삭제",
					"item": [
						{
							"name": "10.4 진료사진 삭제",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'formdata',\r",
											"    formdata : [\r",
											"        {key:'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
											"        {key:'seq', value:pm.collectionVariables.get('IMAGE_SEQ')},\r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }\r",
											"}\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.eql(\"200\");\r",
											"    pm.expect(resJson.result).to.have.eql(\"성공\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											"\r",
											"if(resJson.status === \"200\"){\r",
											"    const requestConfig = {\r",
											"        url: pm.environment.get('domain') + '/penmemo/?patNo=' + pm.collectionVariables.get('PAT_NO'),\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Authorization': 'Bearer ' + pm.environment.get('accessToken') // \r",
											"        },\r",
											"    };\r",
											"\r",
											"    pm.sendRequest(requestConfig, function (err, res) {\r",
											"        if (err) {\r",
											"            console.error(err); \r",
											"            return;\r",
											"        }\r",
											"        const resData = res.json().data.map((item)=> item.SEQ);\r",
											"        const seqLast = Math.max(...resData).toString();\r",
											"        const comparisonData = res.json().data.filter((item) => item.SEQ === seqLast);\r",
											"\r",
											"        pm.test('Save data compare select', ()=> {\r",
											"            pm.expect(comparisonData[0].SEQ).to.be.eql(seqLast);\r",
											"        });\r",
											"    }); \r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/penmemo/delete",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo",
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.4.1 필수값 미입력 삭제",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'formdata',\r",
											"    formdata : [\r",
											"        {key:'patNo', value: pm.collectionVariables.get('PAT_NO')}, \r",
											"        {key:'seq', value:''},\r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }\r",
											"}\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.have.eql(\"400\");\r",
											"    pm.expect(resJson.result).to.have.eql(\"필수 데이터 누락\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/penmemo/delete",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo",
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.4.2 사진 삭제 후 수정",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'multipart/form-data'});\r",
											"\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'formdata',\r",
											"    formdata : [\r",
											"        {key:'patNo', value:pm.collectionVariables.get('PAT_NO')}, \r",
											"        {key:'memoTxt', value:'업데이트 메모'}, \r",
											"        {key:'imageTitle', value:'업데이트 타이틀'}, \r",
											"        {key:'services', value:'필터'}, \r",
											"        {key:'memoImage', type:'file', src:'C:/works/apiTest/image/test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'}, \r",
											"        {key:'seq', value:pm.collectionVariables.get('IMAGE_SEQ')},\r",
											"    ]\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type':'object',\r",
											"    'properties':{\r",
											"        'status':{'type':'string'},\r",
											"        'result':{'type':'string'},\r",
											"    }\r",
											"}\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"\r",
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check returned JSON\", () =>{\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(resJson).to.be.not.empty;\r",
											"    pm.expect(resJson.status).to.be.eql(\"500\");\r",
											"    pm.expect(resJson.result).to.be.eql(\"메모 정보 없음\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{domain}}/penmemo/update",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.4.3 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    mode : 'formdata',\r",
											"    formdata : [\r",
											"        {key:'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
											"        {key:'seq', value:pm.collectionVariables.get('IMAGE_SEQ')},\r",
											"    ]\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check server status', function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{domain}}/penmemo/delete",
									"host": [
										"{{domain}}"
									],
									"path": [
										"penmemo",
										"delete"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "MOBILE_NO",
			"value": ""
		},
		{
			"key": "PAT_JNO",
			"value": ""
		},
		{
			"key": "ADDR",
			"value": ""
		},
		{
			"key": "PAT_NO",
			"value": ""
		},
		{
			"key": "PAT_NM",
			"value": ""
		},
		{
			"key": "PAT_BTH",
			"value": ""
		},
		{
			"key": "VIST_SN",
			"value": ""
		},
		{
			"key": "CNST_SN",
			"value": ""
		},
		{
			"key": "MOPR_NM",
			"value": ""
		},
		{
			"key": "PCKG_CD",
			"value": ""
		},
		{
			"key": "CTGR_CD",
			"value": ""
		},
		{
			"key": "PENCT_CD",
			"value": ""
		},
		{
			"key": "PENCT_NM",
			"value": ""
		},
		{
			"key": "SERVICES",
			"value": ""
		},
		{
			"key": "randomService",
			"value": ""
		},
		{
			"key": "USER_ID",
			"value": ""
		},
		{
			"key": "USER_NAME",
			"value": ""
		},
		{
			"key": "CNST_RSLT",
			"value": ""
		},
		{
			"key": "PAT_GRD_CD",
			"value": ""
		},
		{
			"key": "VST_PTH_CD",
			"value": ""
		},
		{
			"key": "DIAG_FLD_CD",
			"value": ""
		},
		{
			"key": "DIAG_TP_CD",
			"value": ""
		},
		{
			"key": "MOPR_TP_CD",
			"value": ""
		},
		{
			"key": "CDMOPR",
			"value": ""
		},
		{
			"key": "PRGR_STAT_CD",
			"value": ""
		},
		{
			"key": "PEN_CTGR_CD",
			"value": ""
		},
		{
			"key": "MOPR_MDIV_CD",
			"value": ""
		},
		{
			"key": "MOPR_LDIV_CD",
			"value": ""
		},
		{
			"key": "CNST_CTGR_CD",
			"value": ""
		},
		{
			"key": "CARD_PAY_TP_CD",
			"value": ""
		},
		{
			"key": "PAT_KND_CD",
			"value": ""
		},
		{
			"key": "IMGAE_CATE",
			"value": ""
		},
		{
			"key": "ETC_PAY_TP_CD",
			"value": ""
		},
		{
			"key": "CZ_CD",
			"value": ""
		},
		{
			"key": "ITEM_CD",
			"value": ""
		},
		{
			"key": "MEMO_TXT",
			"value": ""
		},
		{
			"key": "IMAGE_TITLE",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "IMAGE_SEQ",
			"value": ""
		},
		{
			"key": "imageTimeString",
			"value": ""
		},
		{
			"key": "PENCT_SN",
			"value": ""
		},
		{
			"key": "todayString",
			"value": ""
		},
		{
			"key": "PENCT_MEMO",
			"value": ""
		}
	]
}