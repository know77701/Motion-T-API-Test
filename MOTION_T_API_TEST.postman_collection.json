{
	"info": {
		"_postman_id": "20f33fd7-7ec9-49da-8743-20687545ecf3",
		"name": "MOTION T API TEST",
		"description": "# 필수 설치\n\nNode.js 다운로드\n\n[https://nodejs.org/en/download](https://nodejs.org/en/download)\n\n# API\n\nMOTION_T API TEST v.1.0.0\n\n2024.03.26 \\~ 2024.05.08\n\n- newman 설치 > 완료\n    \n- jenkins 설치 > 완료\n    \n    - 로컬 slack 알림 > 완료\n        \n- google cloud 연동\n    \n    - jenkins 설치\n        \n    - slack 알림 연동\n        \n\n---\n\nMOTION_T API TEST v.1.0.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24827265",
		"_collection_link": "https://triupqa.postman.co/workspace/triup_QA-Workspace~82c3f0c6-65e5-4474-b313-9de92c879709/collection/24827265-20f33fd7-7ec9-49da-8743-20687545ecf3?action=share&source=collection_link&creator=24827265"
	},
	"item": [
		{
			"name": "상용",
			"item": [
				{
					"name": "1.요양기관번호",
					"item": [
						{
							"name": "공통코드조회",
							"item": [
								{
									"name": "1.0.1 고객종류 / 0014",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.1 고객종류\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0014",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0014"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.2 내원경로 / 0016",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.2 내원경로\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0016",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0016"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.3 진료분야 / 0017",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.3 진료분야\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0017",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0017"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.4 진료구분 / 0019",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.4 진료구분\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0019",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0019"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.5 시술구분 / 0020",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.5 시술구분\";\r",
													"\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0020",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0020"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.6 보험구분 / 0025",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.6 보험구분\";\r",
													"\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followAuthorizationHeader": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0025",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.7 진행상태 / 0026",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.7 진행상태\";\r",
													"\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0026",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0026"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.8 수가구분 / 0035",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.8 수가구분\";\r",
													"\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0035",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0035"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.9 환자상태 / 0036",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.9 환자상태\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0036",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0036"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.10 상품카테고리 / 0085",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.10 상품카테고리\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0085",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0085"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.11 동의서카테고리/ 0087",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.11 동의서카테고리\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0087",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0087"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.12 팬차트카테고리 / 0089",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.12 펜차트카테고리\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0089",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0089"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.13 상담결과 / 0090",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.13 상담결과\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0090",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0090"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.14 시술대분류 / 0091",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.14 시술대분류\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0091",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0091"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.15 시술중분류 / 0092",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.15 시술중분류\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0092",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0092"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.16 상담카테고리 / 0095",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.16 상담카테고리\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0095",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0095"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.17 카드결제구분 / 0096",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.17 카드결제구분\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0096",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0096"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.18 기타결제구분 / 0097",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.18 기타결제구분\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0097",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0097"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.19 진료사진카테고리 / 0099",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.19 진료사진카테고리\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0099",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0099"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.0.20 고객등급 / 0109",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'array', \r",
													"            'items': {\r",
													"                'type' : 'object',\r",
													"                'properties': {\r",
													"                    'COM_CD' : {'type':'string'},\r",
													"                    'BSE_CD' : {'type':'string'},\r",
													"                    'BSE_CD_NM' : {'type':'string'},\r",
													"                    'NEW_CD' : {'type':'string'},\r",
													"                },\r",
													"            'required': ['COM_CD','BSE_CD','BSE_CD_NM','NEW_CD']\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const randomData = resJson.data[Math.floor(Math.random() * resJson.data.length)]\r",
													"const testDescription = \"1.0.20 고객등급\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/code/?code=CD0109",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "CD0109"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.1 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"    ]\r",
													"};"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = \"1.1 공통코드 파라미터 미입력 상태 조회\";\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testJsonNonData = eval(pm.collectionVariables.get(\"testValidateMissingRequiredData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testJsonNonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "code",
													"value": "CD0016",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/code",
											"host": [
												"{{domain}}"
											],
											"path": [
												"code"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "1.1 등록된 요양기관번호 여부 확인",
							"item": [
								{
									"name": "1.1 등록된 요양기관번호 여부 확인",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        { key: 'ykiho', value: '22222222' }\r",
													"    ]\r",
													"};"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"            \"status\": {'type':\"string\"},\r",
													"            \"result\": {'type':\"boolean\"},\r",
													"            \"message\": {'type':\"string\"}\r",
													"    },\r",
													"    \"required\":[\"status\", \"result\", \"message\"]\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `1.1 요양기관번호 등록여부 확인`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(`testResponseTime`));\r",
													"const testHttpsProtocol = eval(pm.globals.get(`testHttpsProtocol`));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(`testSucessJsonData`));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/check-ykiho",
											"host": [
												"{{domain}}"
											],
											"path": [
												"check-ykiho"
											]
										}
									},
									"response": []
								},
								{
									"name": "1.1.1 오입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"// 요청 본문 데이터 설정\r",
													"pm.request.body = {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        { key: 'ykiho', value: '01010101' }\r",
													"    ]\r",
													"};"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `1.1.1 오입력 요양기관번호 등록여부 확인`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(`testResponseTime`));\r",
													"const testHttpsProtocol = eval(pm.globals.get(`testHttpsProtocol`));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/check-ykiho",
											"host": [
												"{{domain}}"
											],
											"path": [
												"check-ykiho"
											]
										}
									},
									"response": []
								},
								{
									"name": "1.1.2 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"// 요청 본문 데이터 설정\r",
													"pm.request.body = {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        { key: 'ykiho', value: '' }\r",
													"    ]\r",
													"};"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'integer' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `1.1.2 값 미입력 요양기관번호 등록여부 확인`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(`testResponseTime`));\r",
													"const testHttpsProtocol = eval(pm.globals.get(`testHttpsProtocol`));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(`testValidateMissingRequiredData`));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/check-ykiho",
											"host": [
												"{{domain}}"
											],
											"path": [
												"check-ykiho"
											]
										}
									},
									"response": []
								},
								{
									"name": "1.1.3 파라미터 값 추가",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        { key: 'ykiho', value: '22222222' },\r",
													"        { key: 'ykiho', value: '22222222' },\r",
													"    ]\r",
													"};\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'boolean' },\r",
													"        'message': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result', 'message']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `1.1.3 파라미터 추가 요양기관번호 등록여부 확인`;\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(`testResponseTime`));\r",
													"const testHttpsProtocol = eval(pm.globals.get(`testHttpsProtocol`));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(`testSucessJsonData`));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/check-ykiho/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"check-ykiho",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"pm.collectionVariables.set(\"testSucessJsonData\", String((desc, json, schema) => {\r",
											"    pm.test(`${desc} - 응답 JSON 데이터 확인`, () =>{\r",
											"        pm.response.to.be.json;\r",
											"        pm.expect(json).to.be.not.empty;\r",
											"        pm.expect(json.status).to.be.eql(\"200\");\r",
											"        pm.expect(json.result).to.be.eql(true);\r",
											"        pm.expect(json.message).to.be.eql(\"성공\");\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"    });\r",
											"}));\r",
											"\r",
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "2.로그인",
					"item": [
						{
							"name": "2.2 로그인",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = {",
											"    'type': 'object',",
											"    'properties': {",
											"        'status': { 'type': 'string' },",
											"        'result': { 'type': 'string' },",
											"        'access_token': { 'type': 'string'},",
											"    },",
											"    'required': ['status','result','access_token']",
											"};",
											"",
											"const resJson = pm.response.json();",
											"const testDescription = `2.2 정상계정 로그인`",
											"",
											"const testServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));",
											"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));",
											"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));",
											"const testJsonData = eval(pm.collectionVariables.get(`testSucessJsonData`));",
											"",
											"testServerStatus(`${testDescription}`);",
											"testResponseTime(`${testDescription}`);",
											"testHttpsProtocol(`${testDescription}`);",
											"testJsonData(`${testDescription}`, resJson, schema);",
											"",
											"pm.environment.set('accessToken', resJson.access_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = { \r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key : 'ykiho',value: '22222222'},\r",
											"        {key : 'userId',value: pm.environment.get('userId')},\r",
											"        {key : 'userPw',value: pm.environment.get('userPw')}\r",
											"    ]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": ""
									}
								],
								"url": {
									"raw": "{{domain}}/login",
									"host": [
										"{{domain}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.1 미등록 요양기관번호 로그인",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testDescription = `2.2.1 미등록 요양기관번호 로그인`",
											"",
											"const testServerStatus = eval(pm.globals.get(\"testFailServerStatus\"));",
											"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));",
											"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));",
											"",
											"testServerStatus(`${testDescription}`);",
											"testResponseTime(`${testDescription}`);",
											"testHttpsProtocol(`${testDescription}`);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = { \r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key : 'ykiho',value: 'ERROR'},\r",
											"        {key : 'userId',value: pm.environment.get('userId')},\r",
											"        {key : 'userPw',value: pm.environment.get('userPw')}\r",
											"    ]\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/login",
									"host": [
										"{{domain}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.2 미등록 계정 로그인",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testDescription = `2.2.2 미등록 사용자 로그인`",
											"",
											"const testServerStatus = eval(pm.globals.get(\"testFailServerStatus\"));",
											"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));",
											"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));",
											"",
											"testServerStatus(`${testDescription}`);",
											"testResponseTime(`${testDescription}`);",
											"testHttpsProtocol(`${testDescription}`);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = { \r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key : 'ykiho',value: '01532421'},\r",
											"        {key : 'userId',value:'ADMasdfsadfIN2'},\r",
											"        {key : 'userPw',value:'asd!1'}\r",
											"    ]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/login",
									"host": [
										"{{domain}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.3 오입력 로그인",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = {",
											"    'type': 'object',",
											"    'properties': {",
											"        'status': { 'type': 'string' },",
											"        'result': { 'type': 'string' },",
											"    },",
											"    'required': ['status','result']",
											"};",
											"",
											"const resJson = pm.response.json();",
											"const testDescription = `2.2.3 틀린 비밀번호 계정 로그인`",
											"",
											"const testUnauthorizedResponseServerStatus = eval(pm.globals.get(\"testUnauthorizedResponseServerStatus\"));",
											"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));",
											"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));",
											"const testInvalidPasswordLoginData = eval(pm.collectionVariables.get(`testInvalidPasswordLoginData`));",
											"",
											"testUnauthorizedResponseServerStatus(`${testDescription}`);",
											"testResponseTime(`${testDescription}`);",
											"testHttpsProtocol(`${testDescription}`);",
											"testInvalidPasswordLoginData(`${testDescription}`, resJson, schema);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body = { \r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key : 'ykiho',value: '22222222'},\r",
											"        {key : 'userId',value:'ADMIN'},\r",
											"        {key : 'userPw',value:'xmfkdldjq21!1'}\r",
											"    ]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/login",
									"host": [
										"{{domain}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.4 미입력 로그인",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = { ",
											"    'type':'object',",
											"    'properties' : { ",
											"       'status' : {'type': 'integer'},",
											"       'result' : {'type' : 'string'},",
											"    },",
											"    'required' : ['status','result']",
											"};",
											"",
											"const resJson = pm.response.json();",
											"const testDescription = `2.2.4 데이터 미입력 상태 로그인`",
											"",
											"const testServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));",
											"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));",
											"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));",
											"const testJsonData = eval(pm.collectionVariables.get(`testValidateMissingRequiredData`));",
											"",
											"testServerStatus(`${testDescription}`);",
											"testResponseTime(`${testDescription}`);",
											"testHttpsProtocol(`${testDescription}`);",
											"testJsonData(`${testDescription}`, resJson, schema);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.request.body = { \r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key : 'ykiho',value: ''},\r",
											"        {key : 'userId',value:''},\r",
											"        {key : 'userPw',value:''}\r",
											"    ]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/login",
									"host": [
										"{{domain}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.5 초기화 비밀번호 확인",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = {",
											"    'type': 'object',",
											"    'properties': {",
											"        'status': { 'type': 'string' },",
											"        'result': { 'type': 'string' },",
											"    },",
											"    'required': ['status','result']",
											"};",
											"",
											"const resJson = pm.response.json();",
											"const testDescription = `2.2.5 초기화 비밀번호 계정 로그인`",
											"",
											"",
											"const testUnauthorizedResponseServerStatus = eval(pm.globals.get(\"testUnauthorizedResponseServerStatus\"));",
											"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));",
											"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));",
											"const testcheckInitialPasswordResponse = eval(pm.collectionVariables.get(`testcheckInitialPasswordResponse`));",
											"",
											"testUnauthorizedResponseServerStatus(`${testDescription}`);",
											"testResponseTime(`${testDescription}`);",
											"testHttpsProtocol(`${testDescription}`);",
											"testcheckInitialPasswordResponse(`${testDescription}`, resJson, schema);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = { \r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key : 'ykiho',value: '22222222'},\r",
											"        {key : 'userId',value: pm.environment.get('resetUserId')},\r",
											"        {key : 'userPw',value: pm.environment.get('resetUserPw')},\r",
											"    ]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": ""
									}
								],
								"url": {
									"raw": "{{domain}}/login",
									"host": [
										"{{domain}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.6 사용중지 계정 로그인",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = {",
											"    'type': 'object',",
											"    'properties': {",
											"        'status': { 'type': 'string' },",
											"        'result': { 'type': 'string' },",
											"    },",
											"    'required': ['status','result']",
											"};",
											"",
											"const resJson = pm.response.json();",
											"const testDescription = `2.2.6 사용중지 사용자 로그인`",
											"",
											"const testUnauthorizedResponseServerStatus = eval(pm.globals.get(\"testUnauthorizedResponseServerStatus\"));",
											"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));",
											"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));",
											"const testInvalidPasswordLoginData = eval(pm.collectionVariables.get(`testInvalidPasswordLoginData`));",
											"",
											"testUnauthorizedResponseServerStatus(`${testDescription}`);",
											"testResponseTime(`${testDescription}`);",
											"testHttpsProtocol(`${testDescription}`);",
											"testInvalidPasswordLoginData(`${testDescription}`, resJson, schema);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = { \r",
											"    'mode' : 'urlencoded',\r",
											"    'urlencoded' : [\r",
											"        {key : 'ykiho',value: '22222222'},\r",
											"        {key : 'userId',value: pm.environment.get('stopUsingUserId')},\r",
											"        {key : 'userPw',value: pm.environment.get('stopUsingUserPw')},\r",
											"    ]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": ""
									}
								],
								"url": {
									"raw": "{{domain}}/login",
									"host": [
										"{{domain}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "3.환자 접수",
					"item": [
						{
							"name": "3.1 접수",
							"item": [
								{
									"name": "3.0 접수",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'urlencoded',\r",
													"    urlencoded : [\r",
													"        {key:'patNm', value: pm.collectionVariables.get('PAT_NM')}, \r",
													"        {key:'mobile', value: pm.collectionVariables.get('MOBILE_NO')}\r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': {'type':'string'},\r",
													"        'result': {'type':'string'},\r",
													"    },\r",
													"    'required': ['status', 'result']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.0 접수`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/ptnt/receipt/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"receipt",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "3.0.1 모든값 접수",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'urlencoded',\r",
													"    urlencoded : [\r",
													"        {key:'patNo', value: pm.collectionVariables.get('PAT_NO')}, \r",
													"        {key:'patNm', value: pm.collectionVariables.get('PAT_NM')}, \r",
													"        {key:'jNo', value: pm.collectionVariables.get('PAT_JNO')}, \r",
													"        {key:'diagFldCd', value: 'CD0017'},\r",
													"        {key:'mobile', value: pm.collectionVariables.get('MOBILE_NO')},\r",
													"        {key:'addr', value: pm.collectionVariables.get('ADDR')},\r",
													"        {key:'vstPthCd', value: 'CD0016'},\r",
													"        {key:'smsYn', value: '1'},\r",
													"        {key:'adSmsYn', value: '1'},\r",
													"        {key:'prsnYn', value: '1'},\r",
													"    ]\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': {'type':'string'},\r",
													"        'result': {'type':'string'},\r",
													"    },\r",
													"    'required': ['status', 'result']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.0.1 모든값 입력 상태로 접수`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/ptnt/receipt/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"receipt",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "3.0.2 미입력 접수",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'urlencoded',\r",
													"    urlencoded : [\r",
													"        {key:'patNo', value:''}, \r",
													"        {key:'patNm', value: ''}, \r",
													"    ]\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': {'type':'string'},\r",
													"        'result': {'type':'string'},\r",
													"    },\r",
													"    'required': ['status', 'result']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.0.2 필수값 미입력 접수`\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(\"testValidateMissingRequiredData\"));\r",
													"\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/ptnt/receipt/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"receipt",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "3.0.3 오입력 접수 / 확인필요",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'urlencoded',\r",
													"    urlencoded : [\r",
													"        {key:'patNm', value: 'ERROR'}, \r",
													"        {key:'mobile', value: 'ERROR'},\r",
													"    ]\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': {'type':'string'},\r",
													"        'result': {'type':'string'},\r",
													"        'data': {'type':'array'},\r",
													"    },\r",
													"    'required': ['status', 'result', 'data']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.0.3 필수값 오입력 접수`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(\"testValidateMissingRequiredData\"));\r",
													"\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/ptnt/receipt/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"receipt",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "3.0.4 변조토큰 접수",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'urlencoded',\r",
													"    urlencoded : [\r",
													"        {key:'patNm', value: pm.collectionVariables.get('PAT_NM')}, \r",
													"        {key:'mobile', value: pm.collectionVariables.get('MOBILE_NO')}\r",
													"    ]\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `3.0.4 변조토큰 사용하여 접수`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/ptnt/receipt/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"receipt",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3.1 이름/핸드폰번호로 내원여부 확인",
							"item": [
								{
									"name": "3.1 이름/핸드폰번호로 내원여부 확인",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    'mode' : 'urlencoded',\r",
													"    'urlencoded' : [\r",
													"        {key:'patNm', value:pm.collectionVariables.get('testUser')},\r",
													"        {key:'mobile', value:pm.collectionVariables.get('testPhoneNumber')},\r",
													"    ]\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': {\r",
													"            'type': 'object',\r",
													"            'properties': {\r",
													"                'PAT_NO': {'type':'string'},\r",
													"                'PAT_NM': {'type':'string'},\r",
													"                'MOBILE_NO': {'type':'string'},\r",
													"                'PAT_JNO': {'type':'string'},\r",
													"                'ADDR': {'type':['string','null']},\r",
													"                'VST_PTH_CD': {'type':['string','null']},\r",
													"                'CODE': {'type':'integer'},\r",
													"            },\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.1 이름/핸드폰번호 내원여부 확인`\r",
													" \r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(`testSucessJsonData`));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);\r",
													"\r",
													"pm.collectionVariables.set('PAT_JNO',resJson.data.PAT_JNO);\r",
													"pm.collectionVariables.set('ADDR',resJson.data.ADDR);\r",
													"pm.collectionVariables.set('PAT_NO',resJson.data.PAT_NO);\r",
													"pm.collectionVariables.set('PAT_NM',resJson.data.PAT_NM);\r",
													"pm.collectionVariables.set('MOBILE_NO',resJson.data.MOBILE_NO);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/phone",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"phone"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.1 오입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body ={\r",
													"    'mode' : 'urlencoded',\r",
													"    'urlencoded' : [\r",
													"        {key:'patNm', value:'김지'},\r",
													"        {key:'mobile', value:'01074631'},\r",
													"    ]\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { 'type': 'null', },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.1.1 미내원 환자 조회`;\r",
													" \r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testEmptyJsonData = eval(pm.collectionVariables.get(`testEmptyJsonData`));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testEmptyJsonData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/phone",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"phone"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.2 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body ={\r",
													"    'mode' : 'urlencoded',\r",
													"    'urlencoded' : [\r",
													"    {key : 'patNm', value:''},\r",
													"    {key : 'mobile', value:''},]\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.1.2 모든 필수데이터 미입력 조회`;\r",
													" \r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(`testValidateMissingRequiredData`));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/phone",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"phone"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.3 휴대폰번호 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body ={\r",
													"    'mode' : 'urlencoded',\r",
													"    'urlencoded' : [\r",
													"    {key : 'patNm', value:'김지헌'},\r",
													"    {key : 'mobile', value:''},]\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.1.3 휴대폰번호 미입력 조회`;\r",
													" \r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(`testValidateMissingRequiredData`));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/phone",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"phone"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.4 이름 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body ={\r",
													"    'mode' : 'urlencoded',\r",
													"    'urlencoded' : [\r",
													"    {key : 'patNm', value:''},\r",
													"    {key : 'mobile', value:'01074417631'},]\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.1.4 이름 미입력 조회`;\r",
													" \r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(`testValidateMissingRequiredData`));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/phone",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"phone"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.5 변조토큰 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body ={\r",
													"    'mode' : 'urlencoded',\r",
													"    'urlencoded' : [\r",
													"        {key:'patNm', value:'김지헌'},\r",
													"        {key:'mobile', value:'01074417631'},\r",
													"    ]\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `3.1.5 변조토큰 사용하여 접수 환자 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/phone",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"phone"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "3.2 이름/주민번호로 내원 여부 확인",
							"item": [
								{
									"name": "3.2 이름/주민번호로 내원 여부 확인",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body ={\r",
													"    'mode' : 'urlencoded',\r",
													"    'urlencoded' : [\r",
													"        {key : 'patNm', value: pm.collectionVariables.get('PAT_NM')},\r",
													"        {key : 'jNo', value: pm.collectionVariables.get('PAT_JNO')},\r",
													"    ]\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': {'type': 'string'},\r",
													"        'result': {'type': 'string'},\r",
													"        'data': {\r",
													"            'type': 'array',\r",
													"            'properties':{\r",
													"                'PAT_NO': {'type': 'string'},\r",
													"                'PAT_NM': {'type': 'string'},\r",
													"                'MOBILE_NO': {'type': 'string'},\r",
													"            },\r",
													"            'required': ['PAT_NO','PAT_NM','MOBILE_NO']\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.2 이름/핸드폰번호 내원여부 확인`\r",
													" \r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(`testSucessJsonData`));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/jno",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"jno"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.2.1 오입력 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { 'type': 'array' },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.2.1 미내원 환자 조회`;\r",
													" \r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testEmptyJsonData = eval(pm.collectionVariables.get(`testEmptyJsonData`));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testEmptyJsonData(`${testDescription}`, resJson, schema);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body ={\r",
													"    'mode' : 'urlencoded',\r",
													"    'urlencoded' : [\r",
													"        {key : 'patNm', value: 'asdasd'},\r",
													"        {key : 'jNo', value: pm.collectionVariables.get(\"PAT_JNO\")}\r",
													"    ]\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/jno",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"jno"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.2.2 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body ={\r",
													"    'mode' : 'urlencoded',\r",
													"    'urlencoded' : [\r",
													"        {key : 'patNm', value: ''},\r",
													"        {key : 'jNo', value: ''}\r",
													"    ]\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.2.2 모든 필수데이터 미입력 조회`;\r",
													" \r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(`testValidateMissingRequiredData`));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/jno",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"jno"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.2.3 주민번호 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body ={\r",
													"    'mode' : 'urlencoded',\r",
													"    'urlencoded' : [\r",
													"        {key : 'patNm', value: pm.collectionVariables.get('PAT_NM')},\r",
													"        {key : 'jNo', value: ''}\r",
													"    ]\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.2.3 주민등록번호 미입력 조회`;\r",
													" \r",
													"const testSucessServerStatus = eval(pm.globals.get(\"testSucessServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(`testValidateMissingRequiredData`));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/jno",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"jno"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.2.4 이름 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body ={\r",
													"    'mode' : 'urlencoded',\r",
													"    'urlencoded' : [\r",
													"        {key : 'patNm', value: pm.collectionVariables.get('PAT_NM')},\r",
													"        {key : 'jNo', value: pm.collectionVariables.get(\"PAT_JNO\")}\r",
													"    ]\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `3.2.4 이름 미입력 조회`;\r",
													" \r",
													"const testFailServerStatus = eval(pm.globals.get(\"testFailServerStatus\"));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/jno",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"jno"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.2.5 변조토큰 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body ={\r",
													"    'mode' : 'urlencoded',\r",
													"    'urlencoded' : [\r",
													"    {key : 'patNm', value: pm.collectionVariables.get('PAT_NM')},\r",
													"    {key : 'jNo', value: pm.collectionVariables.get('PAT_JNO')},]\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `3.2.5 변조토큰 사용하여 접수 환자 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/jno",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"jno"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3.3 핸드폰 번호로 환자 검색",
							"item": [
								{
									"name": "3.3 핸드폰 번호로 환자 검색",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': {'type':'string'},\r",
													"        'result': {'type':'string'},\r",
													"        'data': {\r",
													"            'type':'array',\r",
													"            'properties':{\r",
													"                'PAT_NO': {'type': 'string'},\r",
													"                'PAT_NM': {'type': 'string'},\r",
													"                'PAT_BTH': {'type': 'string'},\r",
													"                'MOBILE_NO': {'type': 'string'},\r",
													"            },\r",
													"            'required': ['PAT_NO', 'PAT_NM', 'PAT_BTH', 'MOBILE_N123123O']\r",
													"        },\r",
													"    },\r",
													"    'required': ['status', 'result', 'data']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.3 핸드폰 번호로 환자 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'urlencoded',\r",
													"    urlencoded : [\r",
													"        {key:'patNm', value:pm.collectionVariables.get('PAT_NM')}, \r",
													"        {key:'search', value:pm.collectionVariables.get('MOBILE_NO')}\r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/search",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.1 오입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'urlencoded',\r",
													"    urlencoded : [\r",
													"        {key:'patNm', value:'PAT_NM'}, \r",
													"        {key:'search', value:'MOBILE_NO'}\r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { 'type': 'array' },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.3.1 데이터 없는 환자 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testEmptyJsonData = eval(pm.collectionVariables.get(\"testEmptyJsonData\"));\r",
													"\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testEmptyJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/search",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.2  날짜 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'urlencoded',\r",
													"    urlencoded : [\r",
													"        {key:'patNm', value:pm.collectionVariables.get('PAT_NM')}, \r",
													"        {key:'search', value:''}\r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.3.2 날짜 파라미터 미입력 상태 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(\"testValidateMissingRequiredData\"));\r",
													"\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/search",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.3 이름 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'urlencoded',\r",
													"    urlencoded : [\r",
													"        {key:'patNm', value:''}, \r",
													"        {key:'search', value:pm.collectionVariables.get('MOBILE_NO')}\r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.3.3 이름 파라미터 미입력 상태 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(\"testValidateMissingRequiredData\"));\r",
													"\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/search",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.4 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'urlencoded',\r",
													"    urlencoded : [\r",
													"        {key:'patNm', value:''}, \r",
													"        {key:'search', value:''}\r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.3.4 모든 파라미터 미입력 상태 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(\"testValidateMissingRequiredData\"));\r",
													"\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/search",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.5 변조토큰 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'urlencoded',\r",
													"    urlencoded : [\r",
													"        {key:'patNm', value:pm.collectionVariables.get('PAT_NM')}, \r",
													"        {key:'search', value:pm.collectionVariables.get('MOBILE_NO')}\r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `3.3.5 변조토큰 사용하여 접수 환자 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/search",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"search"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3.4 환자 정보 조회",
							"item": [
								{
									"name": "3.4 환자 정보 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status' : {'type': 'string'},\r",
													"        'result' : {'type': 'string'},\r",
													"        'data' : {  \r",
													"            'type': 'object',\r",
													"            'properties': {\r",
													"                'PAT_NO':{'type' : 'string'},\r",
													"                'CHART_NO':{'type' : 'string'},\r",
													"                'PAT_NM':{'type' : 'string'},\r",
													"                'PAT_JNO':{'type' : 'string'},\r",
													"                'MOBILE_NO':{'type' : 'string'},\r",
													"                'ADDR':{'type' : 'string'},\r",
													"                'DTL_ADDR':{'type' : 'string'},\r",
													"                'VST_PTH_CD':{'type' : 'string'},\r",
													"                'SMS_AGR_YN':{'type' : 'string'},\r",
													"            },\r",
													"            'required': ['PAT_NO', 'CHART_NO', 'PAT_NM', 'PAT_JNO', 'MOBILE_NO', 'ADDR', 'DTL_ADDR','VST_PTH_CD','SMS_AGR_YN'],\r",
													"        },\r",
													"    },\r",
													"    'required': ['status', 'result', 'data'],\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.4 핸드폰 번호로 환자 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.4.1 오입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status' : {'type': 'string'},\r",
													"        'result' : {'type': 'string'},\r",
													"        'data' : {  'type': 'array',},\r",
													"    },\r",
													"    'required': ['status', 'result', 'data'],\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.4.1 데이터 없는 환자 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testEmptyJsonData = eval(pm.collectionVariables.get(\"testEmptyJsonData\"));\r",
													"\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testEmptyJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/659799",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"659799"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.4.2 변조토큰 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `3.4.2 변조토큰 환자 정보 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3.5 개인정보 동의 내용 조회",
							"item": [
								{
									"name": "3.5 개인정보 동의 내용 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': {'type': 'string'},\r",
													"        'result': {'type': 'string'},\r",
													"        'data': {\r",
													"            'type': 'object',\r",
													"            'properties':{\r",
													"                'PRIVACY_STRING': {'type': 'string'},\r",
													"            },\r",
													"            'required': ['PRIVACY_STRING']\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `3.5 개인정보 동의 내용 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/privacy",
											"host": [
												"{{domain}}"
											],
											"path": [
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.5 변조토큰 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `3.4.3 변조토큰 개인정보 동의 내용 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/privacy",
											"host": [
												"{{domain}}"
											],
											"path": [
												"privacy"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "4.대시보드",
					"item": [
						{
							"name": "4.1 해당 날짜 환자 리스트 조회",
							"item": [
								{
									"name": "4.1 해당 날짜 환자 리스트 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': {\r",
													"            'type': 'object',\r",
													"            'properties': {\r",
													"                'A': { \r",
													"                    'type': 'array', \r",
													"                    'items': { \r",
													"                        'properties' : {'properties' : {\r",
													"                            'PAT_NO' : {'type' : 'string'},\r",
													"                            'PAT_NM' : {'type' : 'string'},\r",
													"                            'CHART_NO' : {'type' : 'string'},\r",
													"                            'PAT_JNO' : {'type' : 'string'},\r",
													"                            'ADDR' : {'type' : 'string'},\r",
													"                            'MOBILE_NO' : {'type' : 'string'},\r",
													"                            'RMK_TXT' : {'type' : 'string'},\r",
													"                            'RCNT_VST_DD' : {'type' : 'string'},\r",
													"                            'STR_BSE_INFO' : {'type' : 'string'},\r",
													"                            'PAT_SEX_TP_CD' : {'type' : 'string'},\r",
													"                            'PATGRDCD' : {'type' : 'string'},\r",
													"                            'PATCOL' : {'type' : 'string'},\r",
													"                            'VIST_SN' : {'type' : 'string'},\r",
													"                            'RSRV_DD' : {'type' : 'string'},\r",
													"                            'RSRV_ONO' : {'type' : 'string'},\r",
													"                            'RSRV_MEMO' : {'type' : 'string'},\r",
													"                            'RSRV_CFR_ID' : {'type' : 'string'},\r",
													"                            'RSRV_CNCL_YN' : {'type' : 'string'},\r",
													"                            'RSRV_NOTE_CD' : {'type' : 'string'},\r",
													"                            'RSRV_TP_CD' : {'type' : 'string'},\r",
													"                            'ACPT_DD' : {'type' : 'string'},\r",
													"                            'ACPT_TM' : {'type' : 'string'},\r",
													"                            'ACPTTM' : {'type' : 'string'},\r",
													"                            'ACPT_CNCL_YN' : {'type' : 'string'},\r",
													"                            'ACPT_MEMO' : {'type' : 'string'},\r",
													"                            'DIAG_TP_CD' : {'type' : 'string'},\r",
													"                            'CDDIAG' : {'type' : 'string'},\r",
													"                            'ONLY_MOPR_YN' : {'type' : 'string'},\r",
													"                            'MOPR_FNSH_YN' : {'type' : 'string'},\r",
													"                            'MOPR_STA_TM' : {'type' : 'string'},\r",
													"                            'MOPR_END_TM' : {'type' : 'string'},\r",
													"                            'MOPR_TP_CD' : {'type' : 'string'},\r",
													"                            'MOPR_TP_NM' : {'type' : 'string'},\r",
													"                            'DIAG_FLD_CD' : {'type' : 'string'},\r",
													"                            'DIAG_FLD_NM' : {'type' : 'string'},\r",
													"                            'MOPR_CL' : {'type' : 'string'},\r",
													"                            'CNST_ID' : {'type' : 'string'},\r",
													"                            'FST_CNST_TM' : {'type' : 'string'},\r",
													"                            'CNSTDD' : {'type' : ['string','null']},\r",
													"                            'CNSTTM' : {'type' : ['string','null']},\r",
													"                            'NEED_CNST_YN' : {'type' : 'string'},\r",
													"                            'RCPT_WAIT_TM' : {'type' : 'string'},\r",
													"                            'RCPTDD' : {'type' : ['string','null']},\r",
													"                            'RCPT_TM' : {'type' : 'string'},\r",
													"                            'CHRG_DR_ID' : {'type' : 'string'},\r",
													"                            'CHRG_STAFF_ID' : {'type' : 'string'},\r",
													"                            'CDDR' : {'type' : 'string'},\r",
													"                            'STAFFNAME' : {'type' : 'string'},\r",
													"                            'STAFF_MEMO' : {'type' : 'string'},\r",
													"                            'WITH_YN' : {'type' : 'string'},\r",
													"                            'MSG_INST_YN' : {'type' : 'string'},\r",
													"                            'MSG_VIST_BF_YN' : {'type' : 'string'},\r",
													"                            'MSG_VIST_DD_YN' : {'type' : 'string'},\r",
													"                            'KKO_INST_YN' : {'type' : 'string'},\r",
													"                            'KKO_VIST_BF_YN' : {'type' : 'string'},\r",
													"                            'KKO_VIST_DD_YN' : {'type' : 'string'},\r",
													"                            'PRGR_STAT_CD' : {'type' : 'string'},\r",
													"                            'INSU_KND_CD' : {'type' : 'string'},\r",
													"                            'LBLTODAY' : {'type' : 'string'},\r",
													"                            'CDINSUP' : {'type' : 'string'},\r",
													"                            'RCPT_AMT' : {'type' : ['string','null']},\r",
													"                            'TOT_SLF_BRDN_AMT' : {'type' : ['string','null']},\r",
													"                            'UNPAY_AMT' : {'type' : ['string','null']},\r",
													"                            'TODAY' : {'type' : ['string','null']},\r",
													"                            'RCVB' : {'type' : 'string'},\r",
													"                            'STATUS_BOARD_CD' : {'type' : 'string'},\r",
													"                            'STATUS_BOARD_NM' : {'type' : ['string','null']},\r",
													"                            'STATUS_BOARD_COLOR' : {'type' : ['string','null']},\r",
													"                            'STATUS_TIME' : {'type' : 'string'},\r",
													"                        },\r",
													"                    },\r",
													"                    'required': [\r",
													"                        'PAT_NO', 'PAT_NM', 'CHART_NO', 'PAT_JNO', 'ADDR',\r",
													"                        'MOBILE_NO', 'RMK_TXT', 'RCNT_VST_DD', 'STR_BSE_INFO', 'PAT_SEX_TP_CD', 'PATGRDCD', 'PATCOL', 'VIST_SN', 'RSRV_DD',\r",
													"                        'RSRV_ONO', 'RSRV_MEMO', 'RSRV_CFR_ID', 'RSRV_CNCL_YN', 'RSRV_NOTE_CD', 'RSRV_TP_CD', 'ACPT_DD', 'ACPT_TM', 'ACPTTM',\r",
													"                        'ACPT_CNCL_YN', 'ACPT_MEMO', 'DIAG_TP_CD', 'CDDIAG', 'ONLY_MOPR_YN', 'MOPR_FNSH_YN', 'MOPR_STA_TM', 'MOPR_END_TM',\r",
													"                        'MOPR_TP_CD', 'MOPR_TP_NM', 'DIAG_FLD_CD', 'DIAG_FLD_NM', 'MOPR_CL', 'CNST_ID', 'FST_CNST_TM', 'CNSTDD', 'CNSTTM',\r",
													"                        'NEED_CNST_YN', 'RCPT_WAIT_TM', 'RCPTDD', 'RCPT_TM', 'CHRG_DR_ID', 'CHRG_STAFF_ID', 'CDDR', 'STAFFNAME', 'STAFF_MEMO',\r",
													"                        'WITH_YN', 'MSG_INST_YN', 'MSG_VIST_BF_YN', 'MSG_VIST_DD_YN', 'KKO_INST_YN', 'KKO_VIST_BF_YN', 'KKO_VIST_DD_YN', \r",
													"                        'PRGR_STAT_CD', 'INSU_KND_CD', 'CDINSUP', 'RCPT_AMT', 'TOT_SLF_BRDN_AMT', 'UNPAY_AMT', 'TODAY', \r",
													"                        'LBLTODAY', 'RCVB', 'STATUS_BOARD_CD', 'STATUS_BOARD_NM', 'STATUS_BOARD_COLOR', 'STATUS_TIME']\r",
													"                },\r",
													"                'F': { \r",
													"                    'type': 'array', \r",
													"                    'items': { \r",
													"                        'properties' : {\r",
													"                            'PAT_NO' : {'type' : 'string'},\r",
													"                            'PAT_NM' : {'type' : 'string'},\r",
													"                            'CHART_NO' : {'type' : 'string'},\r",
													"                            'PAT_JNO' : {'type' : 'string'},\r",
													"                            'ADDR' : {'type' : 'string'},\r",
													"                            'MOBILE_NO' : {'type' : 'string'},\r",
													"                            'RMK_TXT' : {'type' : 'string'},\r",
													"                            'RCNT_VST_DD' : {'type' : 'string'},\r",
													"                            'STR_BSE_INFO' : {'type' : 'string'},\r",
													"                            'PAT_SEX_TP_CD' : {'type' : 'string'},\r",
													"                            'PATGRDCD' : {'type' : 'string'},\r",
													"                            'PATCOL' : {'type' : 'string'},\r",
													"                            'VIST_SN' : {'type' : 'string'},\r",
													"                            'RSRV_DD' : {'type' : 'string'},\r",
													"                            'RSRV_ONO' : {'type' : 'string'},\r",
													"                            'RSRV_MEMO' : {'type' : 'string'},\r",
													"                            'RSRV_CFR_ID' : {'type' : 'string'},\r",
													"                            'RSRV_CNCL_YN' : {'type' : 'string'},\r",
													"                            'RSRV_NOTE_CD' : {'type' : 'string'},\r",
													"                            'RSRV_TP_CD' : {'type' : 'string'},\r",
													"                            'ACPT_DD' : {'type' : 'string'},\r",
													"                            'ACPT_TM' : {'type' : 'string'},\r",
													"                            'ACPTTM' : {'type' : 'string'},\r",
													"                            'ACPT_CNCL_YN' : {'type' : 'string'},\r",
													"                            'ACPT_MEMO' : {'type' : 'string'},\r",
													"                            'DIAG_TP_CD' : {'type' : 'string'},\r",
													"                            'CDDIAG' : {'type' : 'string'},\r",
													"                            'ONLY_MOPR_YN' : {'type' : 'string'},\r",
													"                            'MOPR_FNSH_YN' : {'type' : 'string'},\r",
													"                            'MOPR_STA_TM' : {'type' : 'string'},\r",
													"                            'MOPR_END_TM' : {'type' : 'string'},\r",
													"                            'MOPR_TP_CD' : {'type' : 'string'},\r",
													"                            'MOPR_TP_NM' : {'type' : 'string'},\r",
													"                            'DIAG_FLD_CD' : {'type' : 'string'},\r",
													"                            'DIAG_FLD_NM' : {'type' : 'string'},\r",
													"                            'MOPR_CL' : {'type' : 'string'},\r",
													"                            'CNST_ID' : {'type' : 'string'},\r",
													"                            'FST_CNST_TM' : {'type' : 'string'},\r",
													"                            'CNSTDD' : {'type' : ['string','null']},\r",
													"                            'CNSTTM' : {'type' : ['string','null']},\r",
													"                            'NEED_CNST_YN' : {'type' : 'string'},\r",
													"                            'RCPT_WAIT_TM' : {'type' : 'string'},\r",
													"                            'RCPTDD' : {'type' : ['string','null']},\r",
													"                            'RCPT_TM' : {'type' : 'string'},\r",
													"                            'CHRG_DR_ID' : {'type' : 'string'},\r",
													"                            'CHRG_STAFF_ID' : {'type' : 'string'},\r",
													"                            'CDDR' : {'type' : 'string'},\r",
													"                            'STAFFNAME' : {'type' : 'string'},\r",
													"                            'STAFF_MEMO' : {'type' : 'string'},\r",
													"                            'WITH_YN' : {'type' : 'string'},\r",
													"                            'MSG_INST_YN' : {'type' : 'string'},\r",
													"                            'MSG_VIST_BF_YN' : {'type' : 'string'},\r",
													"                            'MSG_VIST_DD_YN' : {'type' : 'string'},\r",
													"                            'KKO_INST_YN' : {'type' : 'string'},\r",
													"                            'KKO_VIST_BF_YN' : {'type' : 'string'},\r",
													"                            'KKO_VIST_DD_YN' : {'type' : 'string'},\r",
													"                            'PRGR_STAT_CD' : {'type' : 'string'},\r",
													"                            'INSU_KND_CD' : {'type' : 'string'},\r",
													"                            'LBLTODAY' : {'type' : 'string'},\r",
													"                            'CDINSUP' : {'type' : 'string'},\r",
													"                            'RCPT_AMT' : {'type' : ['string','null']},\r",
													"                            'TOT_SLF_BRDN_AMT' : {'type' : ['string','null']},\r",
													"                            'UNPAY_AMT' : {'type' : ['string','null']},\r",
													"                            'TODAY' : {'type' : ['string','null']},\r",
													"                            'RCVB' : {'type' : 'string'},\r",
													"                            'STATUS_BOARD_CD' : {'type' : 'string'},\r",
													"                            'STATUS_BOARD_NM' : {'type' : ['string','null']},\r",
													"                            'STATUS_BOARD_COLOR' : {'type' : ['string','null']},\r",
													"                            'STATUS_TIME' : {'type' : 'string'},\r",
													"                        },\r",
													"                    },\r",
													"                    'required': [\r",
													"                        'PAT_NO', 'PAT_NM', 'CHART_NO', 'PAT_JNO', 'ADDR',\r",
													"                        'MOBILE_NO', 'RMK_TXT', 'RCNT_VST_DD', 'STR_BSE_INFO', 'PAT_SEX_TP_CD', 'PATGRDCD', 'PATCOL', 'VIST_SN', 'RSRV_DD',\r",
													"                        'RSRV_ONO', 'RSRV_MEMO', 'RSRV_CFR_ID', 'RSRV_CNCL_YN', 'RSRV_NOTE_CD', 'RSRV_TP_CD', 'ACPT_DD', 'ACPT_TM', 'ACPTTM',\r",
													"                        'ACPT_CNCL_YN', 'ACPT_MEMO', 'DIAG_TP_CD', 'CDDIAG', 'ONLY_MOPR_YN', 'MOPR_FNSH_YN', 'MOPR_STA_TM', 'MOPR_END_TM',\r",
													"                        'MOPR_TP_CD', 'MOPR_TP_NM', 'DIAG_FLD_CD', 'DIAG_FLD_NM', 'MOPR_CL', 'CNST_ID', 'FST_CNST_TM', 'CNSTDD', 'CNSTTM',\r",
													"                        'NEED_CNST_YN', 'RCPT_WAIT_TM', 'RCPTDD', 'RCPT_TM', 'CHRG_DR_ID', 'CHRG_STAFF_ID', 'CDDR', 'STAFFNAME', 'STAFF_MEMO',\r",
													"                        'WITH_YN', 'MSG_INST_YN', 'MSG_VIST_BF_YN', 'MSG_VIST_DD_YN', 'KKO_INST_YN', 'KKO_VIST_BF_YN', 'KKO_VIST_DD_YN', \r",
													"                        'PRGR_STAT_CD', 'INSU_KND_CD', 'LBLTODAY', 'CDINSUP', 'RCPT_AMT', 'TOT_SLF_BRDN_AMT', 'UNPAY_AMT', 'TODAY', \r",
													"                        'RCVB', 'STATUS_BOARD_CD', 'STATUS_BOARD_NM', 'STATUS_BOARD_COLOR', 'STATUS_TIME']\r",
													"                },\r",
													"                'B': { \r",
													"                    'type': 'array', \r",
													"                    'items': { \r",
													"                        'properties' : {\r",
													"                            'PAT_NO' : {'type' : 'string'},\r",
													"                            'PAT_NM' : {'type' : 'string'},\r",
													"                            'CHART_NO' : {'type' : 'string'},\r",
													"                            'PAT_JNO' : {'type' : 'string'},\r",
													"                            'ADDR' : {'type' : 'string'},\r",
													"                            'MOBILE_NO' : {'type' : 'string'},\r",
													"                            'RMK_TXT' : {'type' : 'string'},\r",
													"                            'RCNT_VST_DD' : {'type' : 'string'},\r",
													"                            'STR_BSE_INFO' : {'type' : 'string'},\r",
													"                            'PAT_SEX_TP_CD' : {'type' : 'string'},\r",
													"                            'PATGRDCD' : {'type' : 'string'},\r",
													"                            'PATCOL' : {'type' : 'string'},\r",
													"                            'VIST_SN' : {'type' : 'string'},\r",
													"                            'RSRV_DD' : {'type' : 'string'},\r",
													"                            'RSRV_ONO' : {'type' : 'string'},\r",
													"                            'RSRV_MEMO' : {'type' : 'string'},\r",
													"                            'RSRV_CFR_ID' : {'type' : 'string'},\r",
													"                            'RSRV_CNCL_YN' : {'type' : 'string'},\r",
													"                            'RSRV_NOTE_CD' : {'type' : 'string'},\r",
													"                            'RSRV_TP_CD' : {'type' : 'string'},\r",
													"                            'ACPT_DD' : {'type' : 'string'},\r",
													"                            'ACPT_TM' : {'type' : 'string'},\r",
													"                            'ACPTTM' : {'type' : 'string'},\r",
													"                            'ACPT_CNCL_YN' : {'type' : 'string'},\r",
													"                            'ACPT_MEMO' : {'type' : 'string'},\r",
													"                            'DIAG_TP_CD' : {'type' : 'string'},\r",
													"                            'CDDIAG' : {'type' : 'string'},\r",
													"                            'ONLY_MOPR_YN' : {'type' : 'string'},\r",
													"                            'MOPR_FNSH_YN' : {'type' : 'string'},\r",
													"                            'MOPR_STA_TM' : {'type' : 'string'},\r",
													"                            'MOPR_END_TM' : {'type' : 'string'},\r",
													"                            'MOPR_TP_CD' : {'type' : 'string'},\r",
													"                            'MOPR_TP_NM' : {'type' : 'string'},\r",
													"                            'DIAG_FLD_CD' : {'type' : 'string'},\r",
													"                            'DIAG_FLD_NM' : {'type' : 'string'},\r",
													"                            'MOPR_CL' : {'type' : 'string'},\r",
													"                            'CNST_ID' : {'type' : 'string'},\r",
													"                            'FST_CNST_TM' : {'type' : 'string'},\r",
													"                            'CNSTDD' : {'type' : ['string','null']},\r",
													"                            'CNSTTM' : {'type' : ['string','null']},\r",
													"                            'NEED_CNST_YN' : {'type' : 'string'},\r",
													"                            'RCPT_WAIT_TM' : {'type' : 'string'},\r",
													"                            'RCPTDD' : {'type' : ['string','null']},\r",
													"                            'RCPT_TM' : {'type' : 'string'},\r",
													"                            'CHRG_DR_ID' : {'type' : 'string'},\r",
													"                            'CHRG_STAFF_ID' : {'type' : 'string'},\r",
													"                            'CDDR' : {'type' : 'string'},\r",
													"                            'STAFFNAME' : {'type' : 'string'},\r",
													"                            'STAFF_MEMO' : {'type' : 'string'},\r",
													"                            'WITH_YN' : {'type' : 'string'},\r",
													"                            'MSG_INST_YN' : {'type' : 'string'},\r",
													"                            'MSG_VIST_BF_YN' : {'type' : 'string'},\r",
													"                            'MSG_VIST_DD_YN' : {'type' : 'string'},\r",
													"                            'KKO_INST_YN' : {'type' : 'string'},\r",
													"                            'KKO_VIST_BF_YN' : {'type' : 'string'},\r",
													"                            'KKO_VIST_DD_YN' : {'type' : 'string'},\r",
													"                            'PRGR_STAT_CD' : {'type' : 'string'},\r",
													"                            'INSU_KND_CD' : {'type' : 'string'},\r",
													"                            'LBLTODAY' : {'type' : 'string'},\r",
													"                            'CDINSUP' : {'type' : 'string'},\r",
													"                            'RCPT_AMT' : {'type' : ['string','null']},\r",
													"                            'TOT_SLF_BRDN_AMT' : {'type' : ['string','null']},\r",
													"                            'UNPAY_AMT' : {'type' : ['string','null']},\r",
													"                            'TODAY' : {'type' : ['string','null']},\r",
													"                            'RCVB' : {'type' : 'string'},\r",
													"                            'STATUS_BOARD_CD' : {'type' : 'string'},\r",
													"                            'STATUS_BOARD_NM' : {'type' : ['string','null']},\r",
													"                            'STATUS_BOARD_COLOR' : {'type' : ['string','null']},\r",
													"                            'STATUS_TIME' : {'type' : 'string'},\r",
													"                        },\r",
													"                    },\r",
													"                    'required': [\r",
													"                        'PAT_NO', 'PAT_NM', 'CHART_NO', 'PAT_JNO', 'ADDR',\r",
													"                        'MOBILE_NO', 'RMK_TXT', 'RCNT_VST_DD', 'STR_BSE_INFO', 'PAT_SEX_TP_CD', 'PATGRDCD', 'PATCOL', 'VIST_SN', 'RSRV_DD',\r",
													"                        'RSRV_ONO', 'RSRV_MEMO', 'RSRV_CFR_ID', 'RSRV_CNCL_YN', 'RSRV_NOTE_CD', 'RSRV_TP_CD', 'ACPT_DD', 'ACPT_TM', 'ACPTTM',\r",
													"                        'ACPT_CNCL_YN', 'ACPT_MEMO', 'DIAG_TP_CD', 'CDDIAG', 'ONLY_MOPR_YN', 'MOPR_FNSH_YN', 'MOPR_STA_TM', 'MOPR_END_TM',\r",
													"                        'MOPR_TP_CD', 'MOPR_TP_NM', 'DIAG_FLD_CD', 'DIAG_FLD_NM', 'MOPR_CL', 'CNST_ID', 'FST_CNST_TM', 'CNSTDD', 'CNSTTM',\r",
													"                        'NEED_CNST_YN', 'RCPT_WAIT_TM', 'RCPTDD', 'RCPT_TM', 'CHRG_DR_ID', 'CHRG_STAFF_ID', 'CDDR', 'STAFFNAME', 'STAFF_MEMO',\r",
													"                        'WITH_YN', 'MSG_INST_YN', 'MSG_VIST_BF_YN', 'MSG_VIST_DD_YN', 'KKO_INST_YN', 'KKO_VIST_BF_YN', 'KKO_VIST_DD_YN', \r",
													"                        'PRGR_STAT_CD', 'INSU_KND_CD', 'LBLTODAY', 'CDINSUP', 'RCPT_AMT', 'TOT_SLF_BRDN_AMT', 'UNPAY_AMT', 'TODAY', \r",
													"                        'RCVB', 'STATUS_BOARD_CD', 'STATUS_BOARD_NM', 'STATUS_BOARD_COLOR', 'STATUS_TIME']\r",
													"                },\r",
													"                'CD': {\r",
													"                    'type': 'array', \r",
													"                    'items': { \r",
													"                                                'properties' : {\r",
													"                            'PAT_NO' : {'type' : 'string'},\r",
													"                            'PAT_NM' : {'type' : 'string'},\r",
													"                            'CHART_NO' : {'type' : 'string'},\r",
													"                            'PAT_JNO' : {'type' : 'string'},\r",
													"                            'ADDR' : {'type' : 'string'},\r",
													"                            'MOBILE_NO' : {'type' : 'string'},\r",
													"                            'RMK_TXT' : {'type' : 'string'},\r",
													"                            'RCNT_VST_DD' : {'type' : 'string'},\r",
													"                            'STR_BSE_INFO' : {'type' : 'string'},\r",
													"                            'PAT_SEX_TP_CD' : {'type' : 'string'},\r",
													"                            'PATGRDCD' : {'type' : 'string'},\r",
													"                            'PATCOL' : {'type' : 'string'},\r",
													"                            'VIST_SN' : {'type' : 'string'},\r",
													"                            'RSRV_DD' : {'type' : 'string'},\r",
													"                            'RSRV_ONO' : {'type' : 'string'},\r",
													"                            'RSRV_MEMO' : {'type' : 'string'},\r",
													"                            'RSRV_CFR_ID' : {'type' : 'string'},\r",
													"                            'RSRV_CNCL_YN' : {'type' : 'string'},\r",
													"                            'RSRV_NOTE_CD' : {'type' : 'string'},\r",
													"                            'RSRV_TP_CD' : {'type' : 'string'},\r",
													"                            'ACPT_DD' : {'type' : 'string'},\r",
													"                            'ACPT_TM' : {'type' : 'string'},\r",
													"                            'ACPTTM' : {'type' : 'string'},\r",
													"                            'ACPT_CNCL_YN' : {'type' : 'string'},\r",
													"                            'ACPT_MEMO' : {'type' : 'string'},\r",
													"                            'DIAG_TP_CD' : {'type' : 'string'},\r",
													"                            'CDDIAG' : {'type' : 'string'},\r",
													"                            'ONLY_MOPR_YN' : {'type' : 'string'},\r",
													"                            'MOPR_FNSH_YN' : {'type' : 'string'},\r",
													"                            'MOPR_STA_TM' : {'type' : 'string'},\r",
													"                            'MOPR_END_TM' : {'type' : 'string'},\r",
													"                            'MOPR_TP_CD' : {'type' : 'string'},\r",
													"                            'MOPR_TP_NM' : {'type' : 'string'},\r",
													"                            'DIAG_FLD_CD' : {'type' : 'string'},\r",
													"                            'DIAG_FLD_NM' : {'type' : 'string'},\r",
													"                            'MOPR_CL' : {'type' : 'string'},\r",
													"                            'CNST_ID' : {'type' : 'string'},\r",
													"                            'FST_CNST_TM' : {'type' : 'string'},\r",
													"                            'CNSTDD' : {'type' : ['string','null']},\r",
													"                            'CNSTTM' : {'type' : ['string','null']},\r",
													"                            'NEED_CNST_YN' : {'type' : 'string'},\r",
													"                            'RCPT_WAIT_TM' : {'type' : 'string'},\r",
													"                            'RCPTDD' : {'type' : ['string','null']},\r",
													"                            'RCPT_TM' : {'type' : 'string'},\r",
													"                            'CHRG_DR_ID' : {'type' : 'string'},\r",
													"                            'CHRG_STAFF_ID' : {'type' : 'string'},\r",
													"                            'CDDR' : {'type' : 'string'},\r",
													"                            'STAFFNAME' : {'type' : 'string'},\r",
													"                            'STAFF_MEMO' : {'type' : 'string'},\r",
													"                            'WITH_YN' : {'type' : 'string'},\r",
													"                            'MSG_INST_YN' : {'type' : 'string'},\r",
													"                            'MSG_VIST_BF_YN' : {'type' : 'string'},\r",
													"                            'MSG_VIST_DD_YN' : {'type' : 'string'},\r",
													"                            'KKO_INST_YN' : {'type' : 'string'},\r",
													"                            'KKO_VIST_BF_YN' : {'type' : 'string'},\r",
													"                            'KKO_VIST_DD_YN' : {'type' : 'string'},\r",
													"                            'PRGR_STAT_CD' : {'type' : 'string'},\r",
													"                            'INSU_KND_CD' : {'type' : 'string'},\r",
													"                            'LBLTODAY' : {'type' : 'string'},\r",
													"                            'CDINSUP' : {'type' : 'string'},\r",
													"                            'RCPT_AMT' : {'type' : ['string','null']},\r",
													"                            'TOT_SLF_BRDN_AMT' : {'type' : ['string','null']},\r",
													"                            'UNPAY_AMT' : {'type' : ['string','null']},\r",
													"                            'TODAY' : {'type' : ['string','null']},\r",
													"                            'RCVB' : {'type' : 'string'},\r",
													"                            'STATUS_BOARD_CD' : {'type' : 'string'},\r",
													"                            'STATUS_BOARD_NM' : {'type' : ['string','null']},\r",
													"                            'STATUS_BOARD_COLOR' : {'type' : ['string','null']},\r",
													"                            'STATUS_TIME' : {'type' : 'string'},\r",
													"                        } \r",
													"                    },\r",
													"                    'required': [\r",
													"                        'PAT_NO', 'PAT_NM', 'CHART_NO', 'PAT_JNO', 'ADDR',\r",
													"                        'MOBILE_NO', 'RMK_TXT', 'RCNT_VST_DD', 'STR_BSE_INFO', 'PAT_SEX_TP_CD', 'PATGRDCD', 'PATCOL', 'VIST_SN', 'RSRV_DD',\r",
													"                        'RSRV_ONO', 'RSRV_MEMO', 'RSRV_CFR_ID', 'RSRV_CNCL_YN', 'RSRV_NOTE_CD', 'RSRV_TP_CD', 'ACPT_DD', 'ACPT_TM', 'ACPTTM',\r",
													"                        'ACPT_CNCL_YN', 'ACPT_MEMO', 'DIAG_TP_CD', 'CDDIAG', 'ONLY_MOPR_YN', 'MOPR_FNSH_YN', 'MOPR_STA_TM', 'MOPR_END_TM',\r",
													"                        'MOPR_TP_CD', 'MOPR_TP_NM', 'DIAG_FLD_CD', 'DIAG_FLD_NM', 'MOPR_CL', 'CNST_ID', 'FST_CNST_TM', 'CNSTDD', 'CNSTTM',\r",
													"                        'NEED_CNST_YN', 'RCPT_WAIT_TM', 'RCPTDD', 'RCPT_TM', 'CHRG_DR_ID', 'CHRG_STAFF_ID', 'CDDR', 'STAFFNAME', 'STAFF_MEMO',\r",
													"                        'WITH_YN', 'MSG_INST_YN', 'MSG_VIST_BF_YN', 'MSG_VIST_DD_YN', 'KKO_INST_YN', 'KKO_VIST_BF_YN', 'KKO_VIST_DD_YN', \r",
													"                        'PRGR_STAT_CD', 'INSU_KND_CD', 'LBLTODAY', 'CDINSUP', 'RCPT_AMT', 'TOT_SLF_BRDN_AMT', 'UNPAY_AMT', 'TODAY', \r",
													"                        'RCVB', 'STATUS_BOARD_CD', 'STATUS_BOARD_NM', 'STATUS_BOARD_COLOR', 'STATUS_TIME']\r",
													"                },\r",
													"                'J': {\r",
													"                    'type': 'array', \r",
													"                    'items': { \r",
													"                                                'properties' : {\r",
													"                            'PAT_NO' : {'type' : 'string'},\r",
													"                            'PAT_NM' : {'type' : 'string'},\r",
													"                            'CHART_NO' : {'type' : 'string'},\r",
													"                            'PAT_JNO' : {'type' : 'string'},\r",
													"                            'ADDR' : {'type' : 'string'},\r",
													"                            'MOBILE_NO' : {'type' : 'string'},\r",
													"                            'RMK_TXT' : {'type' : 'string'},\r",
													"                            'RCNT_VST_DD' : {'type' : 'string'},\r",
													"                            'STR_BSE_INFO' : {'type' : 'string'},\r",
													"                            'PAT_SEX_TP_CD' : {'type' : 'string'},\r",
													"                            'PATGRDCD' : {'type' : 'string'},\r",
													"                            'PATCOL' : {'type' : 'string'},\r",
													"                            'VIST_SN' : {'type' : 'string'},\r",
													"                            'RSRV_DD' : {'type' : 'string'},\r",
													"                            'RSRV_ONO' : {'type' : 'string'},\r",
													"                            'RSRV_MEMO' : {'type' : 'string'},\r",
													"                            'RSRV_CFR_ID' : {'type' : 'string'},\r",
													"                            'RSRV_CNCL_YN' : {'type' : 'string'},\r",
													"                            'RSRV_NOTE_CD' : {'type' : 'string'},\r",
													"                            'RSRV_TP_CD' : {'type' : 'string'},\r",
													"                            'ACPT_DD' : {'type' : 'string'},\r",
													"                            'ACPT_TM' : {'type' : 'string'},\r",
													"                            'ACPTTM' : {'type' : 'string'},\r",
													"                            'ACPT_CNCL_YN' : {'type' : 'string'},\r",
													"                            'ACPT_MEMO' : {'type' : 'string'},\r",
													"                            'DIAG_TP_CD' : {'type' : 'string'},\r",
													"                            'CDDIAG' : {'type' : 'string'},\r",
													"                            'ONLY_MOPR_YN' : {'type' : 'string'},\r",
													"                            'MOPR_FNSH_YN' : {'type' : 'string'},\r",
													"                            'MOPR_STA_TM' : {'type' : 'string'},\r",
													"                            'MOPR_END_TM' : {'type' : 'string'},\r",
													"                            'MOPR_TP_CD' : {'type' : 'string'},\r",
													"                            'MOPR_TP_NM' : {'type' : 'string'},\r",
													"                            'DIAG_FLD_CD' : {'type' : 'string'},\r",
													"                            'DIAG_FLD_NM' : {'type' : 'string'},\r",
													"                            'MOPR_CL' : {'type' : 'string'},\r",
													"                            'CNST_ID' : {'type' : 'string'},\r",
													"                            'FST_CNST_TM' : {'type' : 'string'},\r",
													"                            'CNSTDD' : {'type' : ['string','null']},\r",
													"                            'CNSTTM' : {'type' : ['string','null']},\r",
													"                            'NEED_CNST_YN' : {'type' : 'string'},\r",
													"                            'RCPT_WAIT_TM' : {'type' : 'string'},\r",
													"                            'RCPTDD' : {'type' : ['string','null']},\r",
													"                            'RCPT_TM' : {'type' : 'string'},\r",
													"                            'CHRG_DR_ID' : {'type' : 'string'},\r",
													"                            'CHRG_STAFF_ID' : {'type' : 'string'},\r",
													"                            'CDDR' : {'type' : 'string'},\r",
													"                            'STAFFNAME' : {'type' : 'string'},\r",
													"                            'STAFF_MEMO' : {'type' : 'string'},\r",
													"                            'WITH_YN' : {'type' : 'string'},\r",
													"                            'MSG_INST_YN' : {'type' : 'string'},\r",
													"                            'MSG_VIST_BF_YN' : {'type' : 'string'},\r",
													"                            'MSG_VIST_DD_YN' : {'type' : 'string'},\r",
													"                            'KKO_INST_YN' : {'type' : 'string'},\r",
													"                            'KKO_VIST_BF_YN' : {'type' : 'string'},\r",
													"                            'KKO_VIST_DD_YN' : {'type' : 'string'},\r",
													"                            'PRGR_STAT_CD' : {'type' : 'string'},\r",
													"                            'INSU_KND_CD' : {'type' : 'string'},\r",
													"                            'LBLTODAY' : {'type' : 'string'},\r",
													"                            'CDINSUP' : {'type' : 'string'},\r",
													"                            'RCPT_AMT' : {'type' : ['string','null']},\r",
													"                            'TOT_SLF_BRDN_AMT' : {'type' : ['string','null']},\r",
													"                            'UNPAY_AMT' : {'type' : ['string','null']},\r",
													"                            'TODAY' : {'type' : ['string','null']},\r",
													"                            'RCVB' : {'type' : 'string'},\r",
													"                            'STATUS_BOARD_CD' : {'type' : 'string'},\r",
													"                            'STATUS_BOARD_NM' : {'type' : ['string','null']},\r",
													"                            'STATUS_BOARD_COLOR' : {'type' : ['string','null']},\r",
													"                            'STATUS_TIME' : {'type' : 'string'},\r",
													"                            } \r",
													"                        },\r",
													"                        'required': [\r",
													"                            'PAT_NO', 'PAT_NM', 'CHART_NO', 'PAT_JNO', 'ADDR',\r",
													"                            'MOBILE_NO', 'RMK_TXT', 'RCNT_VST_DD', 'STR_BSE_INFO', 'PAT_SEX_TP_CD', 'PATGRDCD', 'PATCOL', 'VIST_SN', 'RSRV_DD',\r",
													"                            'RSRV_ONO', 'RSRV_MEMO', 'RSRV_CFR_ID', 'RSRV_CNCL_YN', 'RSRV_NOTE_CD', 'RSRV_TP_CD', 'ACPT_DD', 'ACPT_TM', 'ACPTTM',\r",
													"                            'ACPT_CNCL_YN', 'ACPT_MEMO', 'DIAG_TP_CD', 'CDDIAG', 'ONLY_MOPR_YN', 'MOPR_FNSH_YN', 'MOPR_STA_TM', 'MOPR_END_TM',\r",
													"                            'MOPR_TP_CD', 'MOPR_TP_NM', 'DIAG_FLD_CD', 'DIAG_FLD_NM', 'MOPR_CL', 'CNST_ID', 'FST_CNST_TM', 'CNSTDD', 'CNSTTM',\r",
													"                            'NEED_CNST_YN', 'RCPT_WAIT_TM', 'RCPTDD', 'RCPT_TM', 'CHRG_DR_ID', 'CHRG_STAFF_ID', 'CDDR', 'STAFFNAME', 'STAFF_MEMO',\r",
													"                            'WITH_YN', 'MSG_INST_YN', 'MSG_VIST_BF_YN', 'MSG_VIST_DD_YN', 'KKO_INST_YN', 'KKO_VIST_BF_YN', 'KKO_VIST_DD_YN', \r",
													"                            'PRGR_STAT_CD', 'INSU_KND_CD', 'LBLTODAY', 'CDINSUP', 'RCPT_AMT', 'TOT_SLF_BRDN_AMT', 'UNPAY_AMT', 'TODAY', \r",
													"                            'RCVB', 'STATUS_BOARD_CD', 'STATUS_BOARD_NM', 'STATUS_BOARD_COLOR', 'STATUS_TIME']\r",
													"                        },\r",
													"                },\r",
													"            },\r",
													"            'required': ['A','F','B','CD','J']\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.1 오늘 날짜 환자 리스트 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);\r",
													"\r",
													"let resultArr = [];\r",
													"for (let index in resJson.data){\r",
													"    let currentArr = resJson.data[index]\r",
													"    for(let item of currentArr){\r",
													"        if(item.PAT_NO === pm.collectionVariables.get('PAT_NO')){\r",
													"            resultArr.push(item);\r",
													"        }\r",
													"    }\r",
													"}\r",
													"\r",
													"let randomArr = resultArr[Math.floor(Math.random() * resultArr.length)];\r",
													"\r",
													"if (randomArr != []){\r",
													"    pm.collectionVariables.set(\"VIST_SN\", randomArr.VIST_SN);\r",
													"    pm.collectionVariables.set(\"MOPR_CD\", randomArr.MOPR_TP_CD);\r",
													"    pm.collectionVariables.set(\"MOPR_NM\", randomArr.MOPR_TP_NM);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"const today = new Date();\r",
													"\r",
													"const year =String(today.getFullYear());\r",
													"const month = String(today.getMonth()+1);\r",
													"const day = String(today.getDate());\r",
													"\r",
													"let newMonth = null\r",
													"let newDay = null\r",
													"let date = null\r",
													"\r",
													"if (month < 10){\r",
													"    newMonth = \"0\"+ month\r",
													"}\r",
													"if(day < 10){\r",
													"    newDay = \"0\"+ day\r",
													"}\r",
													"\r",
													"if (newMonth != null){\r",
													"    if (newDay != null){\r",
													"        date = year+newMonth+newDay;\r",
													"    } else {\r",
													"        date = year+newMonth+day;\r",
													"    }\r",
													"} else {\r",
													"    if (newDay != null){\r",
													"        date = year+month+newDay;\r",
													"    } else {\r",
													"        date = year+month+day;\r",
													"    }\r",
													"}\r",
													"pm.request.url.query.add(\r",
													"    {key : 'searchDay', value: date},\r",
													")"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/list",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.1.1 미입력 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.1.1 날짜 미입력 환자 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(\"testValidateMissingRequiredData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.url.query.add(\r",
													"    {key : 'searchDay', value: ''},\r",
													")"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/list",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.1.2 오입력 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': {\r",
													"            'type': 'object',\r",
													"            'properties': {\r",
													"                'A': { 'type': 'array', 'items': { 'type': 'object' } },\r",
													"                'F': { 'type': 'array', 'items': { 'type': 'object' } },\r",
													"                'B': { 'type': 'array', 'items': { 'type': 'object' } },\r",
													"                'CD': { 'type': 'array', 'items': { 'type': 'object' } },\r",
													"                'J': { 'type': 'array', 'items': { 'type': 'object' } }\r",
													"            },\r",
													"            'required': ['A', 'F', 'B', 'CD', 'J']\r",
													"        }\r",
													"    },\r",
													"    'required': ['status', 'result', 'data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.equals(\"200\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.url.query.add(\r",
													"    {key : 'searchDay', value: 'ㅁㄴㅇ'},\r",
													")"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/list",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.1.3 변조 토큰",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `4.1.3 변조토큰 사용하여 날짜 환자 리스트 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.url.query.add(\r",
													"    {key : 'searchDay', value: '20240408'},\r",
													")"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}asd",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/list",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"list"
											]
										}
									},
									"response": []
								}
							],
							"description": "선행조건\n\n- 차트 예약/부도/접수/시술/수납 탭 각각 데이터 1건이상 존재"
						},
						{
							"name": "4.2 현황판 공지사항",
							"item": [
								{
									"name": "4.2 현황판 공지사항 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': {\r",
													"            'type': 'array',\r",
													"            'minItems': 1,\r",
													"            'properties': {\r",
													"                \"NOTICE_NO\" : {'type':'string'},\r",
													"                \"NOTICE_TXT\" : {'type':'string'},\r",
													"                \"FRST_REG_ID\" : {'type':'string'},\r",
													"                \"USER_NM\" : {'type':'string'},\r",
													"                \"NOTICE_FD\" : {'type':'string'},\r",
													"                \"NOTICE_LD\" : {'type':'string'},\r",
													"                \"SetDateTime\" : {'type':'string'},\r",
													"                \"CNCL_YN\" : {'type':'string'},\r",
													"            },\r",
													"        'required': ['NOTICE_NO','NOTICE_TXT','FRST_REG_ID','USER_NM','NOTICE_FD','NOTICE_LD','SetDateTime','CNCL_YN'],\r",
													"        },\r",
													"    },\r",
													"    'required':['status','result','data'],\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.2 현황판 공지사항 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.url.query.add(\r",
													"    {key : 'searchDay', value: '20250206'},\r",
													")"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/notice",
											"host": [
												"{{domain}}"
											],
											"path": [
												"notice"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.2.1 미입력 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.2.1 파라미터 미입력 현황판 공지사항 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(\"testValidateMissingRequiredData\"));\r",
													"\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/notice",
											"host": [
												"{{domain}}"
											],
											"path": [
												"notice"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.2.2 오입력 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': {\r",
													"            'type': 'array',\r",
													"        }\r",
													"    },\r",
													"    'required': ['status', 'result', 'data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.1.1 날짜 오입력 환자 리스트 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testEmptyJsonData = eval(pm.collectionVariables.get(\"testEmptyJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testEmptyJsonData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"pm.request.url.query.add({key: 'searchDay', value: 'ㅁㄴㅇㅁㄴㅇㅁㄴㅇ'})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/notice",
											"host": [
												"{{domain}}"
											],
											"path": [
												"notice"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.2.3 변조 토큰",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `4.2.3 변조토큰 사용하여 현황판 공지사항 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.url.query.add(\r",
													"    {key : 'searchDay', value: '20240425'},\r",
													")"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/notice",
											"host": [
												"{{domain}}"
											],
											"path": [
												"notice"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4.3 담당의 정보 조회",
							"item": [
								{
									"name": "4.3 담당의 정보 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': {\r",
													"            'type': 'array',\r",
													"            'minItems': 1,\r",
													"                'properties':{\r",
													"                    'USER_ID': {'type': \"string\"},\r",
													"                    'USER_NM': {'type': \"string\"},\r",
													"                },\r",
													"            'required': ['USER_ID', 'USER_NM'],\r",
													"        },\r",
													"    },\r",
													"    'required':['status','result','data'],\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.3 담당의 정보 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);\r",
													"\r",
													"const userList = resJson.data[Math.floor(Math.random() * resJson.data.length)];\r",
													"pm.collectionVariables.set(\"USER_ID\", userList.USER_ID);\r",
													"pm.collectionVariables.set(\"USER_NAME\", userList.USER_NM);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/doctor",
											"host": [
												"{{domain}}"
											],
											"path": [
												"doctor"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.3.1 변조 토큰",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `4.3.1 변조토큰 사용하여 담당의 정보 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/doctor",
											"host": [
												"{{domain}}"
											],
											"path": [
												"doctor"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4.4 환자 상세 정보 조희",
							"item": [
								{
									"name": "4.4 환자 상세 정보 조희",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': {\r",
													"            'type': 'object',\r",
													"            'minItems': 1,\r",
													"            'properties': {\r",
													"                'PAT_NO' : {'type' : 'string'},\r",
													"                'CHART_NO' : {'type' : 'string'},\r",
													"                'PAT_NM' : {'type' : 'string'},\r",
													"                'PAT_JNO' : {'type' : 'string'},\r",
													"                'PAT_JNO2' : {'type' : 'string'},\r",
													"                'PAT_AGE' : {'type' : 'string'},\r",
													"                'PAT_BTH' : {'type' : 'string'},\r",
													"                'PAT_SEX_TP_CD' : {'type' : 'string'},\r",
													"                'MOBILE_NO' : {'type' : 'string'},\r",
													"                'TEL_NO' : {'type' : ['string','null']},\r",
													"                'ADDR' : {'type' : 'string'},\r",
													"                'DTL_ADDR' : {'type' : 'string'},\r",
													"                'INSU_KND_CD' : {'type' : 'string'},\r",
													"                'INSUP_NO' : {'type' : 'string'},\r",
													"                'JOB' : {'type' : 'string'},\r",
													"                'FST_VST_DD' : {'type' : 'string'},\r",
													"                'RCNT_VST_DD' : {'type' : 'string'},\r",
													"                'REFEREE' : {'type' : 'string'},\r",
													"                'PSPR_NO' : {'type' : 'string'},\r",
													"                'AD_SMS_AGR_YN' : {'type' : 'string'},\r",
													"                'PRSN_INFO_AGR_YN' : {'type' : 'string'},\r",
													"                'SMS_AGR_YN' : {'type' : 'string'},\r",
													"                'FRGN_YN' : {'type' : 'string'},\r",
													"                'RMK_TXT' : {'type' : 'string'},\r",
													"                'PAT_KND_CD' : {'type' : 'string'},\r",
													"                'PAT_GRD_CD' : {'type' : 'string'},\r",
													"                'VST_PTH_CD' : {'type' : 'string'},\r",
													"                'VISTCNT' : {'type' : 'string'},\r",
													"                'RCPT_AMT' : {'type' : 'string'},\r",
													"                'PAT_GRD_CODE' : {'type' : 'string'},\r",
													"                'VST_PTH_CODE' : {'type' : ['string','null']},\r",
													"                'IMAGE_URL' : {'type' : 'string'},\r",
													"                'REFEREE_NM' : {'type' : 'string'},\r",
													"            },\r",
													"        'required': [\r",
													"            'PAT_NO','CHART_NO','PAT_NM','PAT_JNO','PAT_JNO2','PAT_AGE','PAT_BTH','PAT_SEX_TP_CD',\r",
													"            'MOBILE_NO','TEL_NO','ADDR','DTL_ADDR','INSU_KND_CD','INSUP_NO','JOB','FST_VST_DD','RCNT_VST_DD',\r",
													"            'REFEREE','PSPR_NO','AD_SMS_AGR_YN','PRSN_INFO_AGR_YN','SMS_AGR_YN','FRGN_YN','RMK_TXT',\r",
													"            'PAT_KND_CD','PAT_GRD_CD','VST_PTH_CD','VISTCNT','RCPT_AMT','PAT_GRD_CODE','VST_PTH_CODE',\r",
													"            'IMAGE_URL','REFEREE_NM'\r",
													"            ]\r",
													"        },\r",
													"    },\r",
													"    'required':['status','result','data'],\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.4 환자 상세 정보 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/detail/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"detail",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.4.1 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/detail/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"detail",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "4.4.2 오입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.4.2 파라미터 오입력 환자 상세 조회`;\r",
													"\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testEmptyJsonData = eval(pm.collectionVariables.get(\"testEmptyJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testEmptyJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/detail/121",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"detail",
												"121"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.4.2 변조토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `4.4.3 변조토큰 사용하여 환자 상세 정보 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/detail/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"detail",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4.5 환자 예약내역 조회",
							"item": [
								{
									"name": "4.5 환자 예약내역 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': {'type': 'string'},\r",
													"        'result': {'type': 'string'},\r",
													"        'data': {\r",
													"            'type': 'array', \r",
													"            'minItems': 1,\r",
													"            'items': {\r",
													"                'type': 'object',\r",
													"                'properties': {\r",
													"                    \"RSRV_DD\" : {'type' : 'string'},\r",
													"                    \"RSRV_TM\" : {'type' : 'string'},\r",
													"                    \"USER_NM\" : {'type' : ['string','null']},\r",
													"                    \"DIAG_FLD_CD\" : {'type' : 'string'},\r",
													"                    \"RSRV_MEMO\" : {'type' : 'string'},\r",
													"                },\r",
													"                'required': ['RSRV_DD','RSRV_TM','USER_NM','DIAG_FLD_CD','RSRV_MEMO']\r",
													"            },\r",
													"        }\r",
													"    },\r",
													"    'required': ['status', 'result', 'data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.5 환자 예약내역 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/rsvn/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"rsvn",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.5.1 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/rsvn/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"rsvn",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "4.5.2 오입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.5.2 파라미터 오입력 환자 예약내역 조회`;\r",
													"\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testEmptyJsonData = eval(pm.collectionVariables.get(\"testEmptyJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testEmptyJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/rsvn/12311",
											"host": [
												"{{domain}}"
											],
											"path": [
												"rsvn",
												"12311"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.5.3 변조 토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `4.5.3 변조토큰 사용하여 환자 예약내역 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/rsvn/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"rsvn",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4.6 환자 정보 상세",
							"item": [
								{
									"name": "4.6 환자 정보 상세",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': {\r",
													"            'type': 'object',\r",
													"            'minItems': 1,\r",
													"            'properties':{\r",
													"                \"PAT_NM\" :{'type' : 'string'},\r",
													"                \"PATCOL\" :{'type' : 'string'},\r",
													"                \"CHART_NO\" :{'type' : 'string'},\r",
													"                \"PAT_JNO2\" :{'type' : 'string'},\r",
													"                \"PAT_BTH\" :{'type' : 'string'},\r",
													"                \"PAT_SEX_TP_NM\" :{'type' : 'string'},\r",
													"                \"PAT_AGE\" :{'type' : 'string'},\r",
													"                \"CHRG_DR_NM\" :{'type' : 'string'},\r",
													"                \"CDINSUP\" :{'type' : 'string'},\r",
													"                \"MOBILE_NO\" :{'type' : 'string'},\r",
													"                \"TEL_NO\" :{'type' : 'string'},\r",
													"                \"ADDR\" :{'type' : 'string'},\r",
													"                \"FST_VST_DD\" :{'type' : 'string'},\r",
													"                \"RCNT_VST_DD\" :{'type' : 'string'},\r",
													"                \"VISTCNT\" :{'type' : 'string'},\r",
													"                \"PAT_KND_CD\" :{'type' : 'string'},\r",
													"                \"PAT_GRD_CD\" :{'type' : 'string'},\r",
													"                \"VST_PTH_CD\" :{'type' : 'string'},\r",
													"                \"RCPT_AMT\" :{'type' : 'string'},\r",
													"                \"SMS_AGR_YN\" :{'type' : 'string'},\r",
													"                \"PRSN_INFO_AGR_YN\" :{'type' : 'string'},\r",
													"                \"FRGN_YN\" :{'type' : 'string'},\r",
													"                \"PSPR_NO\" :{'type' : 'string'},\r",
													"                \"REFEREE\" :{'type' : 'string'},\r",
													"                \"REFEREE_NM\" :{'type' : 'string'},\r",
													"                \"RMK_TXT\" :{'type' : 'string'},\r",
													"            },\r",
													"            'required': [\r",
													"                'PAT_NM','PATCOL','CHART_NO','PAT_JNO2','PAT_BTH','PAT_SEX_TP_NM','PAT_AGE','CHRG_DR_NM','CDINSUP',\r",
													"                'MOBILE_NO','TEL_NO','ADDR','FST_VST_DD','RCNT_VST_DD','VISTCNT','PAT_KND_CD','PAT_GRD_CD','VST_PTH_CD',\r",
													"                'RCPT_AMT','SMS_AGR_YN','AD_SMS_AGR_YN','PRSN_INFO_AGR_YN','FRGN_YN','PSPR_NO','REFEREE','REFEREE_NM','RMK_TXT'\r",
													"            ]\r",
													"        },\r",
													"    },\r",
													"    'required':['status','result','data'],\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.6 환자 정보 상세 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/rsvn/ptnt/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"rsvn",
												"ptnt",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.6.1 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/rsvn/ptnt/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"rsvn",
												"ptnt",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "4.6.2 오입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': {'type': 'array'}\r",
													"    },\r",
													"    'required': ['status','result', 'data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.6.2 환자정보 오입력 환자 정보 상세 조회`;\r",
													"\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testEmptyJsonData = eval(pm.collectionVariables.get(\"testEmptyJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testEmptyJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/rsvn/ptnt/1231111",
											"host": [
												"{{domain}}"
											],
											"path": [
												"rsvn",
												"ptnt",
												"1231111"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.6.3 변조 토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `4.6.3 변조토큰 사용하여 환자 상세 정보 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/rsvn/ptnt/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"rsvn",
												"ptnt",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4.7 환자 정보 상세 업데이트",
							"item": [
								{
									"name": "4.7 환자 정보 상세 업데이트",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"pm.collectionVariables.set('testJno', '941111-1111111');\r",
													"pm.collectionVariables.set('testMobile', '010-0000-0000');\r",
													"pm.collectionVariables.set('testAddr', '서울특별시 강남구 도산대로67길 13-5(청담동, BLS클리닉빌딩)');\r",
													"\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'urlencoded',\r",
													"    urlencoded :[\r",
													"        {key : 'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
													"        {key : 'patNm', value: pm.collectionVariables.get('PAT_NM')},\r",
													"        {key : 'jNo', value: pm.collectionVariables.get('testJno')},\r",
													"        {key : 'mobile', value: pm.collectionVariables.get('testMobile')},\r",
													"        {key : 'addr', value: pm.collectionVariables.get('testAddr')},\r",
													"    ]\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'status' : {'type': 'string'},\r",
													"    'result' : {'type': 'string'},\r",
													"    'required': ['status', 'result']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.7 환자 정보 상세 정보 업데이트`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);\r",
													"\r",
													"if(resJson.status === \"200\"){\r",
													"    const requestConfig = {\r",
													"        url : pm.environment.get('domain') + `/ptnt/detail/` + pm.collectionVariables.get('PAT_NO'),\r",
													"        method : \"GET\",\r",
													"        header: {\r",
													"            'Authorization': 'Bearer ' + pm.environment.get('accessToken'),\r",
													"        },\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(requestConfig, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err); \r",
													"            return;\r",
													"        }\r",
													"        const resData = res.json().data;\r",
													"        pm.test(`${testDescription} - 저장 후 비교 조회 테스트 실패`, () => {\r",
													"            pm.expect(resData.MOBILE_NO).to.be.eql(pm.collectionVariables.get('testMobile'));\r",
													"            pm.expect(resData.PAT_JNO2).to.be.eql(pm.collectionVariables.get('testJno').slice(0,8));\r",
													"            pm.expect(resData.ADDR).to.be.eql(pm.collectionVariables.get('testAddr'));\r",
													"        });\r",
													"    }); \r",
													"\r",
													"\r",
													"    const requestUpdateConfig = {\r",
													"        url: pm.environment.get('domain') + '/rsvn/ptnt',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Authorization': 'Bearer ' + pm.environment.get('accessToken'),\r",
													"            'Content-Type': 'application/x-www-form-urlencoded'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'urlencoded',\r",
													"            urlencoded: [\r",
													"                { key: 'patNo', value: pm.collectionVariables.get('PAT_NO') },\r",
													"                { key: 'patNm', value: pm.collectionVariables.get('PAT_NM') },\r",
													"                { key: 'jNo', value: pm.collectionVariables.get('PAT_JNO') },\r",
													"                { key: 'mobile', value: pm.collectionVariables.get('MOBILE_NO') },\r",
													"                { key: 'addr', value: pm.collectionVariables.get('ADDR') }\r",
													"            ]\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(requestUpdateConfig, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err); \r",
													"            return;\r",
													"        }\r",
													"        const resUpdateResponseData = res.json();\r",
													"        if (resUpdateResponseData.status === \"200\" && resUpdateResponseData.result === \"성공\"){\r",
													"            console.log(\"user update sucess\");\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/rsvn/ptnt",
											"host": [
												"{{domain}}"
											],
											"path": [
												"rsvn",
												"ptnt"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.7.1 모든값 입력",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.collectionVariables.set(\"testDtlAddr\", \"6, 7층 (청담동 93-12)\");\r",
													"pm.collectionVariables.set(\"testFtgnYn\", \"1\");\r",
													"pm.collectionVariables.set(\"testSmsYn\", \"1\");\r",
													"pm.collectionVariables.set(\"testAdSmsYn\", \"1\");\r",
													"pm.collectionVariables.set(\"testPrsnYn\", \"1\");\r",
													"pm.collectionVariables.set(\"testReferee\", \"0000001204\");\r",
													"pm.collectionVariables.set(\"testPsprno\", \"M00000001\");\r",
													"pm.collectionVariables.set(\"testTelNo\", \"010-1111-1111\")\r",
													"pm.collectionVariables.set(\"testNm\", \"테스트데이터\")\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'urlencoded',\r",
													"    urlencoded :[\r",
													"        {key : 'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
													"        {key : 'patNm', value: pm.collectionVariables.get('testNm')},\r",
													"        {key : 'jNo', value: pm.collectionVariables.get('testJno')},\r",
													"        {key : 'mobile', value: pm.collectionVariables.get('testMobile')},\r",
													"        {key : 'addr', value: pm.collectionVariables.get('testAddr')},\r",
													"        {key : 'dtlAddr', value: pm.collectionVariables.get(\"testDtlAddr\")},\r",
													"        {key : 'telNo', value: pm.collectionVariables.get('testMobile')},\r",
													"        {key : 'frgnYn', value: pm.collectionVariables.get(\"testFtgnYn\")},\r",
													"        {key : 'referee', value: pm.collectionVariables.get(\"testReferee\")},\r",
													"        {key : 'vstPthCd', value: pm.collectionVariables.get('VST_PTH_CD')},\r",
													"        {key : 'psprNo', value: pm.collectionVariables.get(\"testPsprno\")},\r",
													"        {key : 'smsYn', value: pm.collectionVariables.get(\"testSmsYn\")},\r",
													"        {key : 'adSmsYn', value: pm.collectionVariables.get(\"testAdSmsYn\")},\r",
													"        {key : 'prsnYn', value: pm.collectionVariables.get(\"testPrsnYn\")},\r",
													"    ]\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'status' : {'type': 'string'},\r",
													"    'result' : {'type': 'string'},\r",
													"    'required': ['status', 'result']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.7 환자 정보 상세 정보 업데이트`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);\r",
													"\r",
													"\r",
													"if(resJson.status === \"200\"){\r",
													"    const requestConfig = {\r",
													"        url : pm.environment.get('domain') + `/ptnt/detail/` + pm.collectionVariables.get('PAT_NO'),\r",
													"        method : \"GET\",\r",
													"        header: {\r",
													"            'Authorization': 'Bearer ' + pm.environment.get('accessToken'),\r",
													"        },\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(requestConfig, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err); \r",
													"            return;\r",
													"        }\r",
													"        const resData = res.json().data;\r",
													"        console.log(resData);\r",
													"        pm.test(`${testDescription} - 저장 후 비교 조회 테스트 실패`, () => {\r",
													"            pm.expect(resData.PAT_NM).to.be.eql(pm.collectionVariables.get('testNm'));\r",
													"            pm.expect(resData.MOBILE).to.be.eql(pm.collectionVariables.get('testMobile'));\r",
													"            pm.expect(resData.DTL_ADDR).to.be.eql(pm.collectionVariables.get('testDtlAddr'));\r",
													"            pm.expect(resData.TEL_NO).to.be.eql(pm.collectionVariables.get('telNo'));\r",
													"            pm.expect(resData.FTGN_YN).to.be.eql(pm.collectionVariables.get('testFtgnYn'));\r",
													"            pm.expect(resData.REFEREE).to.be.eql(pm.collectionVariables.get('testReferee'));\r",
													"            pm.expect(resData.PSPR_NO).to.be.eql(pm.collectionVariables.get('testPsprno'));\r",
													"            pm.expect(resData.SMS_YN).to.be.eql(pm.collectionVariables.get('testSmsYn'));\r",
													"            pm.expect(resData.AD_SMS_YN).to.be.eql(pm.collectionVariables.get('testAdSmsYn'));\r",
													"            pm.expect(resData.PRSN_YN).to.be.eql(pm.collectionVariables.get('testPrsnYn'));\r",
													"            pm.expect(resData.PAT_JNO2).to.be.eql(pm.collectionVariables.get('testJno').slice(0,8));\r",
													"            pm.expect(resData.ADDR).to.be.eql(pm.collectionVariables.get('testAddr'));\r",
													"        });\r",
													"    }); \r",
													"\r",
													"\r",
													"    const requestUpdateConfig = {\r",
													"        url: pm.environment.get('domain') + '/rsvn/ptnt',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Authorization': 'Bearer ' + pm.environment.get('accessToken'),\r",
													"            'Content-Type': 'application/x-www-form-urlencoded'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'urlencoded',\r",
													"            urlencoded: [\r",
													"                {key : 'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
													"                {key : 'patNm', value: pm.collectionVariables.get('PAT_NM')},\r",
													"                {key : 'jNo', value: pm.collectionVariables.get('PAT_JNO')},\r",
													"                {key : 'mobile', value: pm.collectionVariables.get('MOBILE_NO')},\r",
													"                {key : 'addr', value: pm.collectionVariables.get('testAddr')},\r",
													"                {key : 'dtlAddr', value: pm.collectionVariables.get(\"DTL_ADDR\")},\r",
													"                {key : 'telNo', value: pm.collectionVariables.get('TEL_NO')},\r",
													"                {key : 'frgnYn', value: pm.collectionVariables.get(\"FRGN_YN\")},\r",
													"                {key : 'referee', value: pm.collectionVariables.get(\"REFEREE\")},\r",
													"                {key : 'vstPthCd', value: pm.collectionVariables.get('VST_PTH_CD')},\r",
													"                {key : 'psprNo', value: pm.collectionVariables.get(\"PSPR_NO\")},\r",
													"                {key : 'smsYn', value: pm.collectionVariables.get(\"SMS_YN\")},\r",
													"                {key : 'adSmsYn', value: pm.collectionVariables.get(\"AD_SMS_YN\")},\r",
													"                {key : 'prsnYn', value: pm.collectionVariables.get(\"PRSN_YN\")},\r",
													"            ]\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(requestUpdateConfig, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err); \r",
													"            return;\r",
													"        }\r",
													"        const resUpdateResponseData = res.json();\r",
													"        if (resUpdateResponseData.status === \"200\" && resUpdateResponseData.result === \"성공\"){\r",
													"            console.log(\"user update sucess\");\r",
													"        }\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/rsvn/ptnt/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"rsvn",
												"ptnt",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "4.7.2 미입력 업데이트",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'status' : {'type': 'string'},\r",
													"    'result' : {'type': 'string'},\r",
													"    'required': ['status', 'result']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json()\r",
													"const testDescription = `4.7.2 데이터 미입력 환자 정보 업데이트`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(\"testValidateMissingRequiredData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/rsvn/ptnt/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"rsvn",
												"ptnt",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "4.7.3 오입력 업데이트",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'urlencoded',\r",
													"    urlencoded :[\r",
													"        {key : 'patNo', value: 'ERROR'},\r",
													"        {key : 'patNm', value: 'ERROR'},\r",
													"        {key : 'jNo', value: 'error'},\r",
													"        {key : 'mobile', value:'error'},\r",
													"    ]\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.5.2 파라미터 오입력 환자 예약내역 조회`;\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testEmptyJsonData = eval(pm.collectionVariables.get(\"testEmptyJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testEmptyJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/rsvn/ptnt/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"rsvn",
												"ptnt",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "4.7.4 변조토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"const userData = {\r",
													"    'patNo': pm.collectionVariables.get('PAT_NO'),\r",
													"    'patNm': pm.collectionVariables.get('PAT_NM'),\r",
													"    'jNo': pm.collectionVariables.get('PAT_JNO'),\r",
													"    'mobile': pm.collectionVariables.get('MOBILE_NO'),\r",
													"    'addr':'강남구 역삼동 651-5번지',\r",
													"    'dtlAddr': 'asdasdasdasdasd',\r",
													"    'telNo': '010-1234-1234',\r",
													"    'frgnYn':'내국인',\r",
													"    'referee':'test Datasdaaaaaaaa',\r",
													"}\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: Object.entries(userData).map(([key, value]) => ({ key, value }))\r",
													"};\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `4.7.4 변조토큰 사용하여 환자 정보 업데이트`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/rsvn/ptnt/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"rsvn",
												"ptnt",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4.8 진료일자 별 환자 차트 조회",
							"item": [
								{
									"name": "4.8 진료일자 별 환자 차트 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': {\r",
													"            'minItems': 1,\r",
													"            'type': 'object',\r",
													"            'properties': {   \r",
													"                'date' : {\r",
													"                    'type' : 'array',\r",
													"                    'minItems': 1,\r",
													"                    'items' : {\r",
													"                        'properties' :{\r",
													"                            'DIAG_DD' : {'type' : 'string'},\r",
													"                            'VIST_SN' : {'type' : 'string'},\r",
													"                            'DIV_CD' : {'type' : 'string'},\r",
													"                            'CHRG_DR_NM' : {'type' : 'string'},\r",
													"                            'SYMT_PRGS' : {'type' : 'string'},\r",
													"                            'DIAG_MEMO' : {'type' : ['string','null']},\r",
													"                        },\r",
													"                        'required': ['DIAG_DD', 'VIST_SN','DIV_CD','CHRG_DR_NM','SYMT_PRGS','DIAG_MEMO']\r",
													"                    },\r",
													"                },\r",
													"                'sick' : {\r",
													"                    'type' : 'array',\r",
													"                    'minItems': 1,\r",
													"                    'items' : {\r",
													"                        'properties' : {\r",
													"                            'DIV_CD' : {'type' : 'string'},\r",
													"                            'VIST_SN' : {'type' : 'string'},\r",
													"                            'PRGS_NM' : {'type' : 'string'},\r",
													"                            'SICK_SYM' : {'type' : 'string'},\r",
													"                            'SICK_KOR_NM' : {'type' : 'string'},\r",
													"                            'SICK_ENG_NM' : {'type' : 'string'},\r",
													"                            'SICK_TP' : {'type' : 'string'},\r",
													"                            'PRCL_SYM' : {'type' : 'string'},\r",
													"                            'SUSPECT_YN' : {'type' : 'string'},\r",
													"                            'TP_CD_L' : {'type' : 'string'},\r",
													"                            'TP_CD_R' : {'type' : 'string'},\r",
													"                            'TP_CD_BOTH' : {'type' : 'string'},\r",
													"                        },\r",
													"                        'required' : ['DIV_CD', 'VIST_SN','PRGS_NM', 'SICK_SYM','SICK_KOR_NM','SICK_ENG_NM','SICK_TP','PRCL_SYM','SUSPECT_YN','TP_CD_L','TP_CD_R','TP_CD_BOTH']\r",
													"                    },\r",
													"                },\r",
													"                'prsc' : {\r",
													"                    'type' : 'array',\r",
													"                    'minItems': 1,\r",
													"                    'items' : {\r",
													"                        'properties' : { \r",
													"                            'DIV_CD' : {'type' : 'string'},\r",
													"                            'PRGS_NM' : {'type' : 'string'},\r",
													"                            'VIST_SN' : {'type' : 'string'},\r",
													"                            'PRSC_CD' : {'type' : 'string'},\r",
													"                            'PRSC_NM' : {'type' : 'string'},\r",
													"                            'PRSC_NO' : {'type' : 'string'},\r",
													"                            'TP_CD' : {'type' : 'string'},\r",
													"                            'UNI_DIV_CD' : {'type' : 'string'},\r",
													"                            'CZ_CD' : {'type' : 'string'},\r",
													"                            'ITEM_CD' : {'type' : 'string'},\r",
													"                            'PAY_TP' : {'type' : 'string'},\r",
													"                            'PAY_SLF_BRDN' : {'type' : 'string'},\r",
													"                            'IHSP_YN' : {'type' : 'string'},\r",
													"                            'EXP_TP_CD' : {'type' : 'string'},\r",
													"                            'FQ1_MDCT_QTY' : {'type' : 'string'},\r",
													"                            'DY1_INJC_FQ' : {'type' : 'string'},\r",
													"                            'TOT_MDCT_DDCNT' : {'type' : 'string'},\r",
													"                            'USAG_DSG_CD' : {'type' : 'string'},\r",
													"                            'USAG_DSG_TXT' : {'type' : 'string'},\r",
													"                            'AMT' : {'type' : 'string'},\r",
													"                            'PRCL_DESC_YN' : {'type' : 'string'},\r",
													"                            'DEL_YN' : {'type' : 'string'},\r",
													"                            'ADDC_YN' : {'type' : 'string'},\r",
													"                            'RCPT_YN' : {'type' : 'string'},\r",
													"                            'DUR_SND_YN' : {'type' : 'string'},\r",
													"                            'RMK_TXT' : {'type' : 'string'},\r",
													"                            'RQST_HOSP_CD' : {'type' : 'string'},\r",
													"                            'RQST_SPCM_NM' : {'type' : 'string'},\r",
													"                            'DR_LCS_NO' : {'type' : 'string'},\r",
													"                            'CHNG_DD' : {'type' : 'string'},\r",
													"                            'CFR_CD_INFO' : {'type' : ['string','null']},\r",
													"                            'UNPRC' : {'type' : 'string'},\r",
													"                            'CVAL_PNT' : {'type' : ['string','null']},\r",
													"                            'USE_GRANT' : {'type' : ['string','null']},\r",
													"                            'MAIN_CMPN_CD' : {'type' : 'string'},\r",
													"                            'OPT_CPMD_IMPL_CZ' : {'type' : 'string'},\r",
													"                            'DIV_NO' : {'type' : 'string'},\r",
													"                        },\r",
													"                        'required' : [\r",
													"                            'DIV_CD','PRGS_NM','VIST_SN','PRSC_CD','PRSC_NM',\r",
													"                            'PRSC_NO','TP_CD','UNI_DIV_CD','CZ_CD','ITEM_CD','PAY_TP','PAY_SLF_BRDN','IHSP_YN','EXP_TP_CD','FQ1_MDCT_QTY','DY1_INJC_FQ','TOT_MDCT_DDCNT','USAG_DSG_CD','USAG_DSG_TXT','AMT','PRCL_DESC_YN','DEL_YN','ADDC_YN','RCPT_YN','DUR_SND_YN','RMK_TXT','RQST_HOSP_CD','RQST_SPCM_NM','DR_LCS_NO','CHNG_DD','CFR_CD_INFO','UNPRC','CVAL_PNT','USE_GRANT','MAIN_CMPN_CD','OPT_CPMD_IMPL_CZ','DIV_NO'\r",
													"                        ]\r",
													"                    },\r",
													"                },\r",
													"            },\r",
													"            'required': ['date', 'prsc', 'sick']\r",
													"        },\r",
													"    },\r",
													"    'required': ['status', 'result', 'data'],\r",
													"};\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.8 진료일자 별 환자 차트 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/chart/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"chart",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.8.1 오입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': {\r",
													"            'type': 'object',\r",
													"            'properties': {\r",
													"                'date': { 'type': 'array', 'items': { 'type': 'object' } },\r",
													"                'sick': { 'type': 'array', 'items': { 'type': 'object' } },\r",
													"                'prsc': { 'type': 'array', 'items': { 'type': 'object' } },\r",
													"            },\r",
													"            'required': ['date', 'sick', 'prsc']\r",
													"        },\r",
													"    },\r",
													"    'required': ['status', 'result', 'data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.8.1 파라미터 미입력 진료일자 별 환자 차트 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/chart/23111",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"chart",
												"23111"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.8.2 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/chart/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"chart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "4.8.3 변조토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `4.8 변조토큰 사용하여 진료일자별 환자 차트 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/chart/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"chart",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4.9 진료 메모 조회",
							"item": [
								{
									"name": "4.9 진료 메모 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': {\r",
													"            'type': 'array',\r",
													"                'items': {\r",
													"                    'type': 'object',\r",
													"                    'minItems': 1,\r",
													"                    'properties': {\r",
													"                        'MEDICALRECORD' :{'type': 'string'},\r",
													"                        'DIAG_DD' :{'type': 'string'},\r",
													"                    },\r",
													"                },\r",
													"                'required': ['MEDICALRECORD','DIAG_DD']\r",
													"            },\r",
													"        },\r",
													"    'required': ['status', 'result', 'data'],\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.9 진료메모 조회`;\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/ptnt/memo/{{PAT_NO}}/?vistSn=00064",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"memo",
												"{{PAT_NO}}",
												""
											],
											"query": [
												{
													"key": "vistSn",
													"value": "00064"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "4.9.1 오입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': {\r",
													"            'type': 'array',\r",
													"            'items': {\r",
													"                'type': 'object',\r",
													"                'properties': {\r",
													"                    'MEDICALRECORD': { 'type': 'string'},\r",
													"                    'DIAG_DD': { 'type': 'string'},\r",
													"                },\r",
													"                'required': ['MEDICALRECORD', 'DIAG_DD']\r",
													"            }\r",
													"        }\r",
													"    },\r",
													"    'required': ['status', 'result', 'data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.9 파라미터 오입력 진료메모 조회`;\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/ptnt/memo/11/?vistSn=00",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"memo",
												"11",
												""
											],
											"query": [
												{
													"key": "vistSn",
													"value": "00"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "4.9.2 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status', 'result'],\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.9.2 파라미터 미입력 진료메모 조회`;\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(\"testValidateMissingRequiredData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/ptnt/memo/{{PAT_NO}}/?vistSn=",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"memo",
												"{{PAT_NO}}",
												""
											],
											"query": [
												{
													"key": "vistSn",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "4.9.3 변조토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `4.9.3 변조토큰 사용하여 진료메모 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/ptnt/memo/{{PAT_NO}}/?vistSn=00064",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"memo",
												"{{PAT_NO}}",
												""
											],
											"query": [
												{
													"key": "vistSn",
													"value": "00064"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4.10 진료 메모 저장",
							"item": [
								{
									"name": "4.10 진료 메모 저장",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const userData = {\r",
													"    \"patNo\" : pm.collectionVariables.get('PAT_NO'),\r",
													"    \"vistSn\" : '00275',\r",
													"    \"memo\" : '진료 메모 저장 API 테스트',\r",
													"}\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: Object.entries(userData).map(([key, value]) =>({key,value}))\r",
													"};\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'status' : {'type': 'string'},\r",
													"    'result' : {'type': 'string'},\r",
													"    'required': ['status', 'result']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `4.9 진료메모 조회`;\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/memo/update",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"memo",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.10.1 필수값 미입력",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const userData = {\r",
													"    \"patNo\" : '',\r",
													"    \"vistSn\" : '',\r",
													"    \"memo\" : '',\r",
													"}\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: Object.entries(userData).map(([key, value]) =>({key,value}))\r",
													"};\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'status' : {'type': 'string'},\r",
													"    'result' : {'type': 'string'},\r",
													"    'required': ['status', 'result']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`Check returned JSON`, () => {\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/memo/update",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"memo",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.10.2 필수값 오입력",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.body = {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: 'patNo', value: '에러'},\r",
													"        {key: 'vistSn', value: 'ERROR'},\r",
													"        {key: 'memo', value: 'ERROR'},\r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/memo/update",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"memo",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.10.3 변조 토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const userData = {\r",
													"    \"patNo\" : pm.collectionVariables.get('PAT_NO'),\r",
													"    \"vistSn\" : pm.collectionVariables.get('VIST_SN'),\r",
													"    \"memo\" : '테스ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ트',\r",
													"}\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: Object.entries(userData).map(([key, value]) =>({key,value}))\r",
													"};\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/memo/update",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"memo",
												"update"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4.11 진료일자 별 예약 내역",
							"item": [
								{
									"name": "4.11 진료일자 별 예약 내역",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resJson = pm.response.json();\r",
													"const userData =  resJson.data.length > 0 ? Object.keys(resJson.data[0]).map(val => val) : [];\r",
													"\r",
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': {'type': 'string'},\r",
													"        'result': {'type': 'string'},\r",
													"        'data': {\r",
													"            'minItems': 1,\r",
													"            'type': 'array',\r",
													"            'items': {\r",
													"                'type': 'object',\r",
													"                'properties':{\r",
													"                    'VIST_SN' : {'type' : 'string'},\r",
													"                    'ACPT_MEMO' : {'type' : 'string'},\r",
													"                    'RSRV_DD' : {'type' : 'string'},\r",
													"                    'RSRV_TM' : {'type' : 'string'},\r",
													"                    'STR_RSRV_DD' : {'type' : 'string'},\r",
													"                    'STR_RSRV_TM' : {'type' : 'string'},\r",
													"                    'RSRV_ONO' : {'type' : 'string'},\r",
													"                    'RSRV_MEMO' : {'type' : 'string'},\r",
													"                    'RSRV_CNCL_YN' : {'type' : 'string'},\r",
													"                    'RSRV_CFR_ID' : {'type' : 'string'},\r",
													"                    'CHRG_DR_ID' : {'type' : 'string'},\r",
													"                    'CHRG_DR_NM' : {'type' : 'string'},\r",
													"                    'MOPR_TP_CD' : {'type' : 'string'},\r",
													"                    'MOPR_TP_CD_NM' : {'type' : 'string'},\r",
													"                    'DIAG_FLD_CD' : {'type' : 'string'},\r",
													"                    'DIAG_FLD_CD_NM' : {'type' : 'string'},\r",
													"                    'KKO_INST_YN' : {'type' : 'string'},\r",
													"                    'KKO_VIST_BF_YN' : {'type' : 'string'},\r",
													"                    'KKO_VIST_DD_YN' : {'type' : 'string'},\r",
													"                    'PRDC_TM' : {'type' : 'string'},\r",
													"                    'STR_PRDC_TM' : {'type' : 'string'},\r",
													"                    'PRGR_STAT_CD_NM' : {'type' : 'string'},\r",
													"                }\r",
													"            },\r",
													"                    'required': userData,\r",
													"        },\r",
													"    },\r",
													"    'required': ['status', 'result', 'data'],\r",
													"}\r",
													"\r",
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`Check returned JSON`, () => {\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", () => {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/rsvn/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"rsvn",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.11.1 미입력",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/rsvn",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"rsvn"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.11.2 오입력",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'status' : {'type': 'string'},\r",
													"    'result' : {'type': 'string'},\r",
													"    'data' : {'type': 'array'},\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`Check returned JSON`, () => {\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/rsvn/12312311",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"rsvn",
												"12312311"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.11.2 변조 토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/rsvn/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"rsvn",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4.12 진료일자 별 상담 내역",
							"item": [
								{
									"name": "4.12 진료일자 별 상담 내역",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resJson = pm.response.json();\r",
													"const userData = resJson.data.length > 0 ? Object.keys(resJson.data[0]).map(val => val) : [];\r",
													"\r",
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': {'type': 'string'},\r",
													"        'result': {'type': 'string'},\r",
													"        'data': {\r",
													"            'minItems': 1,\r",
													"            'type': 'array',\r",
													"            'items': {\r",
													"                'type': 'object',\r",
													"                'properties': \r",
													"                    Object.fromEntries(userData.map(prop => [prop, { 'type': ['string', 'null']}])),\r",
													"                    'required': userData,\r",
													"                },\r",
													"            },\r",
													"        },\r",
													"    'required': ['status', 'result', 'data'],\r",
													"}\r",
													"\r",
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`Check returned JSON`, () => {\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", () => {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/cnst/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"cnst",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.12.1 미입력",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/cnst/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"cnst",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "4.12.2 오입력",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"        'type': 'object',\r",
													"        'properties': {\r",
													"            'status': {'type': 'string'},\r",
													"            'result': {'type': 'string'},\r",
													"            'data': {'type': 'array'},\r",
													"    },\r",
													"    'required': ['status', 'result', 'data'],\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`Check returned JSON`, () => {\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/cnst/1231111",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"cnst",
												"1231111"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.12.3 변조토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/cnst/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"cnst",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4.14 티케팅 목록",
							"item": [
								{
									"name": "4.14 티케팅 목록",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resJson = pm.response.json();\r",
													"const userData =  resJson.data.length > 0 ? Object.keys(resJson.data[0]).map(val => val) : [];\r",
													"\r",
													"let schema = {\r",
													"        'type': 'object',\r",
													"        'properties': {\r",
													"            'status': {'type': 'string'},\r",
													"            'result': {'type': 'string'},\r",
													"            'data': {\r",
													"                'minItems': 1,\r",
													"                'type': 'array',\r",
													"                'items': {\r",
													"                    'type': 'object',\r",
													"                    'properties': \r",
													"                        Object.fromEntries(userData.map(val => [val, { 'type': ['string', 'null']}])),\r",
													"                    'required': userData,\r",
													"                }\r",
													"            },\r",
													"        },\r",
													"        'required': ['status', 'result', 'data'],\r",
													"    }\r",
													"\r",
													"\r",
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`Check returned JSON`, () => {\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", () => {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ticketing/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ticketing",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.14.1 미입력",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ticketing/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ticketing",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "4.14.2 오입력",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"        'type': 'object',\r",
													"        'properties': {\r",
													"            'status': {'type': 'string'},\r",
													"            'result': {'type': 'string'},\r",
													"            'data': {'type': 'array'},\r",
													"    },\r",
													"    'required': ['status', 'result', 'data'],\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`Check returned JSON`, () => {\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"210\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"데이터 없음\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ticketing/1231111",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ticketing",
												"1231111"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.14.3 변조토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ticketing/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ticketing",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4.15 시술 정보",
							"item": [
								{
									"name": "4.15 시술 정보",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resJson = pm.response.json();\r",
													"const userData = resJson.data.moprList.length > 0 ? Object.keys(resJson.data.moprList[0]).map(val => val) : [];\r",
													"let schema = {};\r",
													"\r",
													"if(resJson.data.moprList.length > 0) {\r",
													"    schema = {\r",
													"        'type': 'object',\r",
													"        'properties': {\r",
													"            'status': { 'type': 'string' },\r",
													"            'result': { 'type': 'string' },\r",
													"            'data': {\r",
													"                'type': 'object',\r",
													"                'properties': {\r",
													"                    'moprList': {\r",
													"                        'type': 'array',\r",
													"                        'items': {\r",
													"                            'type': 'object',\r",
													"                            'properties':\r",
													"                                Object.fromEntries(userData.map(val => [val, { 'type': ['string', 'null']}])),\r",
													"                            'required': userData\r",
													"                        }\r",
													"                    }\r",
													"                },\r",
													"                'required': ['moprList']\r",
													"            }\r",
													"        },\r",
													"        'required': ['status', 'result', 'data']\r",
													"    };\r",
													"} else {\r",
													"schema = {\r",
													"        'type': 'object',\r",
													"        'properties': {\r",
													"            'status': { 'type': 'string' },\r",
													"            'result': { 'type': 'string' },\r",
													"            'data': {\r",
													"                'type': 'object',\r",
													"                'properties': {\r",
													"                    'moprList': {\r",
													"                        'type': 'array',\r",
													"                    }\r",
													"                },\r",
													"                'required': ['moprList']\r",
													"            }\r",
													"        },\r",
													"        'required': ['status', 'result', 'data']\r",
													"    };\r",
													"}\r",
													"\r",
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`Check returned JSON`, () => {\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", () => {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/mopr/{{PAT_NO}}/00131",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"mopr",
												"{{PAT_NO}}",
												"00131"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.15.1 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/mopr",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"mopr"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.15.2 오입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resJson = pm.response.json();\r",
													"const userData = resJson.data.moprList.length > 0 ? Object.keys(resJson.data.moprList[0]).map(val => val) : [];\r",
													"\r",
													"\r",
													"\r",
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': {\r",
													"            'type': 'object',\r",
													"            'properties': {\r",
													"                'moprList': {\r",
													"                    'type': 'array',\r",
													"                }\r",
													"            },\r",
													"            'required': ['moprList']\r",
													"        }\r",
													"    },\r",
													"    'required': ['status', 'result', 'data']\r",
													"};\r",
													"\r",
													"\r",
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`Check returned JSON`, () => {\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/mopr/0000/12111",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"mopr",
												"0000",
												"12111"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.15.3 변조 토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check server status\", () => {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/ptnt/mopr/{{PAT_NO}}/{{VIST_SN}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"ptnt",
												"mopr",
												"{{PAT_NO}}",
												"{{VIST_SN}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "- 4.1 해당 날짜 환자 환자 리스트 조회\n    - 필수 데이터 누락 / 400 status 발생 되어 확인필요\n- 4.13 진료일자 별 수납 내역\n    \n    - 응답값 없음"
				},
				{
					"name": "5.예약 캘린더",
					"item": [
						{
							"name": "5.1 예약 캘린더 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    'mode': 'urlencoded',\r",
											"    'urlencoded' : {key : 'searchDay', value: '20240329'}    \r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'properties': {\r",
											"                'codeList': {\r",
											"                    'type': 'array',\r",
											"                    'items': {\r",
											"                        'type': 'object', \r",
											"                        'properties': {\r",
											"                            'COM_CD': { 'type': 'string' },\r",
											"                            'BSE_CD': { 'type': 'string' },\r",
											"                            'BSE_CD_NM': { 'type': 'string' },\r",
											"                            'NEW_CD': { 'type': 'string' }\r",
											"                        },\r",
											"                        'required': ['COM_CD', 'BSE_CD', 'BSE_CD_NM', 'NEW_CD']\r",
											"                    }\r",
											"                },\r",
											"                'reservationHour': {\r",
											"                    'type': 'array',\r",
											"                    'items': {}\r",
											"                },\r",
											"                'reservationList': {\r",
											"                    'type': 'array',\r",
											"                    'items': {\r",
											"                        'type': 'object',\r",
											"                        'properties': {\r",
											"                            'PAT_NO': { 'type': 'string' },\r",
											"                            'CHART_NO': { 'type': 'string' },\r",
											"                            'PAT_NM': { 'type': 'string' },\r",
											"                            'PAT_JNO': { 'type': 'string' },\r",
											"                            'MOBILE_NO': { 'type': 'string' },\r",
											"                            'PAT_AGE': { 'type': 'string' },\r",
											"                            'PAT_SEX_TP_NM': { 'type': 'string' },\r",
											"                            'PAT_SA': { 'type': 'string' },\r",
											"                            'ADDR': { 'type': 'string' },\r",
											"                            'FST_VST_DD': { 'type': 'string' },\r",
											"                            'RCNT_VST_DD': { 'type': 'string' },\r",
											"                            'VIST_SN': { 'type': 'string' },\r",
											"                            'PRGR_STAT_CD': { 'type': 'string' },\r",
											"                            'STAFF_MEMO': { 'type': 'string' },\r",
											"                            'RSRV_DD': { 'type': 'string' },\r",
											"                            'RSRV_TM': { 'type': 'string' },\r",
											"                            'RSRV_MEMO': { 'type': 'string' },\r",
											"                            'ACPT_MEMO': { 'type': ['string','null'] },\r",
											"                            'RSRV_CNCL_YN': { 'type': 'string' },\r",
											"                            'RSRV_CFR_ID': { 'type': 'string' },\r",
											"                            'RSRV_CFR_NM': { 'type': 'string' },\r",
											"                            'ACPT_DD': { 'type': 'string' },\r",
											"                            'ACPT_TM': { 'type': 'string' },\r",
											"                            'ACPT_CNCL_YN': { 'type': 'string' },\r",
											"                            'CHRG_DR_ID': { 'type': 'string' },\r",
											"                            'CHRG_DR_NM': { 'type': 'string' },\r",
											"                            'CHRG_STAFF_ID': { 'type': 'string' },\r",
											"                            'CHRG_STAFF_NM': { 'type': 'string' },\r",
											"                            'DIAG_FLD_CD': { 'type': 'string' },\r",
											"                            'DIAG_TP_CD': { 'type': 'string' },\r",
											"                            'MOPR_TP_CD': { 'type': 'string' },\r",
											"                            'DIAG_FLD_NM': { 'type': 'string' },\r",
											"                            'DIAG_TP_NM': { 'type': 'string' },\r",
											"                            'MOPR_TP_NM': { 'type': 'string' },\r",
											"                            'INSU_KND_NM': { 'type': 'string' },\r",
											"                            'GRADE_NM': { 'type': 'string' },\r",
											"                            'ETC_NM': { 'type': 'string' },\r",
											"                            'STAT_CD': { 'type': 'string' },\r",
											"                            'INSU_KND_CD': { 'type': 'string' },\r",
											"                            'DIAG_DD': { 'type': 'string' },\r",
											"                            'DIAG_TM': { 'type': 'string' },\r",
											"                            'RCPT_DT': { 'type': ['string','null'] },\r",
											"                            'KKO_INST_YN': { 'type': 'string' },\r",
											"                            'KKO_VIST_BF_YN': { 'type': 'string' },\r",
											"                            'KKO_VIST_DD_YN': { 'type': 'string' },\r",
											"                            'MSG_INST_YN': { 'type': 'string' },\r",
											"                            'MSG_VIST_BF_YN': { 'type': 'string' },\r",
											"                            'MSG_VIST_DD_YN': { 'type': 'string' },\r",
											"                            'RSRV_HIST': { 'type': ['string', 'null'] },\r",
											"                            'RSRV_HIST_ALL': { 'type': ['string', 'null'] },\r",
											"                            'COUNT_K': { 'type': 'string' }\r",
											"                        },\r",
											"                        'required': ['PAT_NO', 'CHART_NO', 'PAT_NM', 'PAT_JNO', 'MOBILE_NO', 'PAT_AGE', 'PAT_SEX_TP_NM', 'PAT_SA', 'ADDR', 'FST_VST_DD', 'RCNT_VST_DD', 'VIST_SN', 'PRGR_STAT_CD', 'STAFF_MEMO', 'RSRV_DD', 'RSRV_TM', 'RSRV_MEMO', 'ACPT_MEMO', 'RSRV_CNCL_YN', 'RSRV_CFR_ID', 'RSRV_CFR_NM', 'ACPT_DD', 'ACPT_TM', 'ACPT_CNCL_YN', 'CHRG_DR_ID', 'CHRG_DR_NM', 'CHRG_STAFF_ID', 'CHRG_STAFF_NM', 'DIAG_FLD_CD', 'DIAG_TP_CD', 'MOPR_TP_CD', 'DIAG_FLD_NM', 'DIAG_TP_NM', 'MOPR_TP_NM', 'INSU_KND_NM', 'GRADE_NM', 'ETC_NM', 'STAT_CD', 'INSU_KND_CD', 'DIAG_DD', 'DIAG_TM', 'RCPT_DT', 'KKO_INST_YN', 'KKO_VIST_BF_YN', 'KKO_VIST_DD_YN', 'MSG_INST_YN', 'MSG_VIST_BF_YN', 'MSG_VIST_DD_YN', 'RSRV_HIST', 'RSRV_HIST_ALL', 'COUNT_K']\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            'required': ['codeList', 'reservationHour', 'reservationList']\r",
											"        }\r",
											"    },\r",
											"    'required': ['status', 'result', 'data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const testDescription = `5.1 예약캘린더 조회`\r",
											"\r",
											"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
											"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
											"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
											"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
											"\r",
											"testSucessServerStatus(`${testDescription}`);\r",
											"testResponseTime(`${testDescription}`);\r",
											"testHttpsProtocol(`${testDescription}`);\r",
											"testSucessJsonData(`${testDescription}`, resJson, schema);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/cldr?searchDay=20250217",
									"host": [
										"{{domain}}"
									],
									"path": [
										"cldr"
									],
									"query": [
										{
											"key": "searchDay",
											"value": "20250217"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1.1 예약 캘린더 조회(미등록날짜)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': { 'type': 'string' },\r",
											"        'result': { 'type': 'string' },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'properties': {\r",
											"                'codeList': {\r",
											"                    'type': 'array',\r",
											"                    'items': {\r",
											"                        'type': 'object', \r",
											"                        'properties': {\r",
											"                            'COM_CD': { 'type': 'string' },\r",
											"                            'BSE_CD': { 'type': 'string' },\r",
											"                            'BSE_CD_NM': { 'type': 'string' },\r",
											"                            'NEW_CD': { 'type': 'string' }\r",
											"                        },\r",
											"                        'required': ['COM_CD', 'BSE_CD', 'BSE_CD_NM', 'NEW_CD']\r",
											"                    }\r",
											"                },\r",
											"                'reservationHour': {\r",
											"                    'type': 'array',\r",
											"                    'items': {}\r",
											"                },\r",
											"                'reservationList': {\r",
											"                    'type': 'array',\r",
											"                    'items': {}\r",
											"                    },\r",
											"                },\r",
											"                'required': ['codeList', 'reservationHour', 'reservationList']\r",
											"            },\r",
											"        },\r",
											"        'required': ['status', 'result', 'data']\r",
											"    };\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const testDescription = `5.1.1 미예약 데이터 예약캘린더 조회`\r",
											"\r",
											"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
											"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
											"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
											"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
											"\r",
											"testSucessServerStatus(`${testDescription}`);\r",
											"testResponseTime(`${testDescription}`);\r",
											"testHttpsProtocol(`${testDescription}`);\r",
											"testSucessJsonData(`${testDescription}`, resJson, schema);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/cldr?searchDay=asd",
									"host": [
										"{{domain}}"
									],
									"path": [
										"cldr"
									],
									"query": [
										{
											"key": "searchDay",
											"value": "asd"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1.2 변조 토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
											"\r",
											"pm.request.body = {\r",
											"    'mode': 'urlencoded',\r",
											"    'urlencoded' : {key : 'searchDay', value: '20240329'}    \r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testDescription = `5.1.3 변조토큰 사용하여 예약캘린더 조회`;\r",
											"\r",
											"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
											"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
											"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
											"\r",
											"testFailServerStatus(`${testDescription}`);\r",
											"testResponseTime(`${testDescription}`);\r",
											"testHttpsProtocol(`${testDescription}`);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/cldr?searchDay=20240501",
									"host": [
										"{{domain}}"
									],
									"path": [
										"cldr"
									],
									"query": [
										{
											"key": "searchDay",
											"value": "20240501"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6.공지사항",
					"item": [
						{
							"name": "6.1 공지사항 추가",
							"item": [
								{
									"name": "6.1 공지사항 추가",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var date = new Date();\r",
													"var year = String(date.getFullYear());\r",
													"var month = String((\"0\" + (1 + date.getMonth())).slice(-2));\r",
													"var day = String((\"0\" + date.getDate()).slice(-2));\r",
													"\r",
													"const noticeList = [\r",
													"    \"QA 공지사항 테스트\",\r",
													"    `테스트\r",
													"    공지사항 테스트\r",
													"    QA 팀 테스트\r",
													"    공지사항 확인`,\r",
													"    `공지사항 등록 확인용`,\r",
													"    `공지 등록 확인`,\r",
													"    `공지사항 등록 테스트`\r",
													"]\r",
													"\r",
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    'mode' : 'urlencoded',\r",
													"    'urlencoded':[\r",
													"        {key:'noticeTxt', value: noticeList[Math.floor(Math.random() * noticeList.length)]},\r",
													"        {key:'noticeFd', value: year+month+day},\r",
													"        {key:'noticeLd', value: year+month+day},\r",
													"    ]\r",
													"};"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `6.1 공지사항 추가`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/notice",
											"host": [
												"{{domain}}"
											],
											"path": [
												"notice"
											]
										}
									},
									"response": []
								},
								{
									"name": "6.1.1 공지사항 추가(오입력)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var date = new Date();\r",
													"var year = date.getFullYear();\r",
													"var month = (\"0\" + (1 + date.getMonth())).slice(-2);\r",
													"var day = (\"0\" + date.getDate()).slice(-2);\r",
													"\r",
													"const noticeList = [\r",
													"    \"QA 공지사항 테스트\",\r",
													"    `테스트\r",
													"    공지사항 테스트\r",
													"    QA 팀 테스트\r",
													"    공지사항 확인`,\r",
													"    `공지사항 등록 확인용`,\r",
													"    `공지 등록 확인`,\r",
													"    `공지사항 등록 테스트\r",
													"    공지사항 등록 테스트\r",
													"    공지사항 등록 테스트\r",
													"    공지사항 등록 테스트\r",
													"    공지사항 등록 테스트\r",
													"    공지사항 등록 테스트\r",
													"    공지사항 등록 테스트\r",
													"    공지사항 등록 테스트\r",
													"    공지사항 등록 테스트`\r",
													"]\r",
													"\r",
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    'mode' : 'urlencoded',\r",
													"    'urlencoded':[\r",
													"        {key:'noticeTxt', value: 'ERROR'},\r",
													"        {key:'noticeFd', value: 'ERROR'},\r",
													"        {key:'noticeLd', value: 'ERROR'},\r",
													"    ]\r",
													"};\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `6.2 파라미터 오입력 공지사항 추가`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/notice",
											"host": [
												"{{domain}}"
											],
											"path": [
												"notice"
											]
										}
									},
									"response": []
								},
								{
									"name": "6.1.2 공지사항 추가(미입력)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `6.3 파라미터 오입력 공지사항 추가`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testValidateMissingRequiredData = eval(pm.collectionVariables.get(\"testValidateMissingRequiredData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testValidateMissingRequiredData(`${testDescription}`, resJson, schema);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/notice",
											"host": [
												"{{domain}}"
											],
											"path": [
												"notice"
											]
										}
									},
									"response": []
								},
								{
									"name": "6.1.3 변조 토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `5.1.3 변조토큰 사용하여 공지사항 추가`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/notice",
											"host": [
												"{{domain}}"
											],
											"path": [
												"notice"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "6.2 공지사항 조회",
							"item": [
								{
									"name": "6.2 오늘날짜 공지사항 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const today = new Date();\r",
													"const yyyy = today.getFullYear();\r",
													"const mm = String(today.getMonth() + 1).padStart(2, '0');\r",
													"const dd = String(today.getDate()).padStart(2, '0');\r",
													"\r",
													"const todayDate = `${yyyy}${mm}${dd}`;\r",
													"\r",
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: 'noticeTxt', value: ''},\r",
													"        {key: 'noticeFd', value: todayDate},\r",
													"        {key: 'noticeLd', value: todayDate}\r",
													"    ]\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type' : 'object',\r",
													"    'properties' :{  \r",
													"        'status' : {'type': 'string'},\r",
													"        'result' : {'type': 'string'},\r",
													"        'data' : { \r",
													"            'type': 'array',\r",
													"            'properties' : { \r",
													"            'YKIHO' : {'type':'string'},\r",
													"            'NOTICE_NO': {'type':'string'},\r",
													"            'NOTICE_FD': {'type':'string'},\r",
													"            'NOTICE_LD': {'type':'string'},\r",
													"            'NOTICE_TXT':{'type':'string'},\r",
													"            'CNCL_YN':{'type':'string'},\r",
													"            'USER_NM':{'type':'string'},\r",
													"            'SetDateTime':{'type':'string'},\r",
													"            },\r",
													"            'required' : ['YKIHO','NOTICE_NO','NOTICE_FD','NOTICE_LD','NOTICE_TXT','CNCL_YN','USER_NM','SetDateTime']\r",
													"        },\r",
													"    },\r",
													"    'required': ['status', 'result', 'data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `6.2 공지사항 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/notice/search",
											"host": [
												"{{domain}}"
											],
											"path": [
												"notice",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "6.2.1 특정 공지사항 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type' : 'object',\r",
													"     'properties' :{  \r",
													"        'status' : {'type': 'string'},\r",
													"        'result' : {'type': 'string'},\r",
													"        'data' : { \r",
													"            'type': 'array',\r",
													"            'properties' : { \r",
													"             'YKIHO' : {'type':'string'},\r",
													"             'NOTICE_NO': {'type':'string'},\r",
													"             'NOTICE_FD': {'type':'string'},\r",
													"             'NOTICE_LD': {'type':'string'},\r",
													"             'NOTICE_TXT':{'type':'string'},\r",
													"             'CNCL_YN':{'type':'string'},\r",
													"             'USER_NM':{'type':'string'},\r",
													"             'SetDateTime':{'type':'string'},\r",
													"            },\r",
													"        \r",
													"            'required' : ['YKIHO','NOTICE_NO','NOTICE_FD','NOTICE_LD','NOTICE_TXT','CNCL_YN','USER_NM','SetDateTime']\r",
													"        },\r",
													"           \r",
													"    },\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `6.2.1 특정 공지사항 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/notice/search?noticeFd=20240325&noticeLd=20240401&noticeTxt=지혜, 유진 휴무",
											"host": [
												"{{domain}}"
											],
											"path": [
												"notice",
												"search"
											],
											"query": [
												{
													"key": "noticeFd",
													"value": "20240325"
												},
												{
													"key": "noticeLd",
													"value": "20240401"
												},
												{
													"key": "noticeTxt",
													"value": "지혜, 유진 휴무"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6.2.2 공지사항 조회(오입력)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"const search = { \r",
													"    'noticeTxt': '없음',\r",
													"    'noticeFd' : '!@#$!@#$',\r",
													"    'noticeLd' : '!@#$!@#$',\r",
													"};  \r",
													"\r",
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: Object.entries(search).map(([key, value]) =>({key,value}))\r",
													"};\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type' : 'object',\r",
													"     'properties' :{  \r",
													"        'status' : {'type': 'string'},\r",
													"        'result' : {'type': 'string'},\r",
													"        'data' : { \r",
													"            'type': 'array',\r",
													"            'properties' : { \r",
													"             'YKIHO' : {'type':'string'},\r",
													"             'NOTICE_NO': {'type':'string'},\r",
													"             'NOTICE_FD': {'type':'string'},\r",
													"             'NOTICE_LD': {'type':'string'},\r",
													"             'NOTICE_TXT':{'type':'string'},\r",
													"             'CNCL_YN':{'type':'string'},\r",
													"             'USER_NM':{'type':'string'},\r",
													"             'SetDateTime':{'type':'string'},\r",
													"            },\r",
													"            'required' : ['YKIHO','NOTICE_NO','NOTICE_FD','NOTICE_LD','NOTICE_TXT','CNCL_YN','USER_NM','SetDateTime']\r",
													"        },\r",
													"    },\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `6.2.2 미데이터 공지사항 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testEmptyJsonData = eval(pm.collectionVariables.get(\"testEmptyJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testEmptyJsonData(`${testDescription}`, resJson, schema);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/notice/search?noticeFd=20240426&noticeLd=20240501&noticeTxt=aa",
											"host": [
												"{{domain}}"
											],
											"path": [
												"notice",
												"search"
											],
											"query": [
												{
													"key": "noticeFd",
													"value": "20240426"
												},
												{
													"key": "noticeLd",
													"value": "20240501"
												},
												{
													"key": "noticeTxt",
													"value": "aa"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6.2.3 변조 토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"const search = { \r",
													"    'noticeTxt': '없음',\r",
													"    'noticeFd' : '!@#$!@#$',\r",
													"    'noticeLd' : '!@#$!@#$',\r",
													"};  \r",
													"\r",
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: Object.entries(search).map(([key, value]) =>({key,value}))\r",
													"};\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `6.2.3 변조토큰 사용하여 공지사항 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/notice/search?noticeFd=20240426&noticeLd=20240501&noticeTxt=aa",
											"host": [
												"{{domain}}"
											],
											"path": [
												"notice",
												"search"
											],
											"query": [
												{
													"key": "noticeFd",
													"value": "20240426"
												},
												{
													"key": "noticeLd",
													"value": "20240501"
												},
												{
													"key": "noticeTxt",
													"value": "aa"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "7.휴진일 조회",
					"item": [
						{
							"name": "7.1 휴진일 조회",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'status': {'type': 'string'},\r",
											"        'result': {'type': 'string'},\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"            'items': {\r",
											"                'type': 'object',\r",
											"                'properties': {\r",
											"                    'CLS_DATE' : {\r",
											"                        'type': 'string'\r",
											"                    }\r",
											"                },\r",
											"                'required': ['CLS_DATE']\r",
											"            },\r",
											"        },\r",
											"    },\r",
											"    'required': ['status', 'result', 'data']\r",
											"};\r",
											"\r",
											"const resJson = pm.response.json();\r",
											"const testDescription = `7.1 휴진일 조회`\r",
											"\r",
											"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
											"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
											"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
											"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
											"\r",
											"testSucessServerStatus(`${testDescription}`);\r",
											"testResponseTime(`${testDescription}`);\r",
											"testHttpsProtocol(`${testDescription}`);\r",
											"testSucessJsonData(`${testDescription}`, resJson, schema);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/off",
									"host": [
										"{{domain}}"
									],
									"path": [
										"off"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.1.1 변조토큰",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testDescription = `7.1.1 변조토큰 사용하여 공지사항 추가`;\r",
											"\r",
											"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
											"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
											"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
											"\r",
											"testFailServerStatus(`${testDescription}`);\r",
											"testResponseTime(`${testDescription}`);\r",
											"testHttpsProtocol(`${testDescription}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/off",
									"host": [
										"{{domain}}"
									],
									"path": [
										"off"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9.차트",
					"item": [
						{
							"name": "9.1 상품/패키지 조회",
							"item": [
								{
									"name": "9.1 상품/패키지 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const schema = {\r",
													"    'type' : 'object',\r",
													"    'properties' : {\r",
													"        'status' : {'type' : 'string'},\r",
													"        'result' : {'type' : 'string'},\r",
													"        'data' : {\r",
													"            'type' : 'array',\r",
													"            'properties' : {\r",
													"                \"PCKG_CC\" : {'type' : 'string'},\r",
													"                \"PCKG_NM\" : {'type' : 'string'},\r",
													"                \"USER_SHRT_CD\" : {'type' : 'string'},\r",
													"                \"SEQ\" : {'type' : 'string'},\r",
													"                \"CATEGORY\" : {'type' : 'string'},\r",
													"            },\r",
													"            'required' :  ['PCKG_CC', 'PCKG_NM', 'USER_SHRT_CD', 'SEQ', 'CATEGORY']\r",
													"        },\r",
													"    },\r",
													"    'required' : ['status','result','data']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const testDescription = `9.1 상품/패키지 조회`\r",
													"\r",
													"const testSucessServerStatus = eval(pm.globals.get(`testSucessServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"const testSucessJsonData = eval(pm.collectionVariables.get(\"testSucessJsonData\"));\r",
													"\r",
													"testSucessServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);\r",
													"testSucessJsonData(`${testDescription}`, resJson, schema);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/package",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"package"
											]
										}
									},
									"response": []
								},
								{
									"name": "9.1.1 변조토큰 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testDescription = `9.1.1 변조토큰 사용하여 환자 상품/패키지 조회`;\r",
													"\r",
													"const testFailServerStatus = eval(pm.globals.get(`testFailServerStatus`));\r",
													"const testResponseTime = eval(pm.globals.get(\"testResponseTime\"));\r",
													"const testHttpsProtocol = eval(pm.globals.get(\"testHttpsProtocol\"));\r",
													"\r",
													"testFailServerStatus(`${testDescription}`);\r",
													"testResponseTime(`${testDescription}`);\r",
													"testHttpsProtocol(`${testDescription}`);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/package",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"package"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "9.2 상담 저장",
							"item": [
								{
									"name": "9.2 상담 저장",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'multipart/form-data' });\r",
													"\r",
													"pm.request.body = {\r",
													"    'mode' : 'formdata',\r",
													"    'formdata' : [\r",
													"        {key:'patNo',value:pm.collectionVariables.get('PAT_NO')},\r",
													"        {key:'vistSn',value: pm.collectionVariables.get('VIST_SN')},\r",
													"        {key:'cnstRslt',value: pm.collectionVariables.get('CNST_RSLT')},\r",
													"        {key:'cnstId',value: 'F12'},\r",
													"        {key:'acptCfrId',value: '미지정'},\r",
													"        {key:'chrgDrId',value: pm.collectionVariables.get('USER_ID')},\r",
													"    ]\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties': {\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/cnst/update/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"cnst",
												"update",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "9.2.1 모든값 입력",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'multipart/form-data' });\r",
													"\r",
													"pm.request.body = {\r",
													"    'mode' : 'formdata',\r",
													"    'formdata' : [\r",
													"        {key:'patNo',value:pm.collectionVariables.get('PAT_NO')},\r",
													"        {key:'vistSn',value: pm.collectionVariables.get('VIST_SN')},\r",
													"        {key:'cnstRslt',value: pm.collectionVariables.get('CNST_RSLT')},\r",
													"        {key:'cnstMemo',value: '상담 테스트 메모'},\r",
													"        {key:'asstMemo',value: '어시 테스트 메모'},\r",
													"        {key:'cnstId',value: 'F12'},\r",
													"        {key:'acptCfrId',value: '미지정'},\r",
													"        {key:'chrgDrId',value: pm.collectionVariables.get('USER_ID')},\r",
													"        {key:'cnstCtgrDiv',value: '1/2'},\r",
													"        {key:'moprList',value: [\r",
													"            {key:'moprCd',value:pm.collectionVariables.get('MOPR_CD')},\r",
													"            {key:'moprNm',value:pm.collectionVariables.get('MOPR_NM')},\r",
													"            {key:'czCd',value:pm.collectionVariables.get('CZ_CD')},\r",
													"            {key:'itemCd',value:pm.collectionVariables.get('ITEM_CD')},\r",
													"            {key:'vatYn',value:'0'},\r",
													"            {key:'vat',value:'0'},\r",
													"            {key:'amt',value:'20000'},\r",
													"            {key:'addAmt',value:'0'},\r",
													"            {key:'dcTpCd',value:''},\r",
													"            {key:'dcAmt',value:'0'},\r",
													"            {key:'prchsQty',value:'1'},\r",
													"            {key:'useQty',value:'1'},\r",
													"            {key:'restQty',value:'1'},\r",
													"        ]},\r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties': {\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/cnst/update/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"cnst",
												"update",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "9.2.2 필수값 미입력",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'multipart/form-data' });\r",
													"\r",
													"pm.request.body = {\r",
													"    'mode' : 'formdata',\r",
													"    'formdata' : [\r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties': {\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql('400');\r",
													"    pm.expect(resJson.result).to.be.eql('필수 데이터 누락');\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/cnst/update/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"cnst",
												"update",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "9.2.3 변조토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'multipart/form-data' });\r",
													"\r",
													"pm.request.body = {\r",
													"    'mode' : 'formdata',\r",
													"    'formdata' : [\r",
													"        {key:'patNo',value:pm.collectionVariables.get('PAT_NO')},\r",
													"        {key:'vistSn',value: pm.collectionVariables.get('VIST_SN')},\r",
													"        {key:'cnstRslt',value: pm.collectionVariables.get('CNST_RSLT')},\r",
													"        {key:'cnstId',value: 'F12'},\r",
													"        {key:'acptCfrId',value: '미지정'},\r",
													"        {key:'chrgDrId',value: pm.collectionVariables.get('USER_ID')},\r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/cnst/update/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"cnst",
												"update",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "9.3 상담 조회",
							"item": [
								{
									"name": "9.3 상담 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"status\": {\"type\": \"string\"},\r",
													"        \"result\": {\"type\": \"string\"},\r",
													"        \"data\": {\r",
													"            \"type\": \"object\",\r",
													"            \"properties\": {\r",
													"                \"cnst\": {\r",
													"                    \"type\": \"array\",\r",
													"                    \"items\": {\r",
													"                        \"typr\":'object',\r",
													"                        \"properties\": {\r",
													"                            \"VIST_SN\": {\"type\": \"string\"},\r",
													"                            \"CNST_DT\": {\"type\": \"string\"},\r",
													"                            \"STR_CNST_DD\": {\"type\": \"string\"},\r",
													"                            \"CNST_RSLT\": {\"type\": \"string\"},\r",
													"                            \"CNST_MEMO\": {\"type\": \"string\"},\r",
													"                            \"ASST_MEMO\": {\"type\": [\"string\",'null']},\r",
													"                            \"CNST_ID\": {\"type\": \"string\"},\r",
													"                            \"CNST_NM\": {\"type\": \"string\"},\r",
													"                            \"ACPT_CFR_NM\": {\"type\": \"string\"},\r",
													"                            \"CNST_RSLT_NM\": {\"type\": \"string\"},\r",
													"                            \"CNST_CTGR_DIV\": {\"type\": \"string\"}\r",
													"                        },\r",
													"                    \"required\": [\r",
													"                        \"VIST_SN\", \"CNST_DT\", \"STR_CNST_DD\", \"CNST_RSLT\", \"CNST_MEMO\", \r",
													"                        \"ASST_MEMO\", \"CNST_ID\", \"CNST_NM\", \"ACPT_CFR_NM\", \"CNST_RSLT_NM\", \"CNST_CTGR_DIV\"\r",
													"                        ]\r",
													"                    },\r",
													"                },\r",
													"                \"mopr\": {\r",
													"                    \"type\": \"array\",\r",
													"                    \"items\": {\r",
													"                        \"type\": \"object\",\r",
													"                        \"properties\": {\r",
													"                            \"MOPR_NO\": {\"type\": \"string\"},\r",
													"                            \"MOPR_CD\": {\"type\": \"string\"},\r",
													"                            \"MOPR_NM\": {\"type\": \"string\"},\r",
													"                            \"CZ_CD\": {\"type\": \"string\"},\r",
													"                            \"ITEM_CD\": {\"type\": \"string\"},\r",
													"                            \"VAT_YN\": {\"type\": \"string\"},\r",
													"                            \"VAT\": {\"type\": \"string\"},\r",
													"                            \"AMT\": {\"type\": \"string\"},\r",
													"                            \"ADD_AMT\": {\"type\": \"string\"},\r",
													"                            \"DC_TP_CD\": {\"type\": \"string\"},\r",
													"                            \"DC_AMT\": {\"type\": \"string\"},\r",
													"                            \"PRCHS_QTY\": {\"type\": \"string\"},\r",
													"                            \"USE_QTY\": {\"type\": \"string\"},\r",
													"                            \"DEL_YN\": {\"type\": \"string\"},\r",
													"                            \"RCPT_YN\": {\"type\": \"string\"},\r",
													"                            \"UNPRC\": {\"type\": \"string\"},\r",
													"                            \"MOPR_AMT\": {\"type\": \"string\"},\r",
													"                            \"MOPR_LDIV_CD\": {\"type\": \"string\"},\r",
													"                            \"MOPR_MDIV_CD\": {\"type\": \"string\"},\r",
													"                            \"MOPR_LDIV_NM\": {\"type\": \"string\"},\r",
													"                            \"MOPR_MDIV_NM\": {\"type\": \"string\"},\r",
													"                            \"ADT_DD\": {\"type\": \"string\"},\r",
													"                        },\r",
													"                        \"required\": [\r",
													"                            \"MOPR_NO\",\"MOPR_CD\", \"MOPR_NM\", \"CZ_CD\", \"ITEM_CD\", \r",
													"                            \"VAT_YN\", \"VAT\", \"AMT\", \"ADD_AMT\", \"DC_TP_CD\", \"DC_AMT\", \r",
													"                            \"PRCHS_QTY\", \"USE_QTY\", \"DEL_YN\", \"RCPT_YN\",\"UNPRC\",\"MOPR_AMT\", \r",
													"                            \"MOPR_LDIV_CD\", \"MOPR_MDIV_CD\", \"MOPR_LDIV_NM\", \"MOPR_MDIV_NM\", \"ADT_DD\"\r",
													"                        ]\r",
													"                    }\r",
													"                },\r",
													"                \"price\": {\r",
													"                    \"type\": \"object\",\r",
													"                    \"properties\": {\r",
													"                        \"TOT_MOPR_AMT\": {\"type\": [\"string\",'null']},\r",
													"                        \"TOT_VAT\": {\"type\": [\"string\",'null']},\r",
													"                        \"TOT_AMT\": {\"type\": [\"string\",'null']},\r",
													"                        \"TOT_ADD_AMT\": {\"type\": [\"string\",'null']},\r",
													"                        \"TOT_DC_AMT\": {\"type\": [\"string\",'null']},\r",
													"                        \"DC_TP_CD\": {\"type\": [\"string\",'null']},\r",
													"                    },\r",
													"                    \"required\": [\"TOT_MOPR_AMT\", \"TOT_VAT\", \"TOT_AMT\", \"TOT_ADD_AMT\", \"TOT_DC_AMT\", \"DC_TP_CD\"]\r",
													"                },\r",
													"            },\r",
													"            \"required\": [\"cnst\", \"mopr\", \"price\"]\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"status\", \"result\", \"data\"]\r",
													"};\r",
													"\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,210]);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/cnst/{{PAT_NO}}/?vistSn={{VIST_SN}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"cnst",
												"{{PAT_NO}}",
												""
											],
											"query": [
												{
													"key": "vistSn",
													"value": "{{VIST_SN}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9.3.1 오입력 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"status\": { \"type\": \"string\" },\r",
													"        \"result\": { \"type\": \"string\" },\r",
													"        \"data\": {\r",
													"            \"type\": \"object\",\r",
													"            \"properties\": {\r",
													"                \"cnst\": {\r",
													"                    \"type\": \"array\",\r",
													"                    \"items\": {\r",
													"                        \"type\": \"object\",\r",
													"                        \"properties\": {\r",
													"                            \"VIST_SN\": { \"type\": \"string\" },\r",
													"                            \"CNST_DT\": { \"type\": \"string\" },\r",
													"                            \"STR_CNST_DD\": { \"type\": \"string\" },\r",
													"                            \"CNST_RSLT\": { \"type\": \"string\" },\r",
													"                            \"CNST_MEMO\": { \"type\": \"string\" },\r",
													"                            \"ASST_MEMO\": { \"type\": \"string\" },\r",
													"                            \"CNST_ID\": { \"type\": \"string\" },\r",
													"                            \"CNST_NM\": { \"type\": \"string\" },\r",
													"                            \"ACPT_CFR_NM\": { \"type\": \"string\" },\r",
													"                            \"CNST_RSLT_NM\": { \"type\": \"string\" },\r",
													"                            \"CNST_CTGR_DIV\": { \"type\": \"string\" }\r",
													"                        },\r",
													"                        \"required\": [\r",
													"                            \"VIST_SN\", \"CNST_DT\", \"STR_CNST_DD\", \"CNST_RSLT\", \"CNST_MEMO\",\r",
													"                            \"ASST_MEMO\", \"CNST_ID\", \"CNST_NM\", \"ACPT_CFR_NM\", \"CNST_RSLT_NM\", \"CNST_CTGR_DIV\"\r",
													"                        ]\r",
													"                    }\r",
													"                },\r",
													"                \"mopr\": { \"type\": \"array\" },\r",
													"                \"price\": {\r",
													"                    \"type\": \"object\",\r",
													"                    \"properties\": {\r",
													"                        \"TOT_MOPR_AMT\": { \"type\": [\"string\", 'null'] },\r",
													"                        \"TOT_VAT\": { \"type\": [\"string\", 'null'] },\r",
													"                        \"TOT_AMT\": { \"type\": [\"string\", 'null'] },\r",
													"                        \"TOT_ADD_AMT\": { \"type\": [\"string\", 'null'] },\r",
													"                        \"TOT_DC_AMT\": { \"type\": [\"string\", 'null'] },\r",
													"                        \"DC_TP_CD\": { \"type\": [\"string\", 'null'] }\r",
													"                    },\r",
													"                    \"required\": [\"TOT_MOPR_AMT\", \"TOT_VAT\", \"TOT_AMT\", \"TOT_ADD_AMT\", \"TOT_DC_AMT\", \"DC_TP_CD\"]\r",
													"                }\r",
													"            },\r",
													"            \"required\": [\"cnst\", \"mopr\", \"price\"]\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"status\", \"result\", \"data\"]\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/cnst/{{PAT_NO}}/?vistSn=ERROR",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"cnst",
												"{{PAT_NO}}",
												""
											],
											"query": [
												{
													"key": "vistSn",
													"value": "ERROR"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9.3.2 미입력 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,210]);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/cnst/{{PAT_NO}}/?vistSn=",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"cnst",
												"{{PAT_NO}}",
												""
											],
											"query": [
												{
													"key": "vistSn",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9.3.3 파라미터 변경 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"        'data': { \r",
													"            'type': 'object',\r",
													"            'properties':{\r",
													"                'cnst' : {'type':'array'},\r",
													"                'mopr' : {'type':'array'},\r",
													"                'price' : {'type':'array'}\r",
													"            },\r",
													"            'required': ['cnst','mopr','price']\r",
													"        },\r",
													"    },\r",
													"    'required': ['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,210]);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson.data.cnst).to.be.empty;\r",
													"    pm.expect(resJson.data.mopr).to.be.empty;\r",
													"    pm.expect(resJson.data.price).to.be.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/cnst/{{PAT_NO}}123/?vistSn={{VIST_SN}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"cnst",
												"{{PAT_NO}}123",
												""
											],
											"query": [
												{
													"key": "vistSn",
													"value": "{{VIST_SN}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9.3.4 변조토큰",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/cnst/{{PAT_NO}}/?vistSn={{VIST_SN}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"cnst",
												"{{PAT_NO}}",
												""
											],
											"query": [
												{
													"key": "vistSn",
													"value": "{{VIST_SN}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "9.5 패키지 시술 조회",
							"item": [
								{
									"name": "9.5 패키지 시술 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseSchema = {",
													"'type':'object',",
													"    'properties':{",
													"        'status':{'type':'string'},",
													"        'result':{'type':'string'},",
													"        'data': {",
													"            'type':'array',",
													"            'items': {",
													"                'type':'object',",
													"                'properties':{",
													"                    'PCKG_CD':{'type':'string'},",
													"                    'MOPR_CD':{'type':'string'},",
													"                    'MOPR_NM':{'type':'string'},",
													"                    'MOPR_LDIV_CD':{'type':'string'},",
													"                    'MOPR_MDIV_CD':{'type':'string'},",
													"                    'MOPR_LDIV_NM':{'type':'string'},",
													"                    'MOPR_MDIV_NM':{'type':'string'},",
													"                    'CZ_CD':{'type':'string'},",
													"                    'ITEM_CD':{'type':'string'},",
													"                    'ADT_DD':{'type':'string'},",
													"                    'VAT_YN':{'type':'string'},",
													"                    'VAT':{'type':'string'},",
													"                    'UNPRC':{'type':'string'},",
													"                },",
													"            'required':[",
													"                'PCKG_CD','MOPR_CD','MOPR_NM','MOPR_LDIV_CD','MOPR_MDIV_CD','MOPR_LDIV_NM',",
													"                'MOPR_MDIV_NM','CZ_CD','ITEM_CD','ADT_DD','VAT_YN','VAT','UNPRC'",
													"                ]",
													"            }",
													"        }",
													"    },",
													"    required:['status','result','data']",
													"}",
													"",
													"const resJson = pm.response.json();",
													"",
													"pm.test('Check server status', function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,210]);",
													"    if(pm.response.code == 200){",
													"        pm.collectionVariables.set('MOPR_NM', resJson.data[0].MOPR_NM)",
													"    }",
													"});",
													"",
													"pm.test(\"Check returned JSON\", () =>{",
													"    pm.response.to.be.json;",
													"    pm.expect(resJson).to.be.not.empty;",
													"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);",
													"    pm.response.to.have.jsonSchema(responseSchema);",
													"})",
													"",
													"pm.test(\"Check response time\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); ",
													"});",
													"",
													"pm.test(\"Check HTTPS protocol usage\", function() {",
													"    pm.expect(pm.request.url).to.match(/^https:/);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/chart/package/{{PCKG_CD}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"package",
												"{{PCKG_CD}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9.5.1 오입력 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {",
													"    'type': 'object',",
													"    'properties': {",
													"        'status': { 'type': 'string' },",
													"        'result': { 'type': 'string' },",
													"    },",
													"    'required': ['status','result']",
													"};",
													"",
													"const resJson = pm.response.json();",
													"",
													"pm.test(\"Check server status\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check returned JSON\", () =>{",
													"    pm.response.to.be.json;",
													"    pm.expect(resJson).to.be.not.empty;",
													"    pm.expect(resJson.status).to.equals(\"210\");",
													"    pm.expect(resJson.result).to.equals(\"데이터 없음\");",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Check response time\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); ",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/chart/package/{{PCKG_CD}}12",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"package",
												"{{PCKG_CD}}12"
											]
										}
									},
									"response": []
								},
								{
									"name": "9.5.2 변조토큰",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test('Check server status', function () {",
													"    pm.expect(pm.response.code).to.be.eql(500);",
													"});",
													"",
													"pm.test(\"Check response time\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); ",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/chart/package/{{PCKG_CD}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"package",
												"{{PCKG_CD}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "9.6 등록 시술 조회",
							"item": [
								{
									"name": "9.6 등록 시술 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"        'data':{\r",
													"            'type':'array',\r",
													"            'items':{\r",
													"                'type': 'object',\r",
													"                'properties':{\r",
													"                    'MOPR_CD':{'type':'string'},\r",
													"                    'MOPR_NM':{'type':'string'},\r",
													"                    'MOPR_LDIV_CD':{'type':'string'},\r",
													"                    'MOPR_MDIV_CD':{'type':'string'},\r",
													"                    'MOPR_LDIV_NM':{'type':'string'},\r",
													"                    'MOPR_MDIV_NM':{'type':'string'},\r",
													"                    'CZ_CD':{'type':'string'},\r",
													"                    'ITEM_CD':{'type':'string'},\r",
													"                    'ADT_DD':{'type':'string'},\r",
													"                    'VAT_YN':{'type':'string'},\r",
													"                    'VAT':{'type':'string'},\r",
													"                    'UNPRC':{'type':'string'},\r",
													"                },\r",
													"            }\r",
													"        },\r",
													"    },\r",
													"    required:['status','result','data']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    // pm.expect(pm.response.code).to.be.oneOf(200);\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.oneOf([\"200\",'210']);\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/ptnt/package/?moprNm={{MOPR_NM}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"ptnt",
												"package",
												""
											],
											"query": [
												{
													"key": "moprNm",
													"value": "{{MOPR_NM}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9.6.2 미입력 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Check server status\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.equals(\"400\");\r",
													"    pm.expect(resJson.result).to.equals(\"필수 데이터 누락\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/ptnt/package/?moprNm=",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"ptnt",
												"package",
												""
											],
											"query": [
												{
													"key": "moprNm",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9.6.3 변조토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"// pm.request.addQueryParams({ key: 'moprNm', value: pm.collectionVariables.get('MOPR_NM') });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/ptnt/package/?moprNm={{MOPR_NM}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"ptnt",
												"package",
												""
											],
											"query": [
												{
													"key": "moprNm",
													"value": "{{MOPR_NM}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9.6.1 오입력 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': { 'type': 'string' },\r",
													"        'result': { 'type': 'string' },\r",
													"    },\r",
													"    'required': ['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Check server status\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.equals(\"210\");\r",
													"    pm.expect(resJson.result).to.equals(\"데이터 없음\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/chart/ptnt/package/?moprNm={{MOPR_NM}}12",
											"host": [
												"{{domain}}"
											],
											"path": [
												"chart",
												"ptnt",
												"package",
												""
											],
											"query": [
												{
													"key": "moprNm",
													"value": "{{MOPR_NM}}12"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "10.진료사진",
					"item": [
						{
							"name": "10.1 진료사진 조회",
							"item": [
								{
									"name": "10.1 진료사진 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resJson = pm.response.json();\r",
													"const userData =  resJson.data.length > 0 ? Object.keys(resJson.data[0]) : null;\r",
													"const seqCount = resJson.data;\r",
													"const seqList = [];\r",
													"for(count in seqCount){\r",
													"    seqList.push(seqCount[count].SEQ)\r",
													"}\r",
													"\r",
													"let schema ={};\r",
													"if(resJson.data.length > 0){\r",
													"    schema = {\r",
													"        'type': 'object', \r",
													"        'properties': {\r",
													"            'status': {'type': 'string'},\r",
													"            'result': {'type': 'string'},\r",
													"            'data': {\r",
													"                'type': 'array',\r",
													"                'items': {\r",
													"                    'type': 'object',\r",
													"                    'properties': {\r",
													"                        \"PAT_NO\": {'type': 'string'},\r",
													"                        \"SEQ\": {'type': 'string'},\r",
													"                        \"MEMO_TXT\": {'type': 'string'},\r",
													"                        \"IMAGE_TITLE\": {'type': 'string'},\r",
													"                        \"SERVICES\": {'type': 'string'},\r",
													"                        \"IMAGE_URL\": {'type': 'string'},\r",
													"                        \"DATETIME\": {'type': 'string'},\r",
													"                    },\r",
													"                    'required': userData,\r",
													"                },\r",
													"            },\r",
													"        },\r",
													"        'required': ['status', 'result', 'data']\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
													"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
													"    pm.expect(resJson.data).to.be.not.empty;\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/penmemo/?patNo={{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo",
												""
											],
											"query": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "10.1.1 오입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded : {}\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resJson = pm.response.json();\r",
													"const userData =  Object.keys(resJson.data);\r",
													"\r",
													"\r",
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': {'type': 'string'},\r",
													"        'result': {'type': 'string'},\r",
													"        'data': {'type': 'array',},\r",
													"    },\r",
													"    'required': ['status', 'result', 'data']\r",
													"}\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"210\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"데이터 없음\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/penmemo/?patNo={{PAT_NO}}121211",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo",
												""
											],
											"query": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}121211"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "10.1.2 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resJson = pm.response.json();\r",
													"const userData =  Object.keys(resJson.data);\r",
													"\r",
													"const schema = {\r",
													"    'type': 'object',\r",
													"    'properties': {\r",
													"        'status': {'type': 'string'},\r",
													"        'result': {'type': 'string'},\r",
													"        'data': {'type': 'array',},\r",
													"    },\r",
													"    'required': ['status', 'result', 'data']\r",
													"}\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"210\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"데이터 없음\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{domain}}/penmemo",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo"
											]
										}
									},
									"response": []
								},
								{
									"name": "10.1.3 변조토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/penmemo/?patNo={{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo",
												""
											],
											"query": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "10.2 진료사진 저장",
							"item": [
								{
									"name": "10.2 진료사진 저장 및 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }\r",
													"}\r",
													"const resJson = pm.response.json();\r",
													"const seqList = [];\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});\r",
													"\r",
													"if(resJson.status === \"200\"){\r",
													"    const requestConfig = {\r",
													"        url: pm.environment.get('domain') + '/penmemo/?patNo=' + pm.collectionVariables.get('PAT_NO'),\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Authorization': 'Bearer ' + pm.environment.get('accessToken') // \r",
													"        },\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(requestConfig, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err); \r",
													"            return;\r",
													"        }\r",
													"        const resData = res.json().data;\r",
													"        const comparisonData = [];\r",
													"        resData.map((count) => { seqList.push(count.SEQ) });\r",
													"        const seqLast = Math.max(...seqList).toString();\r",
													"        for (let i = 0; i < resData.length; i++) {\r",
													"            if (resData[i].SEQ === seqLast) {\r",
													"                comparisonData.push(resData[i])\r",
													"            }\r",
													"        }\r",
													"        pm.test('Save data compare select', ()=> {\r",
													"            pm.expect(comparisonData).to.be.not.empty;\r",
													"            pm.expect(comparisonData[0].MEMO_TEXT).to.be.eql(pm.collectionVariables.get('MEMO_TEXT'))\r",
													"            pm.expect(comparisonData[0].IMAGE_TITLE).to.be.eql(pm.collectionVariables.get('IMAGE_TITLE'))\r",
													"            pm.expect(comparisonData[0].SERVICES).to.be.eql(pm.collectionVariables.get('randomService'))\r",
													"        });\r",
													"        pm.collectionVariables.set('IMAGE_SEQ',seqLast);\r",
													"    }); \r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const today = new Date();\r",
													"const year = today.getFullYear();\r",
													"const month = ('0' + (today.getMonth() + 1)).slice(-2);\r",
													"const day = ('0' + today.getDate()).slice(-2);\r",
													"const hours = ('0' + today.getHours()).slice(-2); \r",
													"const minutes = ('0' + today.getMinutes()).slice(-2);\r",
													"const seconds = ('0' + today.getSeconds()).slice(-2); \r",
													"const timeString = year + '-' + month  + '-' + day + \" \"+ hours + ':' + minutes  + ':' + seconds;\r",
													"\r",
													"\r",
													"const serviceList = ['필러','보톡스','보톡스,필러'];\r",
													"const randomNum = Math.floor(Math.random() * 21)+1;\r",
													"const imageUrl = \"C:/works/apiTest/image/\";\r",
													"const forNum = 21;\r",
													"\r",
													"const imageList = [];\r",
													"for(let i=1; i <= forNum; i++){\r",
													"        let str = imageUrl+'TestImage'+i+ '.jpg';\r",
													"        imageList.push(str)\r",
													"}\r",
													"\r",
													"const customImageList = [\r",
													"    '🥲.jpg',\r",
													"    '한글파일.jpg',\r",
													"    '!!!!!.jpg',\r",
													"    'test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'\r",
													"];\r",
													"\r",
													"for(index in customImageList){\r",
													"    imageList.push(imageUrl+customImageList[index])\r",
													"};\r",
													"\r",
													"const randomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
													"const randomService = serviceList[Math.floor(Math.random() * serviceList.length)];\r",
													"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
													"newFormData.push({ key: 'memoTxt', value: 'testText/' + timeString });\r",
													"newFormData.push({ key: 'imageTitle', value:'imageTitle/' + timeString });\r",
													"newFormData.push({ key: 'services', value: randomService});\r",
													"newFormData.push({ key: 'memoImage', type: 'file', src: randomImage});\r",
													"\r",
													"pm.collectionVariables.set('MEMO_TXT', newFormData[1].value);\r",
													"pm.collectionVariables.set('IMAGE_TITLE', newFormData[2].value);\r",
													"pm.collectionVariables.set('randomService',randomService);\r",
													"\r",
													"pm.request.body.formdata = newFormData;\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penmemo",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo"
											]
										}
									},
									"response": []
								},
								{
									"name": "10.2.1 필수값 미입력 저장",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'formdata',\r",
													"    formdata : [\r",
													"        {key: 'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
													"        {key: 'memoTxt', value: ''},\r",
													"        {key: 'imageTitle', value:''},\r",
													"        {key: 'services', value:''},\r",
													"        {key: 'memoImage', value:'C:/works/apiTest/image/'}\r",
													"    ]\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }\r",
													"}\r",
													"const resJson = pm.response.json()\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.eql(\"400\");\r",
													"    pm.expect(resJson.result).to.have.eql(\"필수 데이터 누락\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penmemo",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo"
											]
										}
									},
									"response": []
								},
								{
									"name": "10.2.2 이미지 미존재",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'formdata',\r",
													"    formdata : [\r",
													"        {key: 'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
													"        {key: 'memoTxt', value: '진료사진 상세'},\r",
													"        {key: 'imageTitle', value:'진료사진 1'},\r",
													"        {key: 'services', value:'보톡스'},\r",
													"        {key: 'memoImage', value:'C:/works/apiTest/image/'}\r",
													"    ]\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }\r",
													"}\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.eql(\"500\");\r",
													"    pm.expect(resJson.result).to.have.eql(\"메모 이미지 없음\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penmemo",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo"
											]
										}
									},
									"response": []
								},
								{
									"name": "10.2.3 대용량 사진 저장",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'formdata',\r",
													"    formdata : [\r",
													"        {key: 'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
													"        {key: 'memoTxt', value: 'test'},\r",
													"        {key: 'imageTitle', value:'테스트 타이틀'},\r",
													"        {key: 'services', value:'보톡스'},\r",
													"        {key: 'memoImage', type:'file' ,src:'C:/works/apiTest/image/대용량.jpg'}\r",
													"    ]\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }\r",
													"}\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test('Check returned JSON', function () {\r",
													"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penmemo",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo"
											]
										}
									},
									"response": []
								},
								{
									"name": "10.2.4 변조토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const today = new Date();\r",
													"const year = today.getFullYear();\r",
													"const month = ('0' + (today.getMonth() + 1)).slice(-2);\r",
													"const day = ('0' + today.getDate()).slice(-2);\r",
													"const hours = ('0' + today.getHours()).slice(-2); \r",
													"const minutes = ('0' + today.getMinutes()).slice(-2);\r",
													"const seconds = ('0' + today.getSeconds()).slice(-2); \r",
													"const timeString = year + '-' + month  + '-' + day + \" \"+ hours + ':' + minutes  + ':' + seconds;\r",
													"\r",
													"\r",
													"const serviceList = ['필러','보톡스','필러,보톡스'];\r",
													"const randomNum = Math.floor(Math.random() * 21)+1;\r",
													"const imageUrl = \"C:/works/apiTest/image/\";\r",
													"const forNum = 26;\r",
													"\r",
													"const imageList = [];\r",
													"for(let i=1; i <= forNum; i++){\r",
													"        let str = imageUrl+'TestImage'+i+ '.jpg';\r",
													"        imageList.push(str)\r",
													"}\r",
													"\r",
													"const customImageList = [\r",
													"    '🥲.jpg',\r",
													"    '한글파일.jpg',\r",
													"    '!!!!!.jpg',\r",
													"    'test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'\r",
													"];\r",
													"\r",
													"for(index in customImageList){\r",
													"    imageList.push(imageUrl+customImageList[index])\r",
													"};\r",
													"\r",
													"const randomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
													"const randomService = serviceList[Math.floor(Math.random() * serviceList.length)];\r",
													"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
													"newFormData.push({ key: 'memoTxt', value: 'testText / ' + timeString });\r",
													"newFormData.push({ key: 'imageTitle', value:'imageTitle / ' + timeString });\r",
													"newFormData.push({ key: 'services', value: randomService});\r",
													"newFormData.push({ key: 'memoImage', type: 'file', src: randomImage});\r",
													"\r",
													"pm.collectionVariables.set('imageTimeString', timeString)\r",
													"pm.collectionVariables.set('randomService',randomService)\r",
													"\r",
													"\r",
													"\r",
													"pm.request.body.formdata = newFormData;\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penmemo",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "10.3 진료사진 수정",
							"item": [
								{
									"name": "10.3 진료사진 수정 및 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const today = new Date();\r",
													"\r",
													"const year = today.getFullYear();\r",
													"const month = ('0' + (today.getMonth() + 1)).slice(-2);\r",
													"const day = ('0' + today.getDate()).slice(-2);\r",
													"const hours = ('0' + today.getHours()).slice(-2); \r",
													"const minutes = ('0' + today.getMinutes()).slice(-2);\r",
													"const seconds = ('0' + today.getSeconds()).slice(-2); \r",
													"const timeString = year + '-' + month  + '-' + day + \" \"+ hours + ':' + minutes  + ':' + seconds;\r",
													"\r",
													"const serviceList = ['필러','보톡스','보톡스,필러'];\r",
													"const imageUrl = \"C:/works/apiTest/image/updateImage/\"\r",
													"const forNum = 11;\r",
													"\r",
													"const imageList = [];\r",
													"for(let i=1; i <= forNum; i++){\r",
													"        let str = `${imageUrl}updateImage${i}.jpg`;\r",
													"        imageList.push(str)\r",
													"}\r",
													"\r",
													"const customImageList = [\r",
													"    '🥲.jpg',\r",
													"    '한글파일.jpg',\r",
													"    '!!!!!.jpg',\r",
													"    'test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'\r",
													"];\r",
													"\r",
													"for(index in customImageList){\r",
													"    imageList.push(imageUrl+customImageList[index])\r",
													"}\r",
													"\r",
													"const randomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
													"const randomService = serviceList[Math.floor(Math.random() * serviceList.length)];\r",
													"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
													"newFormData.push({ key: 'memoTxt', value: 'updateText : ' + timeString });\r",
													"newFormData.push({ key: 'imageTitle', value:'updateTitle : ' + timeString });\r",
													"newFormData.push({ key: 'services', value: randomService});\r",
													"newFormData.push({ key: 'memoImage', type: 'file', src: randomImage});\r",
													"newFormData.push({ key: 'seq', value: pm.collectionVariables.get('IMAGE_SEQ')});\r",
													"\r",
													"pm.collectionVariables.set('MEMO_TXT', newFormData[1].value);\r",
													"pm.collectionVariables.set('IMAGE_TITLE', newFormData[2].value);\r",
													"pm.collectionVariables.set('randomService',randomService);\r",
													"\r",
													"pm.request.body.formdata = newFormData;"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }\r",
													"}\r",
													"\r",
													"try {\r",
													"    resJson = pm.response.json()\r",
													"} catch (error) {\r",
													"    pm.test(\"Check for valid JSON response\", () => {\r",
													"        pm.expect.fail(\"❌ Invalid JSON response received\");\r",
													"    });\r",
													"    console.error(\"Error parsing JSON:\", error);\r",
													"}\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"200\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"성공\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});\r",
													"\r",
													"if(resJson.status === \"200\"){\r",
													"    const requestConfig = {\r",
													"        url: pm.environment.get('domain') + '/penmemo/?patNo=' + pm.collectionVariables.get('PAT_NO'),\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Authorization': 'Bearer ' + pm.environment.get('accessToken') // \r",
													"        },\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(requestConfig, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err); \r",
													"            return;\r",
													"        }\r",
													"        const resData = res.json().data.map((item)=> item.SEQ);\r",
													"        const seqLast = Math.max(...resData).toString();\r",
													"        const comparisonData = res.json().data.filter((item) => item.SEQ === seqLast);\r",
													"\r",
													"        pm.test('Save data compare select', ()=> {\r",
													"            pm.expect(comparisonData).to.be.not.empty;\r",
													"            pm.expect(comparisonData[0].MEMO_TEXT).to.be.eql(pm.collectionVariables.get('MEMO_TEXT'))\r",
													"            pm.expect(comparisonData[0].IMAGE_TITLE).to.be.eql(pm.collectionVariables.get('IMAGE_TITLE'))\r",
													"            pm.expect(comparisonData[0].SERVICES).to.be.eql(pm.collectionVariables.get('randomService'))\r",
													"        });\r",
													"    }); \r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penmemo/update",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "10.3.1 필수값 미입력 수정",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'multipart/form-data'});\r",
													"\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'formdata',\r",
													"    formdata : [\r",
													"        {key:'patNo', value: ''}, \r",
													"        {key:'memoTxt', value:''}, \r",
													"        {key:'imageTitle', value:''}, \r",
													"        {key:'services', value:''}, \r",
													"        {key:'seq', value:''}, \r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }\r",
													"}\r",
													"const resJson = pm.response.json();\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(pm.response).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.eql(\"400\");\r",
													"    pm.expect(resJson.result).to.have.eql(\"필수 데이터 누락3\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/penmemo/update",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "10.3.2 이미지 미존재 수정",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'multipart/form-data'});\r",
													"\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'formdata',\r",
													"    formdata : [\r",
													"        {key:'memoTxt', value:'업데이트 메모'}, \r",
													"        {key:'imageTitle', value:'업데이트 타이틀'}, \r",
													"        {key:'services', value:'필터'}, \r",
													"        {key:'memoImage', type:'file', src:'memoImage'}, \r",
													"        {key:'seq', value:'C:/works/apiTest/image/updateImage'}, \r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }\r",
													"}\r",
													"const resJson = pm.response.json();\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(pm.response).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.eql(\"400\");\r",
													"    pm.expect(resJson.result).to.have.eql(\"필수 데이터 누락3\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penmemo/update",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "10.3.3 대용량 사진 수정",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'formdata',\r",
													"    formdata : [\r",
													"        {key: 'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
													"        {key: 'memoTxt', value: 'test'},\r",
													"        {key: 'imageTitle', value:'테스트 타이틀'},\r",
													"        {key: 'services', value:'보톡스'},\r",
													"        {key: 'memoImage', type:'file' ,src:'C:/works/apiTest/image/대용량.jpg'},\r",
													"        {key: 'seq', value:pm.collectionVariables.get(\"IMAGE_SEQ\")},\r",
													"    ]\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resJson = pm.response.json();\r",
													"\r",
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락3\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penmemo/update",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "10.3.4 변조토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const today = new Date();\r",
													"\r",
													"const year = today.getFullYear();\r",
													"const month = ('0' + (today.getMonth() + 1)).slice(-2);\r",
													"const day = ('0' + today.getDate()).slice(-2);\r",
													"const hours = ('0' + today.getHours()).slice(-2); \r",
													"const minutes = ('0' + today.getMinutes()).slice(-2);\r",
													"const seconds = ('0' + today.getSeconds()).slice(-2); \r",
													"const timeString = year + '-' + month  + '-' + day + \" \"+ hours + ':' + minutes  + ':' + seconds;\r",
													"\r",
													"const serviceList = ['필러','보톡스','보톡스,필러'];\r",
													"const imageUrl = \"C:/works/apiTest/image/updateImage\"\r",
													"const forNum = 14;\r",
													"\r",
													"const imageList = [];\r",
													"for(let i=1; i <= forNum; i++){\r",
													"        let str = imageUrl+'updateImage'+i+ '.jpg';\r",
													"        imageList.push(str)\r",
													"}\r",
													"\r",
													"const customImageList = [\r",
													"    '🥲.jpg',\r",
													"    '한글파일.png',\r",
													"    '!!!!!.png',\r",
													"    'test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'\r",
													"];\r",
													"\r",
													"for(index in customImageList){\r",
													"    imageList.push(imageUrl+customImageList[index])\r",
													"}\r",
													"\r",
													"\r",
													"const randomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
													"const randomService = serviceList[Math.floor(Math.random() * serviceList.length)];\r",
													"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
													"newFormData.push({ key: 'memoTxt', value: 'updateText : ' + timeString });\r",
													"newFormData.push({ key: 'imageTitle', value:'updateTitle : ' + timeString });\r",
													"newFormData.push({ key: 'services', value: randomService});\r",
													"newFormData.push({ key: 'memoImage', type: 'file', src: randomImage});\r",
													"newFormData.push({ key: 'seq', value: pm.collectionVariables.get('IMAGE_SEQ')});\r",
													"\r",
													"\r",
													"pm.collectionVariables.set('imageTimeString', timeString)\r",
													"pm.collectionVariables.set('randomService',randomService)\r",
													"\r",
													"\r",
													"pm.request.body.formdata = newFormData;"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penmemo/update",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo",
												"update"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "10.4 진료사진 삭제",
							"item": [
								{
									"name": "10.4 진료사진 삭제",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'formdata',\r",
													"    formdata : [\r",
													"        {key:'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
													"        {key:'seq', value:pm.collectionVariables.get('IMAGE_SEQ')},\r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }\r",
													"}\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.eql(\"200\");\r",
													"    pm.expect(resJson.result).to.have.eql(\"성공\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"\r",
													"if(resJson.status === \"200\"){\r",
													"    const requestConfig = {\r",
													"        url: pm.environment.get('domain') + '/penmemo/?patNo=' + pm.collectionVariables.get('PAT_NO'),\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Authorization': 'Bearer ' + pm.environment.get('accessToken') // \r",
													"        },\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(requestConfig, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err); \r",
													"            return;\r",
													"        }\r",
													"        const resData = res.json().data.map((item)=> item.SEQ);\r",
													"        const seqLast = Math.max(...resData).toString();\r",
													"        const comparisonData = res.json().data.filter((item) => item.SEQ === seqLast);\r",
													"\r",
													"        pm.test('Save data compare select', ()=> {\r",
													"            pm.expect(comparisonData[0].SEQ).to.be.eql(seqLast);\r",
													"        });\r",
													"    }); \r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/penmemo/delete",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "10.4.1 필수값 미입력 삭제",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'formdata',\r",
													"    formdata : [\r",
													"        {key:'patNo', value: pm.collectionVariables.get('PAT_NO')}, \r",
													"        {key:'seq', value:''},\r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }\r",
													"}\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.eql(\"400\");\r",
													"    pm.expect(resJson.result).to.have.eql(\"필수 데이터 누락\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/penmemo/delete",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "10.4.2 사진 삭제 후 수정",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'multipart/form-data'});\r",
													"\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'formdata',\r",
													"    formdata : [\r",
													"        {key:'patNo', value:pm.collectionVariables.get('PAT_NO')}, \r",
													"        {key:'memoTxt', value:'업데이트 메모'}, \r",
													"        {key:'imageTitle', value:'업데이트 타이틀'}, \r",
													"        {key:'services', value:'필터'}, \r",
													"        {key:'memoImage', type:'file', src:'C:/works/apiTest/image/test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'}, \r",
													"        {key:'seq', value:pm.collectionVariables.get('IMAGE_SEQ')},\r",
													"    ]\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"500\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"메모 정보 없음\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{domain}}/penmemo/update",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "10.4.3 변조토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"pm.request.body = {\r",
													"    mode : 'formdata',\r",
													"    formdata : [\r",
													"        {key:'patNo', value: pm.collectionVariables.get('PAT_NO')},\r",
													"        {key:'seq', value:pm.collectionVariables.get('IMAGE_SEQ')},\r",
													"    ]\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{domain}}/penmemo/delete",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penmemo",
												"delete"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "11.펜차트",
					"item": [
						{
							"name": "11.1 펜차트 템플릿 조회",
							"item": [
								{
									"name": "11.1 펜차트 템플릿 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"status\": { \"type\": \"string\" },\r",
													"        \"result\": { \"type\": \"string\" },\r",
													"        \"data\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"                \"type\": \"object\",\r",
													"                \"properties\": {\r",
													"                    \"PENCT_CD\": { \"type\": \"string\" },\r",
													"                    \"PENCT_NM\": { \"type\": \"string\" },\r",
													"                    \"PENCT_URL\": { \"type\": \"string\" },\r",
													"                    \"CTGR_CD\": { \"type\": \"string\" },\r",
													"                    \"BSIC_YN\": { \"type\": \"string\" },\r",
													"                    \"CTGR_CD_NM\": { \"type\": \"string\" },\r",
													"                    \"SEQ\": { \"type\": \"string\" }\r",
													"                },\r",
													"                \"required\": [\"PENCT_CD\", \"PENCT_NM\", \"PENCT_URL\", \"CTGR_CD\", \"BSIC_YN\", \"CTGR_CD_NM\", \"SEQ\"]\r",
													"            }\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"status\", \"result\", \"data\"]\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"const penRanNum = Object.keys(resJson.data).length;\r",
													"const penctRandom = Math.floor(Math.random() * penRanNum)+1;\r",
													"console.log(penctRandom) \r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"   pm.response.to.have.status(200);\r",
													"   pm.collectionVariables.set('CTGR_CD',resJson.data[penctRandom].CTGR_CD)\r",
													"   pm.collectionVariables.set('PENCT_CD',resJson.data[penctRandom].PENCT_CD)\r",
													"   pm.collectionVariables.set('PENCT_NM',resJson.data[penctRandom].PENCT_NM)\r",
													"   });\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
													"    pm.expect(resJson.result).to.be.eql('성공');\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/penct",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct"
											]
										}
									},
									"response": []
								},
								{
									"name": "11.1.1 변조토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/penct",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "11.2 펜차트내역 조회",
							"item": [
								{
									"name": "11.2 펜차트내역 조회",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// const resJson = pm.response.json();\r",
													"\r",
													"// const schema = {\r",
													"//     'type':'object',\r",
													"//     'properties':{\r",
													"//         'status':{'type':'string'},\r",
													"//         'result':{'type':'string'},\r",
													"//         'data': {\r",
													"//             'type':'array',\r",
													"//             'items':{\r",
													"//                 'properties':{\r",
													"//                     'PENCT_SN':{'type':'string'},\r",
													"//                     'PENCT_DD':{'type':'string'},\r",
													"//                     'CTGR_CD':{'type':'string'},\r",
													"//                     'CTGR_CD_NM':{'type':'string'},\r",
													"//                     'PENCT_CD':{'type':'string'},\r",
													"//                     'PENCT_NM':{'type':'string'},\r",
													"//                     'IMAGE_URL':{'type':'string'},\r",
													"//                     'PENCT_MEMO':{'type':'string'},\r",
													"//                     'SEQ':{'type':'string'},\r",
													"//                 },\r",
													"//             'required': ['PENCT_SN','PENCT_DD','CTGR_CD','CTGR_CD_NM','PENCT_CD','PENCT_NM','IMAGE_URL','PENCT_MEMO','SEQ'],\r",
													"//             },\r",
													"//         },\r",
													"//     },\r",
													"//     'required':['status','result','data']\r",
													"// };\r",
													"\r",
													"\r",
													"// pm.test('Check server status', function () {\r",
													"//    pm.response.to.have.status(200);\r",
													"// });\r",
													"\r",
													"// pm.test(\"Check returned JSON\", () =>{\r",
													"//     pm.response.to.be.json;\r",
													"//     pm.expect(resJson).to.be.not.empty;\r",
													"//     pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
													"\r",
													"//     penctList = resJson.data;\r",
													"//     penctListRandom = penctList[Math.floor(Math.random() * penctList.length)];\r",
													"//     pm.collectionVariables.set('PENCT_SN', penctListRandom.PENCT_SN);\r",
													"//     pm.response.to.have.jsonSchema(schema);\r",
													"// })\r",
													"\r",
													"// pm.test(\"Check response time\", function () {\r",
													"//     pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"// });\r",
													"\r",
													"// pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"//     pm.expect(pm.request.url).to.match(/^https:/);\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{domain}}/penct/ptnt/0000060697",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct",
												"ptnt",
												"0000060697"
											]
										}
									},
									"response": []
								},
								{
									"name": "11.2.1 오입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resData = pm.response.json();\r",
													"\r",
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"        'data': {\r",
													"            'type':'array',\r",
													"            'items': {}\r",
													"        },\r",
													"    },'required':['status','result','data']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql('210');\r",
													"    pm.expect(resJson.result).to.be.eql('데이터 없음');\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/penct/ptnt/{{PAT_NO}}123",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct",
												"ptnt",
												"{{PAT_NO}}123"
											]
										}
									},
									"response": []
								},
								{
									"name": "11.2.2 미입력 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Check server status', function () {\r",
													"   pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/penct/ptnt/",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct",
												"ptnt",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "11.2.3 변조토큰",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/penct/ptnt/{{PAT_NO}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct",
												"ptnt",
												"{{PAT_NO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "11.3 펜차트 저장",
							"item": [
								{
									"name": "11.3 펜차트 저장 및 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const today = new Date();\r",
													"\r",
													"const year = today.getFullYear();\r",
													"const month = ('0' + (today.getMonth() + 1)).slice(-2);\r",
													"const day = ('0' + today.getDate()).slice(-2);\r",
													"const hours = ('0' + today.getHours()).slice(-2); \r",
													"const minutes = ('0' + today.getMinutes()).slice(-2);\r",
													"const seconds = ('0' + today.getSeconds()).slice(-2); \r",
													"const timeString = year + '-' + month  + '-' + day + \" \"+ hours + ':' + minutes  + ':' + seconds;\r",
													"const todayString = year+month+day;\r",
													"\r",
													"const randomNum = Math.floor(Math.random() * 24)+1;\r",
													"\r",
													"const imageUrl = \"C:/works/apiTest/image/\";\r",
													"const imageList = [];\r",
													"\r",
													"const forNum = 21;\r",
													"for(let i=1; i <= forNum; i++){\r",
													"        let str = imageUrl+'TestImage'+i+ '.jpg';\r",
													"        imageList.push(str)\r",
													"}\r",
													"const customImageList = [\r",
													"    '🥲.jpg',\r",
													"    '한글파일.jpg',\r",
													"    '!!!!!.jpg',\r",
													"    'test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'\r",
													"];\r",
													"\r",
													"for(index in customImageList){\r",
													"    imageList.push(imageUrl+customImageList[index])\r",
													"};\r",
													"const randomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
													"\r",
													"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
													"newFormData.push({ key: 'ctgrCd', value: pm.collectionVariables.get('CTGR_CD') });\r",
													"newFormData.push({ key: 'vistSn', value: pm.collectionVariables.get('VIST_SN') });\r",
													"newFormData.push({ key: 'penCtCd', value: pm.collectionVariables.get('PENCT_CD') });\r",
													"newFormData.push({ key: 'penCtNm', value: pm.collectionVariables.get('PENCT_NM') });\r",
													"newFormData.push({ key: 'penCtMemo', value: 'testText / ' + timeString });\r",
													"newFormData.push({ key: 'penCtImage', type: 'file', src: randomImage});\r",
													"\r",
													"pm.collectionVariables.set('todayString', todayString);\r",
													"pm.collectionVariables.set('PENCT_CD', newFormData[3].value);\r",
													"pm.collectionVariables.set('PENCT_NM', newFormData[4].value);\r",
													"pm.collectionVariables.set('PENCT_MEMO', newFormData[5].value);\r",
													"\r",
													"pm.request.body.formdata = newFormData;\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resData = pm.response.json();\r",
													"\r",
													"const schema = {\r",
													"    'type' : 'object',\r",
													"    'properties' : {\r",
													"        'status' : {'type' : 'string'},\r",
													"        'result' : {'type' : 'string'}\r",
													"    }, \r",
													"    'required' : ['status' ,'result']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});\r",
													"\r",
													"if(resJson.status === \"200\"){\r",
													"    const requestConfig = {\r",
													"        url: pm.environment.get('domain') + '/penct/ptnt/' + pm.collectionVariables.get('PAT_NO'),\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Authorization': 'Bearer ' + pm.environment.get('accessToken') // \r",
													"        },\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(requestConfig, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err); \r",
													"            return;\r",
													"        }\r",
													"        \r",
													"        const resData = res.json().data;\r",
													"        const penctSn = [];\r",
													"        resData.filter(item => {\r",
													"            if(item.PENCT_SN.startsWith(pm.collectionVariables.get('todayString'))){\r",
													"                penctSn.push(item);\r",
													"            }\r",
													"        });\r",
													"\r",
													"        let maxSn = penctSn.reduce((max, item) => {\r",
													"            const snValue = parseInt(item.PENCT_SN.split('_')[1], 10);\r",
													"            return snValue > max ? snValue : max;\r",
													"        }, 0);\r",
													"        let maxItem = penctSn.find(item => {\r",
													"            const snValue = parseInt(item.PENCT_SN.split('_')[1], 10);\r",
													"            return snValue === maxSn;\r",
													"        });\r",
													"        pm.test('Save data compare select', ()=> {\r",
													"            pm.expect(maxItem).to.be.not.empty;\r",
													"            pm.expect(maxItem.PENCT_CD).to.be.eql(pm.collectionVariables.get('PENCT_CD'))\r",
													"            pm.expect(maxItem.PENCT_NM).to.be.eql(pm.collectionVariables.get('PENCT_NM'))\r",
													"            pm.expect(maxItem.PENCT_MEMO).to.be.eql(pm.collectionVariables.get('PENCT_MEMO'))\r",
													"        });\r",
													"    }); \r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Origin",
												"value": "null"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penct",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct"
											]
										}
									},
									"response": []
								},
								{
									"name": "11.3.1 필수값 미입력",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resData = pm.response.json();\r",
													"\r",
													"const schema = {\r",
													"    'type' : 'object',\r",
													"    'properties' : {\r",
													"        'status' : {'type' : 'string'},\r",
													"        'result' : {'type' : 'string'}\r",
													"    }, \r",
													"    'required' : ['status' ,'result']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Origin",
												"value": "null"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penct",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct"
											]
										}
									},
									"response": []
								},
								{
									"name": "11.3.2 이미지 미존재",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
													"newFormData.push({ key: 'ctgrCd', value: pm.collectionVariables.get('CTGR_CD') });\r",
													"newFormData.push({ key: 'vistSn', value: pm.collectionVariables.get('VIST_SN') });\r",
													"newFormData.push({ key: 'penCtCd', value: pm.collectionVariables.get('PENCT_CD') });\r",
													"newFormData.push({ key: 'penCtNm', value: 'ERROR' });\r",
													"newFormData.push({ key: 'penCtMemo', value: 'ERROR' });\r",
													"newFormData.push({ key: 'penCtImage', type: 'file', src: 'ERROR'});\r",
													"\r",
													"pm.request.body.formdata = newFormData;\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resData = pm.response.json();\r",
													"\r",
													"const schema = {\r",
													"    'type' : 'object',\r",
													"    'properties' : {\r",
													"        'status' : {'type' : 'string'},\r",
													"        'result' : {'type' : 'string'}\r",
													"    }, \r",
													"    'required' : ['status' ,'result']\r",
													"}\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.be.eql(\"500\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"펜차트 이미지 없음\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Origin",
												"value": "null"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penct",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct"
											]
										}
									},
									"response": []
								},
								{
									"name": "11.3.3 대용량 사진 저장",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' });\r",
													"\r",
													"newFormData = []\r",
													"\r",
													"newFormData.push({ key: 'ctgrCd', value: pm.collectionVariables.get('CTGR_CD') });\r",
													"newFormData.push({ key: 'vistSn', value: pm.collectionVariables.get('VIST_SN') });\r",
													"newFormData.push({ key: 'penCtCd', value: pm.collectionVariables.get('PENCT_CD') });\r",
													"newFormData.push({ key: 'penCtNm', value: pm.collectionVariables.get('PENCT_NM') });\r",
													"newFormData.push({ key: 'penCtMemo', value: '대용량 이미지 업로드' });\r",
													"newFormData.push({ key: 'penCtImage', type: 'file', src: 'C:/works/apiTest/image/대용량.jpg'});\r",
													"\r",
													"pm.request.body.formdata = newFormData;"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"resJson = pm.response.json()\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(200);\r",
													"    pm.expect(resJson.status).to.be.eql(\"400\");\r",
													"    pm.expect(resJson.result).to.be.eql(\"필수 데이터 누락\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Origin",
												"value": "null"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penct",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct"
											]
										}
									},
									"response": []
								},
								{
									"name": "11.3.4 변조토큰 저장",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// pm.request.headers.add({key: \"Content-Type\", value: \"multipart/form-data\"});\r",
													"\r",
													"// pm.request.body = {\r",
													"//     mode: 'formdata',\r",
													"//     formdata: [\r",
													"//         { key: 'patNo', value: pm.collectionVariables.get('PAT_NO') },\r",
													"//         { key: 'vistSn', value: '00001' },\r",
													"//         { key: 'ctgrCd', value: 'CAT02' },\r",
													"//         { key: 'penCtCd', value: 'PEN016' },\r",
													"//         { key: 'penCtNm', value: '피부 시술 코스' },\r",
													"//         { key: 'penCtImage', type: 'file', src: 'C:/upload/testImage.JPG'}\r",
													"//     ]\r",
													"// };\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Origin",
												"value": "null"
											}
										],
										"url": {
											"raw": "{{domain}}/penct",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "11.4 펜차트 수정",
							"item": [
								{
									"name": "11.4 펜차트 수정 및 조회",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const today = new Date();\r",
													"\r",
													"const year = today.getFullYear();\r",
													"const month = ('0' + (today.getMonth() + 1)).slice(-2);\r",
													"const day = ('0' + today.getDate()).slice(-2);\r",
													"const hours = ('0' + today.getHours()).slice(-2); \r",
													"const minutes = ('0' + today.getMinutes()).slice(-2);\r",
													"const seconds = ('0' + today.getSeconds()).slice(-2); \r",
													"const timeString = year + '-' + month  + '-' + day + \" \"+ hours + ':' + minutes  + ':' + seconds;\r",
													"const todayString = year+month+day\r",
													"\r",
													"const serviceList = ['미지정','제모','시술코스','피부코스','초진지','차트지','반영구'];\r",
													"const randomNum = Math.floor(Math.random() * 11)+1;\r",
													"const imageUrl = \"C:/works/apiTest/image/updateImage/\";\r",
													"const imageList = [];\r",
													"\r",
													"const forNum = 12;\r",
													"for(let i=1; i <= forNum; i++){\r",
													"        let str = imageUrl+'updateImage'+i+ '.jpg';\r",
													"        imageList.push(str)\r",
													"}\r",
													"\r",
													"const customImageList = [\r",
													"    '🥲.jpg',\r",
													"    '한글파일.jpg',\r",
													"    '!!!!!.jpg',\r",
													"    'test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'\r",
													"];\r",
													"\r",
													"for(index in customImageList){\r",
													"    imageList.push(imageUrl+customImageList[index])\r",
													"};\r",
													"\r",
													"const updateRandomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
													"const serviceListRandom = serviceList[Math.floor(Math.random() * imageList.length)];\r",
													"\r",
													"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
													"newFormData.push({ key: 'penCtSn', value: pm.collectionVariables.get('PENCT_SN')});\r",
													"newFormData.push({ key: 'ctgrCd', value: pm.collectionVariables.get('CTGR_CD') });\r",
													"newFormData.push({ key: 'penCtCd', value: pm.collectionVariables.get('PENCT_CD') });\r",
													"newFormData.push({ key: 'penCtNm', value: pm.collectionVariables.get('PENCT_NM') });\r",
													"newFormData.push({ key: 'penCtMemo', value: 'testText / ' + timeString });\r",
													"newFormData.push({ key: 'penCtImage', type: 'file', src: updateRandomImage});\r",
													"\r",
													"pm.collectionVariables.set('todayString', todayString);\r",
													"pm.collectionVariables.set('PENCT_CD', newFormData[3].value);\r",
													"pm.collectionVariables.set('PENCT_NM', newFormData[4].value);\r",
													"pm.collectionVariables.set('PENCT_MEMO', newFormData[5].value);\r",
													"\r",
													"console.log(newFormData[5].value);\r",
													"\r",
													"pm.request.body.formdata = newFormData;\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resData = pm.response.json();\r",
													"\r",
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }, \r",
													"    'required':['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.oneOf([\"200\"]);\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});\r",
													"\r",
													"\r",
													"if(resJson.status === \"200\"){\r",
													"    const requestConfig = {\r",
													"        url: pm.environment.get('domain') + '/penct/ptnt/' + pm.collectionVariables.get('PAT_NO'),\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Authorization': 'Bearer ' + pm.environment.get('accessToken') \r",
													"        },\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(requestConfig, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err); \r",
													"            return;\r",
													"        }\r",
													"        \r",
													"        const resJosnData = res.json().data;\r",
													"        const penctSn = [];\r",
													"        resJosnData.filter(item => {\r",
													"            if(item.PENCT_SN.startsWith(pm.collectionVariables.get('todayString'))){\r",
													"                penctSn.push(item);\r",
													"            }\r",
													"        });\r",
													"        let maxSn = penctSn.reduce((max, item) => {\r",
													"            const snValue = parseInt(item.PENCT_SN.split('_')[1], 10);\r",
													"            return snValue > max ? snValue : max;\r",
													"        }, 0);\r",
													"        \r",
													"        let maxItem = penctSn.find(item => {\r",
													"            const snValue = parseInt(item.PENCT_SN.split('_')[1], 10);\r",
													"            return snValue === maxSn;\r",
													"        });\r",
													"        pm.test('Save data compare select', ()=> {\r",
													"            pm.expect(maxItem, \"maxItem is undefined\").to.exist;\r",
													"            if(maxItem) {\r",
													"                pm.expect(maxItem.PENCT_CD).to.eql(pm.collectionVariables.get('PENCT_CD'));\r",
													"                pm.expect(maxItem.PENCT_NM).to.eql(pm.collectionVariables.get('PENCT_NM'));\r",
													"                pm.expect(maxItem.PENCT_MEMO).to.eql(pm.collectionVariables.get('PENCT_MEMO'));\r",
													"            }\r",
													"        });\r",
													"    }); \r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penct/ptnt",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct",
												"ptnt"
											]
										}
									},
									"response": []
								},
								{
									"name": "11.4.1 필수값 오입력 수정",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({key: \"Content-Type\", value: \"multipart/form-data\"});\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'formdata',\r",
													"    formdata: [\r",
													"        { key: 'patNo', value: pm.collectionVariables.get('PAT_NO') },\r",
													"        { key: 'penCtSn', value: '20240402_8' },\r",
													"        { key: 'ctgrCd', value: 'CAT02' },\r",
													"        { key: 'penCtCd', value: 'PEN016' },\r",
													"        { key: 'penCtNm', value: '펜차트 수정 테스트' },\r",
													"        { key: 'penCtMemo', value: '펜차트 수정' },\r",
													"        { key: 'penCtImage', type: 'file', src: 'C:/upload/updateImage.jpg'}\r",
													"    ]\r",
													"};"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resData = pm.response.json();\r",
													"\r",
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }, \r",
													"    'required':['status','result']\r",
													"};\r",
													"\r",
													"pm.test(\"check server\", function(){\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"pm.test(\"check 200\", function(){\r",
													"    pm.expect(resData.status).to.have.oneOf([\"200\",\"210\"]);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"schema check\", function(){\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.oneOf([\"200\",\"210\"]);\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{domain}}/penct/ptnt",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct",
												"ptnt"
											]
										}
									},
									"response": []
								},
								{
									"name": "11.4.2 필수값 미입력 수정",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resData = pm.response.json();\r",
													"\r",
													"const schema = {\r",
													"    'type':'object',\r",
													"    'properties':{\r",
													"        'status':{'type':'string'},\r",
													"        'result':{'type':'string'},\r",
													"    }, \r",
													"    'required':['status','result']\r",
													"};\r",
													"\r",
													"const resJson = pm.response.json();\r",
													"\r",
													"pm.test('Check server status', function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check returned JSON\", () =>{\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(resJson).to.be.not.empty;\r",
													"    pm.expect(resJson.status).to.have.eql('400');\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});\r",
													"\r",
													"pm.test(\"Check HTTPS protocol usage\", function() {\r",
													"    pm.expect(pm.request.url).to.match(/^https:/);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{domain}}/penct/ptnt",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct",
												"ptnt"
											]
										}
									},
									"response": []
								},
								{
									"name": "11.4.3 변조토큰",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const today = new Date();\r",
													"\r",
													"const year = today.getFullYear();\r",
													"const month = ('0' + (today.getMonth() + 1)).slice(-2);\r",
													"const day = ('0' + today.getDate()).slice(-2);\r",
													"const hours = ('0' + today.getHours()).slice(-2); \r",
													"const minutes = ('0' + today.getMinutes()).slice(-2);\r",
													"const seconds = ('0' + today.getSeconds()).slice(-2); \r",
													"const timeString = year + '-' + month  + '-' + day + \" \"+ hours + ':' + minutes  + ':' + seconds;\r",
													"\r",
													"//const serviceList = ['미지정','제모','시술코스','피부코스','초진지','차트지','반영구'];\r",
													"\r",
													"const randomNum = Math.floor(Math.random() * 24)+1;\r",
													"\r",
													"const imageUrl = \"C:/upload/\";\r",
													"const imageList = [];\r",
													"\r",
													"const forNum = 26;\r",
													"for(let i=1; i <= forNum; i++){\r",
													"        let str = imageUrl+'TestImage'+i+ '.jpg';\r",
													"        imageList.push(str)\r",
													"}\r",
													"const customImageList = [\r",
													"    '🥲.jpg',\r",
													"    '한글파일.jpg',\r",
													"    '!!!!!.jpg',\r",
													"    'test.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg.jpg'\r",
													"];\r",
													"\r",
													"for(index in customImageList){\r",
													"    imageList.push(imageUrl+customImageList[index])\r",
													"};\r",
													"const randomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
													"\r",
													"// pm.request.headers.add({key: \"Content-Type\", value: \"multipart/form-data\"});\r",
													"\r",
													"// pm.request.body = {\r",
													"//     mode: 'formdata',\r",
													"//     formdata: [\r",
													"//         { key: 'patNo', value: pm.collectionVariables.get('PAT_NO') },\r",
													"//         { key: 'penCtSn', value: '20240402_8' },\r",
													"//         { key: 'ctgrCd', value: 'CAT02' },\r",
													"//         { key: 'penCtCd', value: 'PEN016' },\r",
													"//         { key: 'penCtNm', value: '펜차트 수정 테스트' },\r",
													"//         { key: 'penCtMemo', value: '펜차트 수정' },\r",
													"//         { key: 'penCtImage', type: 'file', src: 'C:/upload/updateImage.jpg'}\r",
													"//     ]\r",
													"// };\r",
													"\r",
													"const updaterandomImage = imageList[Math.floor(Math.random() * imageList.length)];\r",
													"\r",
													"const newFormData = pm.request.body.formdata.map(item => ({ ...item }));\r",
													"// newFormData.push({ key: 'patNo', value: pm.collectionVariables.get('PAT_NO') });\r",
													"newFormData.push({ key: 'penCtSn', value: pm.collectionVariables.get('PENCT_SN')});\r",
													"newFormData.push({ key: 'ctgrCd', value: pm.collectionVariables.get('CTGR_CD') });\r",
													"newFormData.push({ key: 'penCtCd', value: pm.collectionVariables.get('PENCT_CD') });\r",
													"newFormData.push({ key: 'penCtNm', value: pm.collectionVariables.get('PENCT_NM') });\r",
													"newFormData.push({ key: 'penCtMemo', value: 'testText / ' + timeString });\r",
													"newFormData.push({ key: 'penCtImage', type: 'file', src: updaterandomImage});\r",
													"\r",
													"pm.request.body.formdata = newFormData;\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Check server status', function () {\r",
													"    pm.expect(pm.response.code).to.be.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patNo",
													"value": "{{PAT_NO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}/penct/ptnt",
											"host": [
												"{{domain}}"
											],
											"path": [
												"penct",
												"ptnt"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.globals.set(\"testSucessServerStatus\", String((desc) => {\r",
							"    pm.test(`${desc} - 서버 응답 상태 확인`, () => {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}));\r",
							"\r",
							"pm.globals.set(\"testFailServerStatus\", String((desc) => {\r",
							"    pm.test(`${desc} - 서버 응답 상태 확인`, () => {\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}));\r",
							"\r",
							"pm.globals.set(\"testUnauthorizedResponseServerStatus\", String((desc) => {\r",
							"    pm.test(`${desc} - 서버 응답 상태 확인`, () => {\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}));\r",
							"\r",
							"pm.globals.set(\"testResponseTime\", String((desc) => {\r",
							"    pm.test(`${desc} - 응답 시간 검증`, function () {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"    });\r",
							"}));\r",
							"\r",
							"pm.globals.set(\"testHttpsProtocol\", String((desc) => {\r",
							"    pm.test(`${desc} - HTTPS 프로토콜 확인`, function () {\r",
							"        pm.expect(pm.request.url).to.match(/^https:/);\r",
							"    });\r",
							"}));\r",
							"\r",
							"pm.collectionVariables.set(\"testSucessJsonData\", String((desc, json, schema) => {\r",
							"    pm.test(`${desc} - 응답 JSON 데이터 확인`, () =>{\r",
							"        pm.response.to.be.json;\r",
							"        pm.expect(json).to.be.not.empty;\r",
							"        pm.expect(json.status).to.be.eql(\"200\");\r",
							"        pm.expect(json.result).to.be.eql(\"성공\");\r",
							"        if (json.hasOwnProperty(\"data\") && json.data !== null && json.data !== undefined){\r",
							"            pm.expect(json.data).to.be.not.empty;\r",
							"        }\r",
							"        pm.response.to.have.jsonSchema(schema);\r",
							"    });\r",
							"}));\r",
							"\r",
							"pm.collectionVariables.set(\"testValidateMissingRequiredData\", String((desc, json, schema) => {\r",
							"    pm.test(`${desc} - 응답 JSON 데이터 확인`, () =>{\r",
							"        pm.response.to.be.json;\r",
							"        pm.expect(json).to.be.not.empty;\r",
							"        if (json.status === 400){\r",
							"            pm.expect(json.status).to.be.eql(400);\r",
							"        } else{\r",
							"            pm.expect(json.status).to.be.eql(\"400\");\r",
							"        }\r",
							"        pm.expect(json.result).to.be.eql(\"필수 데이터 누락\");\r",
							"        pm.response.to.have.jsonSchema(schema);\r",
							"    });\r",
							"}));\r",
							"\r",
							"pm.collectionVariables.set(\"testEmptyJsonData\", String((desc, json, schema) => {\r",
							"    pm.test(`${desc} - 응답 JSON 데이터 확인`, () =>{\r",
							"        pm.response.to.be.json;\r",
							"        pm.expect(json).to.be.not.empty;\r",
							"        pm.expect(json.status).to.be.eql(\"210\");\r",
							"        pm.expect(json.result).to.be.eql(\"데이터 없음\");\r",
							"        if (json.data === null){\r",
							"            pm.expect(json.data).to.be.eql(null);\r",
							"        } else{\r",
							"            pm.expect(json.data).to.be.an('array').that.is.empty;\r",
							"        }\r",
							"        pm.response.to.have.jsonSchema(schema);\r",
							"    });\r",
							"}));\r",
							"\r",
							"pm.collectionVariables.set(\"testInvalidPasswordLoginData\", String((desc, json, schema) => {\r",
							"    pm.test(`${desc} - 응답 JSON 데이터 확인`, () =>{\r",
							"        pm.response.to.be.json;\r",
							"        pm.expect(json).to.be.not.empty;\r",
							"        pm.expect(json.status).to.be.eql(\"112\");\r",
							"        pm.expect(json.result).to.be.eql(\"비밀번호가 일치하지 않습니다.\");\r",
							"        pm.response.to.have.jsonSchema(schema);\r",
							"    });\r",
							"}));\r",
							"\r",
							"pm.collectionVariables.set(\"testcheckInitialPasswordResponse\", String((desc, json, schema) => {\r",
							"    pm.test(`${desc} - 응답 JSON 데이터 확인`, () =>{\r",
							"        pm.response.to.be.json;\r",
							"        pm.expect(json).to.be.not.empty;\r",
							"        pm.expect(resJson.status).to.be.eql(\"110\");\r",
							"        pm.expect(resJson.result).to.be.eql(\"초기화된 비밀번호입니다. 비밀번호를 변경해주세요.\");\r",
							"        pm.response.to.have.jsonSchema(schema);\r",
							"    });\r",
							"}));\r",
							"\r",
							"\r",
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "PAT_JNO",
			"value": ""
		},
		{
			"key": "ADDR",
			"value": ""
		},
		{
			"key": "PAT_NO",
			"value": ""
		},
		{
			"key": "PAT_BTH",
			"value": ""
		},
		{
			"key": "VIST_SN",
			"value": ""
		},
		{
			"key": "CNST_SN",
			"value": ""
		},
		{
			"key": "MOPR_NM",
			"value": ""
		},
		{
			"key": "PCKG_CD",
			"value": ""
		},
		{
			"key": "CTGR_CD",
			"value": ""
		},
		{
			"key": "PENCT_CD",
			"value": ""
		},
		{
			"key": "PENCT_NM",
			"value": ""
		},
		{
			"key": "SERVICES",
			"value": ""
		},
		{
			"key": "randomService",
			"value": ""
		},
		{
			"key": "USER_ID",
			"value": ""
		},
		{
			"key": "USER_NAME",
			"value": ""
		},
		{
			"key": "CNST_RSLT",
			"value": ""
		},
		{
			"key": "PAT_GRD_CD",
			"value": ""
		},
		{
			"key": "VST_PTH_CD",
			"value": ""
		},
		{
			"key": "DIAG_FLD_CD",
			"value": ""
		},
		{
			"key": "DIAG_TP_CD",
			"value": ""
		},
		{
			"key": "MOPR_TP_CD",
			"value": ""
		},
		{
			"key": "CDMOPR",
			"value": ""
		},
		{
			"key": "PRGR_STAT_CD",
			"value": ""
		},
		{
			"key": "PEN_CTGR_CD",
			"value": ""
		},
		{
			"key": "MOPR_MDIV_CD",
			"value": ""
		},
		{
			"key": "MOPR_LDIV_CD",
			"value": ""
		},
		{
			"key": "CNST_CTGR_CD",
			"value": ""
		},
		{
			"key": "CARD_PAY_TP_CD",
			"value": ""
		},
		{
			"key": "PAT_KND_CD",
			"value": ""
		},
		{
			"key": "IMGAE_CATE",
			"value": ""
		},
		{
			"key": "ETC_PAY_TP_CD",
			"value": ""
		},
		{
			"key": "CZ_CD",
			"value": ""
		},
		{
			"key": "ITEM_CD",
			"value": ""
		},
		{
			"key": "MEMO_TXT",
			"value": ""
		},
		{
			"key": "IMAGE_TITLE",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "IMAGE_SEQ",
			"value": ""
		},
		{
			"key": "imageTimeString",
			"value": ""
		},
		{
			"key": "PENCT_SN",
			"value": ""
		},
		{
			"key": "todayString",
			"value": ""
		},
		{
			"key": "PENCT_MEMO",
			"value": ""
		},
		{
			"key": "STATUS_BOARD_CD",
			"value": ""
		},
		{
			"key": "MOPR_NO",
			"value": ""
		},
		{
			"key": "MOPR_CD",
			"value": ""
		},
		{
			"key": "MOPR_",
			"value": ""
		},
		{
			"key": "CATEGORY",
			"value": ""
		},
		{
			"key": "depth1_cd",
			"value": ""
		},
		{
			"key": "depth2_cd",
			"value": ""
		},
		{
			"key": "depth2_nm",
			"value": ""
		},
		{
			"key": "penCtImage",
			"value": ""
		},
		{
			"key": "penCtNm",
			"value": ""
		},
		{
			"key": "timeString",
			"value": ""
		},
		{
			"key": "testJsonData",
			"value": ""
		},
		{
			"key": "testJsonNonData",
			"value": ""
		},
		{
			"key": "testValidateMissingRequiredData",
			"value": ""
		},
		{
			"key": "testInvalidPasswordLogin",
			"value": ""
		},
		{
			"key": "testInvalidPasswordLoginData",
			"value": ""
		},
		{
			"key": "testcheckInitialPasswordResponse",
			"value": ""
		},
		{
			"key": "testEmptyJsonData",
			"value": ""
		},
		{
			"key": "testSucessServerStatus",
			"value": ""
		},
		{
			"key": "testSucessJsonData",
			"value": ""
		},
		{
			"key": "DTL_ADDR",
			"value": ""
		},
		{
			"key": "FTGN_YN",
			"value": ""
		},
		{
			"key": "REFEREE",
			"value": ""
		},
		{
			"key": "PSPR_NO",
			"value": ""
		},
		{
			"key": "testUser",
			"value": "",
			"type": "string"
		},
		{
			"key": "testPhoneNumber",
			"value": "",
			"type": "string"
		},
		{
			"key": "PAT_NM",
			"value": ""
		},
		{
			"key": "MOBILE_NO",
			"value": ""
		},
		{
			"key": "testJno",
			"value": ""
		},
		{
			"key": "testMobile",
			"value": ""
		},
		{
			"key": "testAddr",
			"value": ""
		},
		{
			"key": "testDtlAddr",
			"value": ""
		},
		{
			"key": "testFtgnYn",
			"value": ""
		},
		{
			"key": "testSmsYn",
			"value": ""
		},
		{
			"key": "testAdSmsYn",
			"value": ""
		},
		{
			"key": "testPrsnYn",
			"value": ""
		},
		{
			"key": "testReferee",
			"value": ""
		},
		{
			"key": "testPsprno",
			"value": ""
		},
		{
			"key": "testTelNo",
			"value": ""
		},
		{
			"key": "testNm",
			"value": ""
		}
	]
}